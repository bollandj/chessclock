
chessclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000786  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  0080010e  0080010e  00000828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010b1  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e7  00000000  00000000  00001a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8e  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c2  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044d  00000000  00000000  000037c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_1>
   8:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 35       	cpi	r26, 0x5B	; 91
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
  9e:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <tx_spi>:
	0b01010011, // ?
};

static void tx_spi(uint8_t data)
{
	SPDR = data;
  a6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <tx_spi+0x2>
}
  ae:	08 95       	ret

000000b0 <init_display>:

void init_display(void)
{
	SPI_DDR |= 1<<SCK | 1<<MOSI | 1<<CS; 
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	8c 62       	ori	r24, 0x2C	; 44
  b4:	84 b9       	out	0x04, r24	; 4
	SPI_PORT |= 1<<CS;                  
  b6:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = 1<<SPE | 1<<MSTR | 1<<SPR1; // master mode, /64 prescaler
  b8:	82 e5       	ldi	r24, 0x52	; 82
  ba:	8c bd       	out	0x2c, r24	; 44
	
	TCCR0A = 1<<WGM01;  // CTC
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 1<<CS02;	// /256 prescaler
  c0:	94 e0       	ldi	r25, 0x04	; 4
  c2:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 1<<OCIE0A; // compare interrupt
  c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = 64;			// ~480Hz at 8MHz
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	87 bd       	out	0x27, r24	; 39
	
	PORTB &= ~(1<<CS); 
  cc:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0C);		// shutdown
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0x01);		//
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
  da:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); 
  dc:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0B);		// scanmode
  de:	8b e0       	ldi	r24, 0x0B	; 11
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0x07);		//
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
  ea:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); 
  ec:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0A);	    // intensity
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0x0B);		//
  f4:	8b e0       	ldi	r24, 0x0B	; 11
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
  fa:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); 
  fc:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x09);		// decode
  fe:	89 e0       	ldi	r24, 0x09	; 9
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0xFF);		//
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;	
 10a:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); 
 10c:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0F);		// test mode
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0x00);		// off
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
 11a:	2a 9a       	sbi	0x05, 2	; 5
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i = 0; i < 8; i++)
	{
		blinkOsc[i] = 0x00;
 120:	fc 01       	movw	r30, r24
 122:	e7 5e       	subi	r30, 0xE7	; 231
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	10 82       	st	Z, r1
		blinkMask[i] = 0x00;
 128:	fc 01       	movw	r30, r24
 12a:	ef 5e       	subi	r30, 0xEF	; 239
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	10 82       	st	Z, r1
 130:	01 96       	adiw	r24, 0x01	; 1
	PORTB &= ~(1<<CS); 
	tx_spi(0x0F);		// test mode
	tx_spi(0x00);		// off
	PORTB |= 1<<CS;
	
	for (uint8_t i = 0; i < 8; i++)
 132:	88 30       	cpi	r24, 0x08	; 8
 134:	91 05       	cpc	r25, r1
 136:	a1 f7       	brne	.-24     	; 0x120 <init_display+0x70>
	{
		blinkOsc[i] = 0x00;
		blinkMask[i] = 0x00;
	}
}
 138:	08 95       	ret

0000013a <do_blink>:

void do_blink(void)
{
	blinkTimer++;
 13a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <blinkTimer>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
	if (blinkTimer > blinkThreshold)
 140:	89 31       	cpi	r24, 0x19	; 25
 142:	18 f4       	brcc	.+6      	; 0x14a <do_blink+0x10>
	}
}

void do_blink(void)
{
	blinkTimer++;
 144:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <blinkTimer>
 148:	08 95       	ret
	if (blinkTimer > blinkThreshold)
	{
		blinkTimer = 0;
 14a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <blinkTimer>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
		for (uint8_t i = 0; i < 8; i++)
		{			
			blinkOsc[i] ^= 0x7F; // exclude DP from blink?
 152:	3f e7       	ldi	r19, 0x7F	; 127
 154:	fc 01       	movw	r30, r24
 156:	e7 5e       	subi	r30, 0xE7	; 231
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	20 81       	ld	r18, Z
 15c:	23 27       	eor	r18, r19
 15e:	20 83       	st	Z, r18
 160:	01 96       	adiw	r24, 0x01	; 1
{
	blinkTimer++;
	if (blinkTimer > blinkThreshold)
	{
		blinkTimer = 0;
		for (uint8_t i = 0; i < 8; i++)
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	91 05       	cpc	r25, r1
 166:	b1 f7       	brne	.-20     	; 0x154 <do_blink+0x1a>
 168:	08 95       	ret

0000016a <__vector_14>:
		}
	}
}

ISR(TIMER0_COMPA_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	cf 93       	push	r28
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	static uint8_t i;
	
	PORTB &= ~(1<<CS);
 18e:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(i+1);
 190:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <__data_end>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	8c 0f       	add	r24, r28
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	//tx_spi(displayBuffer[i] & !(blinkMask[i] & blinkOsc[i])); // for SR multiplexed display
	tx_spi(displayBuffer[i] | (blinkMask[i] & blinkOsc[i]));
 19c:	2c 2f       	mov	r18, r28
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	ef 5d       	subi	r30, 0xDF	; 223
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	40 81       	ld	r20, Z
 1a8:	f9 01       	movw	r30, r18
 1aa:	ef 5e       	subi	r30, 0xEF	; 239
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	80 81       	ld	r24, Z
 1b0:	f9 01       	movw	r30, r18
 1b2:	e7 5e       	subi	r30, 0xE7	; 231
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	90 81       	ld	r25, Z
 1b8:	89 23       	and	r24, r25
 1ba:	84 2b       	or	r24, r20
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
 1c0:	2a 9a       	sbi	0x05, 2	; 5
	
	
	i++;
	i &= 0x07;	
 1c2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	87 70       	andi	r24, 0x07	; 7
 1ca:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	cf 91       	pop	r28
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <scan_keys>:
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
}

void scan_keys(void)
{
	lastKeyState = keyState;
 1f2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <keyState>
 1f6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <lastKeyState>
		
	keyState = KEY_PIN;
 1fa:	96 b1       	in	r25, 0x06	; 6
 1fc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <keyState>
	uint8_t keyDiff = keyState ^ lastKeyState;
 200:	89 27       	eor	r24, r25
	
	keyPressed = keyDiff & ~keyState;	
 202:	29 2f       	mov	r18, r25
 204:	20 95       	com	r18
 206:	28 23       	and	r18, r24
 208:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <keyPressed>
	keyReleased = keyDiff & keyState;
 20c:	89 23       	and	r24, r25
 20e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <keyReleased>
 212:	08 95       	ret

00000214 <init_keys>:

#include "keys.h"

void init_keys(void)
{
	EICRA = 1<<ISC11 | 1<<ISC01; // falling edge
 214:	8a e0       	ldi	r24, 0x0A	; 10
 216:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT1 | 1<<INT0;   // enable INT0, INT1
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	8d bb       	out	0x1d, r24	; 29
	PORTD |= 1<<PD2 | 1<<PD3;    // enable pullups
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	8c 60       	ori	r24, 0x0C	; 12
 222:	8b b9       	out	0x0b, r24	; 11
	
	KEY_PORT |= KEY_MASK; // enable pullups
 224:	88 b1       	in	r24, 0x08	; 8
 226:	8f 61       	ori	r24, 0x1F	; 31
 228:	88 b9       	out	0x08, r24	; 8
	
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
 22a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <scan_keys>
 22e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <scan_keys>
 232:	08 95       	ret

00000234 <init_timer>:

volatile playerData playerAData, playerBData, *currentPlayerData;

void init_timer(void)
{
	ASSR = 1<<AS2; // enable asynchronous mode
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	
	TCCR2B |= 1<<CS20;         // /1 prescaler
 23a:	e1 eb       	ldi	r30, 0xB1	; 177
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	81 60       	ori	r24, 0x01	; 1
 242:	80 83       	st	Z, r24
	while (ASSR & 1<<TCR2BUB); // wait for register update
 244:	e6 eb       	ldi	r30, 0xB6	; 182
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 fd       	sbrc	r24, 0
 24c:	fd cf       	rjmp	.-6      	; 0x248 <init_timer+0x14>

	TIFR2  = 1<<TOV2;   // clear interrupt flag	
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	87 bb       	out	0x17, r24	; 23
 252:	08 95       	ret

00000254 <add_time>:
	//TIMSK2 = 1<<TOIE2;  // enable Timer2 overflow interrupt
}

/* increments baseTime by incTime (ignoring ticks) */
void add_time(volatile gameTime *baseTime, gameTime incTime)
{
 254:	fc 01       	movw	r30, r24
 256:	db 01       	movw	r26, r22
	(*baseTime)[SECONDS] += incTime[SECONDS];
 258:	95 81       	ldd	r25, Z+5	; 0x05
 25a:	15 96       	adiw	r26, 0x05	; 5
 25c:	8c 91       	ld	r24, X
 25e:	15 97       	sbiw	r26, 0x05	; 5
 260:	89 0f       	add	r24, r25
 262:	85 83       	std	Z+5, r24	; 0x05
	if ((*baseTime)[SECONDS] > 9) 
 264:	85 81       	ldd	r24, Z+5	; 0x05
 266:	8a 30       	cpi	r24, 0x0A	; 10
 268:	34 f0       	brlt	.+12     	; 0x276 <add_time+0x22>
	{
		(*baseTime)[SECONDS] -= 10;
 26a:	85 81       	ldd	r24, Z+5	; 0x05
 26c:	8a 50       	subi	r24, 0x0A	; 10
 26e:	85 83       	std	Z+5, r24	; 0x05
		(*baseTime)[TEN_SECONDS]++;
 270:	84 81       	ldd	r24, Z+4	; 0x04
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	84 83       	std	Z+4, r24	; 0x04
	}
	
	(*baseTime)[TEN_SECONDS] += incTime[TEN_SECONDS];
 276:	94 81       	ldd	r25, Z+4	; 0x04
 278:	14 96       	adiw	r26, 0x04	; 4
 27a:	8c 91       	ld	r24, X
 27c:	14 97       	sbiw	r26, 0x04	; 4
 27e:	89 0f       	add	r24, r25
 280:	84 83       	std	Z+4, r24	; 0x04
	if ((*baseTime)[TEN_SECONDS] > 5)
 282:	84 81       	ldd	r24, Z+4	; 0x04
 284:	86 30       	cpi	r24, 0x06	; 6
 286:	34 f0       	brlt	.+12     	; 0x294 <add_time+0x40>
	{
		(*baseTime)[TEN_SECONDS] -= 6;
 288:	84 81       	ldd	r24, Z+4	; 0x04
 28a:	86 50       	subi	r24, 0x06	; 6
 28c:	84 83       	std	Z+4, r24	; 0x04
		(*baseTime)[MINUTES]++;
 28e:	83 81       	ldd	r24, Z+3	; 0x03
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	83 83       	std	Z+3, r24	; 0x03
	}
	
	(*baseTime)[MINUTES] += incTime[MINUTES];
 294:	93 81       	ldd	r25, Z+3	; 0x03
 296:	13 96       	adiw	r26, 0x03	; 3
 298:	8c 91       	ld	r24, X
 29a:	13 97       	sbiw	r26, 0x03	; 3
 29c:	89 0f       	add	r24, r25
 29e:	83 83       	std	Z+3, r24	; 0x03
	if ((*baseTime)[MINUTES] > 9)
 2a0:	83 81       	ldd	r24, Z+3	; 0x03
 2a2:	8a 30       	cpi	r24, 0x0A	; 10
 2a4:	34 f0       	brlt	.+12     	; 0x2b2 <add_time+0x5e>
	{
		(*baseTime)[MINUTES] -= 10;
 2a6:	83 81       	ldd	r24, Z+3	; 0x03
 2a8:	8a 50       	subi	r24, 0x0A	; 10
 2aa:	83 83       	std	Z+3, r24	; 0x03
		(*baseTime)[TEN_MINUTES]++;
 2ac:	82 81       	ldd	r24, Z+2	; 0x02
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	82 83       	std	Z+2, r24	; 0x02
	}
	
	(*baseTime)[TEN_MINUTES] += incTime[TEN_MINUTES];
 2b2:	92 81       	ldd	r25, Z+2	; 0x02
 2b4:	12 96       	adiw	r26, 0x02	; 2
 2b6:	8c 91       	ld	r24, X
 2b8:	12 97       	sbiw	r26, 0x02	; 2
 2ba:	89 0f       	add	r24, r25
 2bc:	82 83       	std	Z+2, r24	; 0x02
	if ((*baseTime)[TEN_MINUTES] > 5)
 2be:	82 81       	ldd	r24, Z+2	; 0x02
 2c0:	86 30       	cpi	r24, 0x06	; 6
 2c2:	34 f0       	brlt	.+12     	; 0x2d0 <add_time+0x7c>
	{
		(*baseTime)[TEN_MINUTES] -= 6;
 2c4:	82 81       	ldd	r24, Z+2	; 0x02
 2c6:	86 50       	subi	r24, 0x06	; 6
 2c8:	82 83       	std	Z+2, r24	; 0x02
		(*baseTime)[HOURS]++;
 2ca:	81 81       	ldd	r24, Z+1	; 0x01
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	81 83       	std	Z+1, r24	; 0x01
	}
	
	(*baseTime)[HOURS] += incTime[HOURS];
 2d0:	91 81       	ldd	r25, Z+1	; 0x01
 2d2:	11 96       	adiw	r26, 0x01	; 1
 2d4:	8c 91       	ld	r24, X
 2d6:	11 97       	sbiw	r26, 0x01	; 1
 2d8:	89 0f       	add	r24, r25
 2da:	81 83       	std	Z+1, r24	; 0x01
	if ((*baseTime)[HOURS] > 9)
 2dc:	81 81       	ldd	r24, Z+1	; 0x01
 2de:	8a 30       	cpi	r24, 0x0A	; 10
 2e0:	34 f0       	brlt	.+12     	; 0x2ee <add_time+0x9a>
	{
		(*baseTime)[HOURS] -= 10;
 2e2:	81 81       	ldd	r24, Z+1	; 0x01
 2e4:	8a 50       	subi	r24, 0x0A	; 10
 2e6:	81 83       	std	Z+1, r24	; 0x01
		(*baseTime)[TEN_HOURS]++;
 2e8:	80 81       	ld	r24, Z
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 83       	st	Z, r24
	}
	
	(*baseTime)[TEN_HOURS] += incTime[TEN_HOURS];
 2ee:	90 81       	ld	r25, Z
 2f0:	8c 91       	ld	r24, X
 2f2:	89 0f       	add	r24, r25
 2f4:	80 83       	st	Z, r24
	if ((*baseTime)[TEN_HOURS] > 9)
 2f6:	80 81       	ld	r24, Z
 2f8:	8a 30       	cpi	r24, 0x0A	; 10
 2fa:	34 f0       	brlt	.+12     	; 0x308 <add_time+0xb4>
	{
		(*baseTime)[TEN_HOURS]   = 0;
 2fc:	10 82       	st	Z, r1
		(*baseTime)[HOURS]       = 0;
 2fe:	11 82       	std	Z+1, r1	; 0x01
		(*baseTime)[TEN_MINUTES] = 0;
 300:	12 82       	std	Z+2, r1	; 0x02
		(*baseTime)[MINUTES]     = 0;
 302:	13 82       	std	Z+3, r1	; 0x03
		(*baseTime)[TEN_SECONDS] = 0;
 304:	14 82       	std	Z+4, r1	; 0x04
		(*baseTime)[SECONDS]     = 0;
 306:	15 82       	std	Z+5, r1	; 0x05
 308:	08 95       	ret

0000030a <reset>:

/* returns */
//int8_t cmp_time()

void reset(void)
{
 30a:	ee e4       	ldi	r30, 0x4E	; 78
 30c:	f1 e0       	ldi	r31, 0x01	; 1
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
	{
		playerATime[i] = gameConfig.initialTime[i];
 312:	21 91       	ld	r18, Z+
 314:	dc 01       	movw	r26, r24
 316:	aa 5b       	subi	r26, 0xBA	; 186
 318:	be 4f       	sbci	r27, 0xFE	; 254
 31a:	2c 93       	st	X, r18
		playerBTime[i] = gameConfig.initialTime[i];
 31c:	dc 01       	movw	r26, r24
 31e:	a8 5c       	subi	r26, 0xC8	; 200
 320:	be 4f       	sbci	r27, 0xFE	; 254
 322:	2c 93       	st	X, r18
 324:	01 96       	adiw	r24, 0x01	; 1
//int8_t cmp_time()

void reset(void)
{
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
 326:	86 30       	cpi	r24, 0x06	; 6
 328:	91 05       	cpc	r25, r1
 32a:	99 f7       	brne	.-26     	; 0x312 <reset+0x8>
		playerATime[i] = gameConfig.initialTime[i];
		playerBTime[i] = gameConfig.initialTime[i];
	}

	/* reset ticks */
	playerATicks = 0;
 32c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <playerATicks>
	playerBTicks = 0;
 330:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <playerBTicks>
	
	/* reset move counts */
	playerAData.moves = 0;
 334:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <playerAData+0x1>
 338:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <playerAData>
	playerBData.moves = 0;
 33c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <playerBData+0x1>
 340:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <playerBData>
 344:	08 95       	ret

00000346 <write_time>:
}

void write_time(void)
{	
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	9c 01       	movw	r18, r24
 34c:	2e 5f       	subi	r18, 0xFE	; 254
 34e:	3f 4f       	sbci	r19, 0xFF	; 255
	for (uint8_t i = 0; i < 4; i++)
	{
		displayBuffer[i] = playerATime[i+2];
 350:	f9 01       	movw	r30, r18
 352:	ea 5b       	subi	r30, 0xBA	; 186
 354:	fe 4f       	sbci	r31, 0xFE	; 254
 356:	40 81       	ld	r20, Z
 358:	fc 01       	movw	r30, r24
 35a:	ef 5d       	subi	r30, 0xDF	; 223
 35c:	fe 4f       	sbci	r31, 0xFE	; 254
 35e:	40 83       	st	Z, r20
		displayBuffer[i+4] = playerBTime[i+2];
 360:	f9 01       	movw	r30, r18
 362:	e8 5c       	subi	r30, 0xC8	; 200
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	20 81       	ld	r18, Z
 368:	fc 01       	movw	r30, r24
 36a:	eb 5d       	subi	r30, 0xDB	; 219
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	20 83       	st	Z, r18
 370:	01 96       	adiw	r24, 0x01	; 1
	playerBData.moves = 0;
}

void write_time(void)
{	
	for (uint8_t i = 0; i < 4; i++)
 372:	84 30       	cpi	r24, 0x04	; 4
 374:	91 05       	cpc	r25, r1
 376:	49 f7       	brne	.-46     	; 0x34a <write_time+0x4>
	{
		displayBuffer[i] = playerATime[i+2];
		displayBuffer[i+4] = playerBTime[i+2];
	}
}
 378:	08 95       	ret

0000037a <main>:

int main(void)
{		
	/* default to player A as white/starting */
	
	currentPlayerTicks = &playerATicks;
 37a:	8f e3       	ldi	r24, 0x3F	; 63
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <currentPlayerTicks+0x1>
 382:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <currentPlayerTicks>
	currentPlayerTime = &playerATime;
 386:	86 e4       	ldi	r24, 0x46	; 70
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <currentPlayerTime+0x1>
 38e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <currentPlayerTime>
	currentPlayerData = &playerAData;
 392:	8d e2       	ldi	r24, 0x2D	; 45
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <currentPlayerData+0x1>
 39a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <currentPlayerData>
	
	DDRD |= 1<<PD0 | 1<<PD1;
 39e:	8a b1       	in	r24, 0x0a	; 10
 3a0:	83 60       	ori	r24, 0x03	; 3
 3a2:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PD0);
 3a4:	58 98       	cbi	0x0b, 0	; 11
	PORTD |= 1<<PD1;
 3a6:	59 9a       	sbi	0x0b, 1	; 11
	
	gameConfig = blitz3plus2Config;
 3a8:	8d e0       	ldi	r24, 0x0D	; 13
 3aa:	e0 e0       	ldi	r30, 0x00	; 0
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	ae e4       	ldi	r26, 0x4E	; 78
 3b0:	b1 e0       	ldi	r27, 0x01	; 1
 3b2:	01 90       	ld	r0, Z+
 3b4:	0d 92       	st	X+, r0
 3b6:	8a 95       	dec	r24
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0x38>
	
	reset();
 3ba:	0e 94 85 01 	call	0x30a	; 0x30a <reset>
	
	init_display();
 3be:	0e 94 58 00 	call	0xb0	; 0xb0 <init_display>
	init_keys();
 3c2:	0e 94 0a 01 	call	0x214	; 0x214 <init_keys>
	init_sound();
 3c6:	0e 94 b6 03 	call	0x76c	; 0x76c <init_sound>
	init_timer();
 3ca:	0e 94 1a 01 	call	0x234	; 0x234 <init_timer>

	sei();
 3ce:	78 94       	sei
			break;
			
			case GAME_PAUSED:
			if (keyPressed & START_KEY)
			{
				TIMSK2 = 1<<TOIE2;
 3d0:	c0 e7       	ldi	r28, 0x70	; 112
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	ff 24       	eor	r15, r15
 3d6:	f3 94       	inc	r15
				state = GAME_ACTIVE;
 3d8:	0f 2e       	mov	r0, r31
 3da:	f3 e0       	ldi	r31, 0x03	; 3
 3dc:	ef 2e       	mov	r14, r31
 3de:	f0 2d       	mov	r31, r0
			
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
			{
				TIMSK2 = 0x00;
				state = GAME_PAUSED;	
 3e0:	68 94       	set
 3e2:	cc 24       	eor	r12, r12
 3e4:	c2 f8       	bld	r12, 2
				state = GAME_ACTIVE;
			}
			else if (keyPressed & TIME_KEY)
			{
				timeEditCursor = 0;
				blinkMask[0] = 0xFF;
 3e6:	01 e1       	ldi	r16, 0x11	; 17
 3e8:	11 e0       	ldi	r17, 0x01	; 1
 3ea:	dd 24       	eor	r13, r13
 3ec:	da 94       	dec	r13
			}
			else if (keyPressed & UP_KEY)
			{
				uint8_t timeComponent = ++playerATime[timeEditCursor+2];
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f5 e0       	ldi	r31, 0x05	; 5
 3f2:	af 2e       	mov	r10, r31
 3f4:	f0 2d       	mov	r31, r0
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
 3f6:	0f 2e       	mov	r0, r31
 3f8:	f9 e0       	ldi	r31, 0x09	; 9
 3fa:	bf 2e       	mov	r11, r31
 3fc:	f0 2d       	mov	r31, r0
	
	//sound_on();
	
    while (1) 
    {
		scan_keys();
 3fe:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <scan_keys>
		
		switch (state)
 402:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <state>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	7b c0       	rjmp	.+246    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 40c:	28 f4       	brcc	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40e:	88 23       	and	r24, r24
 410:	61 f0       	breq	.+24     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	f1 f0       	breq	.+60     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 416:	9a c0       	rjmp	.+308    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 418:	84 30       	cpi	r24, 0x04	; 4
 41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	83 c0       	rjmp	.+262    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 41e:	08 f4       	brcc	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	77 c0       	rjmp	.+238    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 422:	85 30       	cpi	r24, 0x05	; 5
 424:	09 f4       	brne	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	88 c0       	rjmp	.+272    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 428:	91 c0       	rjmp	.+290    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		{
			case IDLE:
			if (keyPressed & START_KEY)
 42a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <keyPressed>
 42e:	82 ff       	sbrs	r24, 2
 430:	04 c0       	rjmp	.+8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			{
				TIMSK2 = 1<<TOIE2;
 432:	f8 82       	st	Y, r15
				
				state = GAME_ACTIVE;
 434:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <state>
 438:	09 c0       	rjmp	.+18     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			}
			else if (keyPressed & TIME_KEY)
 43a:	81 ff       	sbrs	r24, 1
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			{
				timeEditCursor = 0;
 43e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timeEditCursor>
				blinkMask[0] = 0xFF;
 442:	f8 01       	movw	r30, r16
 444:	d0 82       	st	Z, r13
				blinkMask[4] = 0xFF;
 446:	d4 82       	std	Z+4, r13	; 0x04
								
				state = EDIT_TIME;
 448:	f0 92 3e 01 	sts	0x013E, r15	; 0x80013e <state>
			}
			
			write_time();
 44c:	0e 94 a3 01 	call	0x346	; 0x346 <write_time>
			break;
 450:	7d c0       	rjmp	.+250    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			
			case EDIT_TIME:
			if (keyPressed & START_KEY)
 452:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <keyPressed>
 456:	82 ff       	sbrs	r24, 2
 458:	0e c0       	rjmp	.+28     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			{
				blinkMask[timeEditCursor] = 0x00;
 45a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timeEditCursor>
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	fc 01       	movw	r30, r24
 462:	ef 5e       	subi	r30, 0xEF	; 239
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	10 82       	st	Z, r1
				blinkMask[timeEditCursor+4] = 0x00;
 468:	fc 01       	movw	r30, r24
 46a:	eb 5e       	subi	r30, 0xEB	; 235
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	10 82       	st	Z, r1
				
				state = IDLE;	
 470:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 474:	6b c0       	rjmp	.+214    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			}
			else if (keyPressed & TIME_KEY)
 476:	81 ff       	sbrs	r24, 1
 478:	1c c0       	rjmp	.+56     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			{
				blinkMask[timeEditCursor] = 0x00;
 47a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timeEditCursor>
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	f9 01       	movw	r30, r18
 484:	ef 5e       	subi	r30, 0xEF	; 239
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	10 82       	st	Z, r1
				blinkMask[timeEditCursor+4] = 0x00;
 48a:	f9 01       	movw	r30, r18
 48c:	eb 5e       	subi	r30, 0xEB	; 235
 48e:	fe 4f       	sbci	r31, 0xFE	; 254
 490:	10 82       	st	Z, r1
				
				timeEditCursor++;
				timeEditCursor &= 0x03;
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	83 70       	andi	r24, 0x03	; 3
 496:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timeEditCursor>
				
				blinkMask[timeEditCursor] = 0xFF;
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	fc 01       	movw	r30, r24
 49e:	ef 5e       	subi	r30, 0xEF	; 239
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	d0 82       	st	Z, r13
				blinkMask[timeEditCursor+4] = 0xFF;
 4a4:	fc 01       	movw	r30, r24
 4a6:	eb 5e       	subi	r30, 0xEB	; 235
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	d0 82       	st	Z, r13
				
				state = IDLE;
 4ac:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 4b0:	4d c0       	rjmp	.+154    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			}
			else if (keyPressed & UP_KEY)
 4b2:	84 ff       	sbrs	r24, 4
 4b4:	4b c0       	rjmp	.+150    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			{
				uint8_t timeComponent = ++playerATime[timeEditCursor+2];
 4b6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timeEditCursor>
 4ba:	29 2f       	mov	r18, r25
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	a9 01       	movw	r20, r18
 4c0:	4e 5f       	subi	r20, 0xFE	; 254
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	fa 01       	movw	r30, r20
 4c6:	ea 5b       	subi	r30, 0xBA	; 186
 4c8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ca:	80 81       	ld	r24, Z
 4cc:	8f 5f       	subi	r24, 0xFF	; 255
 4ce:	80 83       	st	Z, r24
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
 4d0:	90 ff       	sbrs	r25, 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d4:	9b 2d       	mov	r25, r11
 4d6:	01 c0       	rjmp	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			}
			else if (keyPressed & UP_KEY)
			{
				uint8_t timeComponent = ++playerATime[timeEditCursor+2];
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
 4d8:	9a 2d       	mov	r25, r10
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
				
				if (timeComponent > limit) timeComponent = 0;
 4da:	98 17       	cp	r25, r24
 4dc:	08 f4       	brcc	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4de:	80 e0       	ldi	r24, 0x00	; 0
				
				playerATime[timeEditCursor+2] = timeComponent;
 4e0:	fa 01       	movw	r30, r20
 4e2:	ea 5b       	subi	r30, 0xBA	; 186
 4e4:	fe 4f       	sbci	r31, 0xFE	; 254
 4e6:	80 83       	st	Z, r24
				playerBTime[timeEditCursor+2] = timeComponent;	
 4e8:	fa 01       	movw	r30, r20
 4ea:	e8 5c       	subi	r30, 0xC8	; 200
 4ec:	fe 4f       	sbci	r31, 0xFE	; 254
 4ee:	80 83       	st	Z, r24
				
				displayBuffer[timeEditCursor] = timeComponent;
 4f0:	f9 01       	movw	r30, r18
 4f2:	ef 5d       	subi	r30, 0xDF	; 223
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	80 83       	st	Z, r24
				displayBuffer[timeEditCursor+4] = timeComponent;	
 4f8:	f9 01       	movw	r30, r18
 4fa:	eb 5d       	subi	r30, 0xDB	; 219
 4fc:	fe 4f       	sbci	r31, 0xFE	; 254
 4fe:	80 83       	st	Z, r24
 500:	25 c0       	rjmp	.+74     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
				
			}
			break;
			
			case EDIT_SETTINGS:
			if (keyPressed & START_KEY)
 502:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <keyPressed>
 506:	82 ff       	sbrs	r24, 2
 508:	21 c0       	rjmp	.+66     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			{
				state = IDLE;
 50a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 50e:	1e c0       	rjmp	.+60     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			}
			break;
			
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
 510:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <keyPressed>
 514:	82 ff       	sbrs	r24, 2
 516:	03 c0       	rjmp	.+6      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			{
				TIMSK2 = 0x00;
 518:	18 82       	st	Y, r1
				state = GAME_PAUSED;	
 51a:	c0 92 3e 01 	sts	0x013E, r12	; 0x80013e <state>
			}
			
			write_time();
 51e:	0e 94 a3 01 	call	0x346	; 0x346 <write_time>
			break;
 522:	14 c0       	rjmp	.+40     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			
			case GAME_PAUSED:
			if (keyPressed & START_KEY)
 524:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <keyPressed>
 528:	82 ff       	sbrs	r24, 2
 52a:	03 c0       	rjmp	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			{
				TIMSK2 = 1<<TOIE2;
 52c:	f8 82       	st	Y, r15
				state = GAME_ACTIVE;
 52e:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <state>
			}
			
			write_time();
 532:	0e 94 a3 01 	call	0x346	; 0x346 <write_time>
			break;
 536:	0a c0       	rjmp	.+20     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			
			case GAME_FINISHED:
			if (keyPressed & START_KEY)
 538:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <keyPressed>
 53c:	82 ff       	sbrs	r24, 2
 53e:	04 c0       	rjmp	.+8      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
			{
				reset();
 540:	0e 94 85 01 	call	0x30a	; 0x30a <reset>
				state = IDLE;
 544:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
			}
			
			write_time();
 548:	0e 94 a3 01 	call	0x346	; 0x346 <write_time>
			break;
		}
		
		do_blink();
 54c:	0e 94 9d 00 	call	0x13a	; 0x13a <do_blink>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 550:	8f e2       	ldi	r24, 0x2F	; 47
 552:	95 e7       	ldi	r25, 0x75	; 117
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 558:	00 c0       	rjmp	.+0      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 55a:	00 00       	nop
 55c:	50 cf       	rjmp	.-352    	; 0x3fe <main+0x84>

0000055e <__vector_1>:
    }
}

/* Player A's button */
ISR(INT0_vect) 
{	
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	2f 93       	push	r18
 56a:	3f 93       	push	r19
 56c:	4f 93       	push	r20
 56e:	5f 93       	push	r21
 570:	6f 93       	push	r22
 572:	7f 93       	push	r23
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
 578:	af 93       	push	r26
 57a:	bf 93       	push	r27
 57c:	ef 93       	push	r30
 57e:	ff 93       	push	r31
	switch (state)
 580:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <state>
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	19 f5       	brne	.+70     	; 0x5ce <__vector_1+0x70>
	{
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerATime)
 588:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <currentPlayerTime>
 58c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <currentPlayerTime+0x1>
 590:	86 54       	subi	r24, 0x46	; 70
 592:	91 40       	sbci	r25, 0x01	; 1
 594:	e1 f4       	brne	.+56     	; 0x5ce <__vector_1+0x70>
		{
			switch (gameConfig.gameMode)
 596:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <gameConfig+0x6>
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	19 f0       	breq	.+6      	; 0x5a4 <__vector_1+0x46>
 59e:	83 30       	cpi	r24, 0x03	; 3
 5a0:	41 f0       	breq	.+16     	; 0x5b2 <__vector_1+0x54>
 5a2:	15 c0       	rjmp	.+42     	; 0x5ce <__vector_1+0x70>
				case SIMPLE:
				
				break;
				
				case INCREMENT:
				add_time(currentPlayerTime, gameConfig.delay);
 5a4:	65 e5       	ldi	r22, 0x55	; 85
 5a6:	71 e0       	ldi	r23, 0x01	; 1
 5a8:	86 e4       	ldi	r24, 0x46	; 70
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	0e 94 2a 01 	call	0x254	; 0x254 <add_time>
				break;
 5b0:	0e c0       	rjmp	.+28     	; 0x5ce <__vector_1+0x70>
	switch (state)
	{
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerATime)
		{
			switch (gameConfig.gameMode)
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	90 e0       	ldi	r25, 0x00	; 0
				break;
				
				case BRONSTEIN_DELAY:
				for (uint8_t i = 0; i < 6; i++)
				{
					delayTime[i] = playerBTime[i];
 5b6:	fc 01       	movw	r30, r24
 5b8:	e8 5c       	subi	r30, 0xC8	; 200
 5ba:	fe 4f       	sbci	r31, 0xFE	; 254
 5bc:	20 81       	ld	r18, Z
 5be:	fc 01       	movw	r30, r24
 5c0:	e0 5c       	subi	r30, 0xC0	; 192
 5c2:	fe 4f       	sbci	r31, 0xFE	; 254
 5c4:	20 83       	st	Z, r18
 5c6:	01 96       	adiw	r24, 0x01	; 1
				case SIMPLE_DELAY:
				
				break;
				
				case BRONSTEIN_DELAY:
				for (uint8_t i = 0; i < 6; i++)
 5c8:	86 30       	cpi	r24, 0x06	; 6
 5ca:	91 05       	cpc	r25, r1
 5cc:	a1 f7       	brne	.-24     	; 0x5b6 <__vector_1+0x58>
		
		default:			
		break;
	}
	
	currentPlayerTime  = &playerBTime; // start decrementing other player's time instead
 5ce:	88 e3       	ldi	r24, 0x38	; 56
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <currentPlayerTime+0x1>
 5d6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <currentPlayerTime>
	currentPlayerTicks = &playerBTicks;
 5da:	87 e3       	ldi	r24, 0x37	; 55
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <currentPlayerTicks+0x1>
 5e2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <currentPlayerTicks>
		
	PORTD |= 1<<PD1;
 5e6:	59 9a       	sbi	0x0b, 1	; 11
	PORTD &= ~(1<<PD0);	
 5e8:	58 98       	cbi	0x0b, 0	; 11
}
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30
 5ee:	bf 91       	pop	r27
 5f0:	af 91       	pop	r26
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	7f 91       	pop	r23
 5f8:	6f 91       	pop	r22
 5fa:	5f 91       	pop	r21
 5fc:	4f 91       	pop	r20
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <__vector_2>:

/* Player B's button */
ISR(INT1_vect)
{
 60c:	1f 92       	push	r1
 60e:	0f 92       	push	r0
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	0f 92       	push	r0
 614:	11 24       	eor	r1, r1
 616:	2f 93       	push	r18
 618:	3f 93       	push	r19
 61a:	4f 93       	push	r20
 61c:	5f 93       	push	r21
 61e:	6f 93       	push	r22
 620:	7f 93       	push	r23
 622:	8f 93       	push	r24
 624:	9f 93       	push	r25
 626:	af 93       	push	r26
 628:	bf 93       	push	r27
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31
	switch (state)
 62e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <state>
 632:	83 30       	cpi	r24, 0x03	; 3
 634:	89 f4       	brne	.+34     	; 0x658 <__vector_2+0x4c>
	{		
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerBTime)
 636:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <currentPlayerTime>
 63a:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <currentPlayerTime+0x1>
 63e:	88 53       	subi	r24, 0x38	; 56
 640:	91 40       	sbci	r25, 0x01	; 1
 642:	51 f4       	brne	.+20     	; 0x658 <__vector_2+0x4c>
		{			
			switch (gameConfig.gameMode)
 644:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <gameConfig+0x6>
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	31 f4       	brne	.+12     	; 0x658 <__vector_2+0x4c>
				case SIMPLE:
				
				break;
			
				case INCREMENT:
				add_time(currentPlayerTime, gameConfig.delay);
 64c:	65 e5       	ldi	r22, 0x55	; 85
 64e:	71 e0       	ldi	r23, 0x01	; 1
 650:	88 e3       	ldi	r24, 0x38	; 56
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 2a 01 	call	0x254	; 0x254 <add_time>
		
		default:
		break;
	}
	
	currentPlayerTime  = &playerATime; // start decrementing other player's time instead	
 658:	86 e4       	ldi	r24, 0x46	; 70
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <currentPlayerTime+0x1>
 660:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <currentPlayerTime>
	currentPlayerTicks = &playerATicks;
 664:	8f e3       	ldi	r24, 0x3F	; 63
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <currentPlayerTicks+0x1>
 66c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <currentPlayerTicks>
		
	PORTD |= 1<<PD0;
 670:	58 9a       	sbi	0x0b, 0	; 11
	PORTD &= ~(1<<PD1);
 672:	59 98       	cbi	0x0b, 1	; 11
}
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	bf 91       	pop	r27
 67a:	af 91       	pop	r26
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	7f 91       	pop	r23
 682:	6f 91       	pop	r22
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	3f 91       	pop	r19
 68a:	2f 91       	pop	r18
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__vector_9>:

/* TODO: implement simple/Bronstein delay by decrementing delay time in addition to/as well as current player time */
ISR(TIMER2_OVF_vect)
{	
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	8f 93       	push	r24
 6a2:	ef 93       	push	r30
 6a4:	ff 93       	push	r31
	if (++(*currentPlayerTicks) > 127)
 6a6:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <currentPlayerTicks>
 6aa:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <currentPlayerTicks+0x1>
 6ae:	80 81       	ld	r24, Z
 6b0:	8f 5f       	subi	r24, 0xFF	; 255
 6b2:	80 83       	st	Z, r24
 6b4:	88 23       	and	r24, r24
 6b6:	0c f0       	brlt	.+2      	; 0x6ba <__vector_9+0x24>
 6b8:	51 c0       	rjmp	.+162    	; 0x75c <__vector_9+0xc6>
	{
		*currentPlayerTicks = 0;
 6ba:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <currentPlayerTicks>
 6be:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <currentPlayerTicks+0x1>
 6c2:	10 82       	st	Z, r1
		
		if (--(*currentPlayerTime)[SECONDS] < 0)
 6c4:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <currentPlayerTime>
 6c8:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <currentPlayerTime+0x1>
 6cc:	85 81       	ldd	r24, Z+5	; 0x05
 6ce:	81 50       	subi	r24, 0x01	; 1
 6d0:	85 83       	std	Z+5, r24	; 0x05
 6d2:	88 23       	and	r24, r24
 6d4:	0c f0       	brlt	.+2      	; 0x6d8 <__vector_9+0x42>
 6d6:	42 c0       	rjmp	.+132    	; 0x75c <__vector_9+0xc6>
		{
			(*currentPlayerTime)[SECONDS] = 9;
 6d8:	89 e0       	ldi	r24, 0x09	; 9
 6da:	85 83       	std	Z+5, r24	; 0x05
		
			if (--(*currentPlayerTime)[TEN_SECONDS] < 0)
 6dc:	84 81       	ldd	r24, Z+4	; 0x04
 6de:	81 50       	subi	r24, 0x01	; 1
 6e0:	84 83       	std	Z+4, r24	; 0x04
 6e2:	88 23       	and	r24, r24
 6e4:	dc f5       	brge	.+118    	; 0x75c <__vector_9+0xc6>
			{
				(*currentPlayerTime)[TEN_SECONDS] = 5;
 6e6:	85 e0       	ldi	r24, 0x05	; 5
 6e8:	84 83       	std	Z+4, r24	; 0x04
			
				if (--(*currentPlayerTime)[MINUTES] < 0)
 6ea:	83 81       	ldd	r24, Z+3	; 0x03
 6ec:	81 50       	subi	r24, 0x01	; 1
 6ee:	83 83       	std	Z+3, r24	; 0x03
 6f0:	88 23       	and	r24, r24
 6f2:	a4 f5       	brge	.+104    	; 0x75c <__vector_9+0xc6>
				{
					(*currentPlayerTime)[MINUTES] = 9;
 6f4:	89 e0       	ldi	r24, 0x09	; 9
 6f6:	83 83       	std	Z+3, r24	; 0x03
				
					if (--(*currentPlayerTime)[TEN_MINUTES] < 0)
 6f8:	82 81       	ldd	r24, Z+2	; 0x02
 6fa:	81 50       	subi	r24, 0x01	; 1
 6fc:	82 83       	std	Z+2, r24	; 0x02
 6fe:	88 23       	and	r24, r24
 700:	6c f5       	brge	.+90     	; 0x75c <__vector_9+0xc6>
					{					
						(*currentPlayerTime)[TEN_MINUTES] = 5;
 702:	85 e0       	ldi	r24, 0x05	; 5
 704:	82 83       	std	Z+2, r24	; 0x02
					
						if (--(*currentPlayerTime)[HOURS] < 0)
 706:	81 81       	ldd	r24, Z+1	; 0x01
 708:	81 50       	subi	r24, 0x01	; 1
 70a:	81 83       	std	Z+1, r24	; 0x01
 70c:	88 23       	and	r24, r24
 70e:	34 f5       	brge	.+76     	; 0x75c <__vector_9+0xc6>
						{
							(*currentPlayerTime)[HOURS] = 9;
 710:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <currentPlayerTime>
 714:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <currentPlayerTime+0x1>
 718:	89 e0       	ldi	r24, 0x09	; 9
 71a:	81 83       	std	Z+1, r24	; 0x01
						
							if(--(*currentPlayerTime)[TEN_HOURS] < 0)
 71c:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <currentPlayerTime>
 720:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <currentPlayerTime+0x1>
 724:	80 81       	ld	r24, Z
 726:	81 50       	subi	r24, 0x01	; 1
 728:	80 83       	st	Z, r24
 72a:	88 23       	and	r24, r24
 72c:	bc f4       	brge	.+46     	; 0x75c <__vector_9+0xc6>
							{
								(*currentPlayerTime)[TEN_HOURS]   = 0;
 72e:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <currentPlayerTime>
 732:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <currentPlayerTime+0x1>
 736:	10 82       	st	Z, r1
								(*currentPlayerTime)[HOURS]       = 0;
 738:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <currentPlayerTime>
 73c:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <currentPlayerTime+0x1>
 740:	11 82       	std	Z+1, r1	; 0x01
								(*currentPlayerTime)[TEN_MINUTES] = 0;
 742:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <currentPlayerTime>
 746:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <currentPlayerTime+0x1>
 74a:	12 82       	std	Z+2, r1	; 0x02
								(*currentPlayerTime)[MINUTES]     = 0;
 74c:	13 82       	std	Z+3, r1	; 0x03
								(*currentPlayerTime)[TEN_SECONDS] = 0;
 74e:	14 82       	std	Z+4, r1	; 0x04
								(*currentPlayerTime)[SECONDS]     = 0;	
 750:	15 82       	std	Z+5, r1	; 0x05
								
								TIMSK2 = 0x00; // disable further ticks
 752:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
								state = GAME_FINISHED;
 756:	85 e0       	ldi	r24, 0x05	; 5
 758:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
				}
			}
		}
	}		
	
}
 75c:	ff 91       	pop	r31
 75e:	ef 91       	pop	r30
 760:	8f 91       	pop	r24
 762:	0f 90       	pop	r0
 764:	0f be       	out	0x3f, r0	; 63
 766:	0f 90       	pop	r0
 768:	1f 90       	pop	r1
 76a:	18 95       	reti

0000076c <init_sound>:

#include "sound.h"

void init_sound(void)
{
	DDRB |= 1<<PB1; // OC1A
 76c:	21 9a       	sbi	0x04, 1	; 4
	
	TCCR1A = 1<<COM1A0 | 1<<WGM11 | 1<<WGM10; // Fast PWM, toggle, TOP = 0CR1A
 76e:	83 e4       	ldi	r24, 0x43	; 67
 770:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	//TCCR1B = 1<<WGM13 | 1<<WGM12 | 1<<CS11; // /8
	OCR1A = 999;
 774:	87 ee       	ldi	r24, 0xE7	; 231
 776:	93 e0       	ldi	r25, 0x03	; 3
 778:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 77c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 780:	08 95       	ret

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
