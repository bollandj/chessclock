
chessclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000b76  00000c0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800150  00800150  00000c5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac1  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b91  00000000  00000000  00002919  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010c0  00000000  00000000  000034aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  0000456c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ea  00000000  00000000  00004874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079b  00000000  00000000  0000505e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000057f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_1>
   8:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_2>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_9>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_14>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	9e 03       	fmulsu	r17, r22
  6a:	e0 03       	fmuls	r22, r16
  6c:	fd 03       	fmulsu	r23, r21
  6e:	1a 04       	cpc	r1, r10
  70:	33 03       	mulsu	r19, r19
  72:	17 03       	mulsu	r17, r23
  74:	37 04       	cpc	r3, r7
  76:	43 04       	cpc	r4, r3
  78:	58 04       	cpc	r5, r8

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	e6 e7       	ldi	r30, 0x76	; 118
  8e:	fb e0       	ldi	r31, 0x0B	; 11
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a0 35       	cpi	r26, 0x50	; 80
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	a0 e5       	ldi	r26, 0x50	; 80
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a0 3a       	cpi	r26, 0xA0	; 160
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 af 02 	call	0x55e	; 0x55e <main>
  b0:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <tx_spi>:
			displayBuffer[i+ab+1] = sevenSeg[q];
			num -= q*factors[i];
			z = 1;	
		}			
	}	
}
  b8:	8e bd       	out	0x2e, r24	; 46
  ba:	0d b4       	in	r0, 0x2d	; 45
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <tx_spi+0x2>
  c0:	08 95       	ret

000000c2 <init_display>:
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	8d 62       	ori	r24, 0x2D	; 45
  c6:	84 b9       	out	0x04, r24	; 4
  c8:	28 9a       	sbi	0x05, 0	; 5
  ca:	82 e5       	ldi	r24, 0x52	; 82
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	55 9a       	sbi	0x0a, 5	; 10
  d0:	83 e2       	ldi	r24, 0x23	; 35
  d2:	84 bd       	out	0x24, r24	; 36
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	85 bd       	out	0x25, r24	; 37
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  de:	80 e3       	ldi	r24, 0x30	; 48
  e0:	87 bd       	out	0x27, r24	; 39
  e2:	8a e0       	ldi	r24, 0x0A	; 10
  e4:	88 bd       	out	0x28, r24	; 40
  e6:	28 98       	cbi	0x05, 0	; 5
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
  f4:	28 9a       	sbi	0x05, 0	; 5
  f6:	28 98       	cbi	0x05, 0	; 5
  f8:	8b e0       	ldi	r24, 0x0B	; 11
  fa:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
 104:	28 9a       	sbi	0x05, 0	; 5
 106:	28 98       	cbi	0x05, 0	; 5
 108:	8a e0       	ldi	r24, 0x0A	; 10
 10a:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
 10e:	8b e0       	ldi	r24, 0x0B	; 11
 110:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
 114:	28 9a       	sbi	0x05, 0	; 5
 116:	28 98       	cbi	0x05, 0	; 5
 118:	89 e0       	ldi	r24, 0x09	; 9
 11a:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
 124:	28 9a       	sbi	0x05, 0	; 5
 126:	28 98       	cbi	0x05, 0	; 5
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
 134:	28 9a       	sbi	0x05, 0	; 5
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	e6 5a       	subi	r30, 0xA6	; 166
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	10 82       	st	Z, r1
 142:	fc 01       	movw	r30, r24
 144:	ee 5a       	subi	r30, 0xAE	; 174
 146:	fe 4f       	sbci	r31, 0xFE	; 254
 148:	10 82       	st	Z, r1
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	91 05       	cpc	r25, r1
 150:	a1 f7       	brne	.-24     	; 0x13a <init_display+0x78>
 152:	08 95       	ret

00000154 <do_blink>:
 154:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <blinkTimer>
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	85 31       	cpi	r24, 0x15	; 21
 15c:	18 f4       	brcc	.+6      	; 0x164 <do_blink+0x10>
 15e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <blinkTimer>
 162:	08 95       	ret
 164:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <blinkTimer>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	e6 5a       	subi	r30, 0xA6	; 166
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	20 81       	ld	r18, Z
 174:	20 95       	com	r18
 176:	20 83       	st	Z, r18
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	88 30       	cpi	r24, 0x08	; 8
 17c:	91 05       	cpc	r25, r1
 17e:	b1 f7       	brne	.-20     	; 0x16c <do_blink+0x18>
 180:	08 95       	ret

00000182 <write_time>:
 182:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 186:	99 23       	and	r25, r25
 188:	19 f0       	breq	.+6      	; 0x190 <write_time+0xe>
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 190:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	e3 58       	subi	r30, 0x83	; 131
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	90 81       	ld	r25, Z
 19e:	91 11       	cpse	r25, r1
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <write_time+0x26>
 1a2:	81 11       	cpse	r24, r1
 1a4:	7c c0       	rjmp	.+248    	; 0x29e <write_time+0x11c>
 1a6:	13 c0       	rjmp	.+38     	; 0x1ce <write_time+0x4c>
 1a8:	f9 01       	movw	r30, r18
 1aa:	e3 58       	subi	r30, 0x83	; 131
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	e0 81       	ld	r30, Z
 1b0:	0e 2e       	mov	r0, r30
 1b2:	00 0c       	add	r0, r0
 1b4:	ff 0b       	sbc	r31, r31
 1b6:	ef 5f       	subi	r30, 0xFF	; 255
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	90 81       	ld	r25, Z
 1bc:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <displayBuffer>
 1c0:	f9 01       	movw	r30, r18
 1c2:	eb 59       	subi	r30, 0x9B	; 155
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	90 81       	ld	r25, Z
 1c8:	99 23       	and	r25, r25
 1ca:	51 f0       	breq	.+20     	; 0x1e0 <write_time+0x5e>
 1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <write_time+0x62>
 1ce:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <displayBuffer>
 1d2:	f9 01       	movw	r30, r18
 1d4:	eb 59       	subi	r30, 0x9B	; 155
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	81 f0       	breq	.+32     	; 0x1fe <write_time+0x7c>
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <write_time+0x62>
 1e0:	88 23       	and	r24, r24
 1e2:	69 f0       	breq	.+26     	; 0x1fe <write_time+0x7c>
 1e4:	f9 01       	movw	r30, r18
 1e6:	eb 59       	subi	r30, 0x9B	; 155
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	e0 81       	ld	r30, Z
 1ec:	0e 2e       	mov	r0, r30
 1ee:	00 0c       	add	r0, r0
 1f0:	ff 0b       	sbc	r31, r31
 1f2:	ef 5f       	subi	r30, 0xFF	; 255
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	80 81       	ld	r24, Z
 1f8:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <displayBuffer+0x4>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <write_time+0x80>
 1fe:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <displayBuffer+0x4>
 202:	a9 01       	movw	r20, r18
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255
 208:	fa 01       	movw	r30, r20
 20a:	e3 58       	subi	r30, 0x83	; 131
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	e0 81       	ld	r30, Z
 210:	0e 2e       	mov	r0, r30
 212:	00 0c       	add	r0, r0
 214:	ff 0b       	sbc	r31, r31
 216:	ef 5f       	subi	r30, 0xFF	; 255
 218:	fe 4f       	sbci	r31, 0xFE	; 254
 21a:	80 81       	ld	r24, Z
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	e5 e7       	ldi	r30, 0x75	; 117
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	81 83       	std	Z+1, r24	; 0x01
 224:	c9 01       	movw	r24, r18
 226:	02 96       	adiw	r24, 0x02	; 2
 228:	dc 01       	movw	r26, r24
 22a:	a3 58       	subi	r26, 0x83	; 131
 22c:	be 4f       	sbci	r27, 0xFE	; 254
 22e:	ac 91       	ld	r26, X
 230:	0a 2e       	mov	r0, r26
 232:	00 0c       	add	r0, r0
 234:	bb 0b       	sbc	r27, r27
 236:	af 5f       	subi	r26, 0xFF	; 255
 238:	be 4f       	sbci	r27, 0xFE	; 254
 23a:	6c 91       	ld	r22, X
 23c:	62 83       	std	Z+2, r22	; 0x02
 23e:	2d 5f       	subi	r18, 0xFD	; 253
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	d9 01       	movw	r26, r18
 244:	a3 58       	subi	r26, 0x83	; 131
 246:	be 4f       	sbci	r27, 0xFE	; 254
 248:	ac 91       	ld	r26, X
 24a:	0a 2e       	mov	r0, r26
 24c:	00 0c       	add	r0, r0
 24e:	bb 0b       	sbc	r27, r27
 250:	af 5f       	subi	r26, 0xFF	; 255
 252:	be 4f       	sbci	r27, 0xFE	; 254
 254:	6c 91       	ld	r22, X
 256:	63 83       	std	Z+3, r22	; 0x03
 258:	da 01       	movw	r26, r20
 25a:	ab 59       	subi	r26, 0x9B	; 155
 25c:	be 4f       	sbci	r27, 0xFE	; 254
 25e:	ac 91       	ld	r26, X
 260:	0a 2e       	mov	r0, r26
 262:	00 0c       	add	r0, r0
 264:	bb 0b       	sbc	r27, r27
 266:	af 5f       	subi	r26, 0xFF	; 255
 268:	be 4f       	sbci	r27, 0xFE	; 254
 26a:	4c 91       	ld	r20, X
 26c:	40 68       	ori	r20, 0x80	; 128
 26e:	45 83       	std	Z+5, r20	; 0x05
 270:	dc 01       	movw	r26, r24
 272:	ab 59       	subi	r26, 0x9B	; 155
 274:	be 4f       	sbci	r27, 0xFE	; 254
 276:	ac 91       	ld	r26, X
 278:	0a 2e       	mov	r0, r26
 27a:	00 0c       	add	r0, r0
 27c:	bb 0b       	sbc	r27, r27
 27e:	af 5f       	subi	r26, 0xFF	; 255
 280:	be 4f       	sbci	r27, 0xFE	; 254
 282:	8c 91       	ld	r24, X
 284:	86 83       	std	Z+6, r24	; 0x06
 286:	d9 01       	movw	r26, r18
 288:	ab 59       	subi	r26, 0x9B	; 155
 28a:	be 4f       	sbci	r27, 0xFE	; 254
 28c:	ac 91       	ld	r26, X
 28e:	0a 2e       	mov	r0, r26
 290:	00 0c       	add	r0, r0
 292:	bb 0b       	sbc	r27, r27
 294:	af 5f       	subi	r26, 0xFF	; 255
 296:	be 4f       	sbci	r27, 0xFE	; 254
 298:	8c 91       	ld	r24, X
 29a:	87 83       	std	Z+7, r24	; 0x07
 29c:	08 95       	ret
 29e:	f9 01       	movw	r30, r18
 2a0:	e3 58       	subi	r30, 0x83	; 131
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	e0 81       	ld	r30, Z
 2a6:	0e 2e       	mov	r0, r30
 2a8:	00 0c       	add	r0, r0
 2aa:	ff 0b       	sbc	r31, r31
 2ac:	ef 5f       	subi	r30, 0xFF	; 255
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	80 81       	ld	r24, Z
 2b2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <displayBuffer>
 2b6:	f9 01       	movw	r30, r18
 2b8:	eb 59       	subi	r30, 0x9B	; 155
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	80 81       	ld	r24, Z
 2be:	92 cf       	rjmp	.-220    	; 0x1e4 <write_time+0x62>

000002c0 <write_char>:
 2c0:	9f eb       	ldi	r25, 0xBF	; 191
 2c2:	98 0f       	add	r25, r24
 2c4:	9a 31       	cpi	r25, 0x1A	; 26
 2c6:	18 f4       	brcc	.+6      	; 0x2ce <write_char+0xe>
 2c8:	e9 ec       	ldi	r30, 0xC9	; 201
 2ca:	e8 0f       	add	r30, r24
 2cc:	14 c0       	rjmp	.+40     	; 0x2f6 <write_char+0x36>
 2ce:	80 32       	cpi	r24, 0x20	; 32
 2d0:	79 f0       	breq	.+30     	; 0x2f0 <write_char+0x30>
 2d2:	9f e9       	ldi	r25, 0x9F	; 159
 2d4:	98 0f       	add	r25, r24
 2d6:	9a 31       	cpi	r25, 0x1A	; 26
 2d8:	18 f4       	brcc	.+6      	; 0x2e0 <write_char+0x20>
 2da:	e9 ea       	ldi	r30, 0xA9	; 169
 2dc:	e8 0f       	add	r30, r24
 2de:	0b c0       	rjmp	.+22     	; 0x2f6 <write_char+0x36>
 2e0:	e0 ed       	ldi	r30, 0xD0	; 208
 2e2:	e8 0f       	add	r30, r24
 2e4:	ea 30       	cpi	r30, 0x0A	; 10
 2e6:	38 f0       	brcs	.+14     	; 0x2f6 <write_char+0x36>
 2e8:	8f 33       	cpi	r24, 0x3F	; 63
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <write_char+0x34>
 2ec:	e5 e2       	ldi	r30, 0x25	; 37
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <write_char+0x36>
 2f0:	e5 e2       	ldi	r30, 0x25	; 37
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <write_char+0x36>
 2f4:	e4 e2       	ldi	r30, 0x24	; 36
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ef 5f       	subi	r30, 0xFF	; 255
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	80 81       	ld	r24, Z
 300:	fb 01       	movw	r30, r22
 302:	eb 58       	subi	r30, 0x8B	; 139
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <write_string>:
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	8c 01       	movw	r16, r24
 318:	c6 2f       	mov	r28, r22
 31a:	d4 2f       	mov	r29, r20
 31c:	64 17       	cp	r22, r20
 31e:	e8 f4       	brcc	.+58     	; 0x35a <write_string+0x50>
 320:	e6 2e       	mov	r14, r22
 322:	f1 2c       	mov	r15, r1
 324:	fc 01       	movw	r30, r24
 326:	80 81       	ld	r24, Z
 328:	88 23       	and	r24, r24
 32a:	79 f0       	breq	.+30     	; 0x34a <write_string+0x40>
 32c:	6c 2f       	mov	r22, r28
 32e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <write_char>
 332:	cf 5f       	subi	r28, 0xFF	; 255
 334:	cd 17       	cp	r28, r29
 336:	88 f4       	brcc	.+34     	; 0x35a <write_string+0x50>
 338:	ec 2f       	mov	r30, r28
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	ee 19       	sub	r30, r14
 33e:	ff 09       	sbc	r31, r15
 340:	e0 0f       	add	r30, r16
 342:	f1 1f       	adc	r31, r17
 344:	80 81       	ld	r24, Z
 346:	81 11       	cpse	r24, r1
 348:	f1 cf       	rjmp	.-30     	; 0x32c <write_string+0x22>
 34a:	ec 2f       	mov	r30, r28
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	eb 58       	subi	r30, 0x8B	; 139
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	10 82       	st	Z, r1
 354:	cf 5f       	subi	r28, 0xFF	; 255
 356:	cd 17       	cp	r28, r29
 358:	c0 f3       	brcs	.-16     	; 0x34a <write_string+0x40>
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	08 95       	ret

00000368 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	cf 93       	push	r28
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
	static uint8_t i;
	
	//uint8_t dispRows = ~(1<<i); // drive current row low
	//uint8_t dispCols = displayBuffer[i];
	
	PORTB &= ~(1<<CS);
 38c:	28 98       	cbi	0x05, 0	; 5
	tx_spi(i+1);
 38e:	c0 91 50 01 	lds	r28, 0x0150	; 0x800150 <__data_end>
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	8c 0f       	add	r24, r28
 396:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
	tx_spi(displayBuffer[i] & ~(blinkMask[i] & blinkOsc[i]));
 39a:	2c 2f       	mov	r18, r28
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	f9 01       	movw	r30, r18
 3a0:	eb 58       	subi	r30, 0x8B	; 139
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	40 81       	ld	r20, Z
 3a6:	f9 01       	movw	r30, r18
 3a8:	ee 5a       	subi	r30, 0xAE	; 174
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	80 81       	ld	r24, Z
 3ae:	f9 01       	movw	r30, r18
 3b0:	e6 5a       	subi	r30, 0xA6	; 166
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	90 81       	ld	r25, Z
 3b6:	89 23       	and	r24, r25
 3b8:	80 95       	com	r24
 3ba:	84 23       	and	r24, r20
 3bc:	0e 94 5c 00 	call	0xb8	; 0xb8 <tx_spi>
	PORTB |= 1<<CS;
 3c0:	28 9a       	sbi	0x05, 0	; 5
		
	i++;
	i &= 0x07;	
 3c2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	87 70       	andi	r24, 0x07	; 7
 3ca:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	cf 91       	pop	r28
 3d4:	bf 91       	pop	r27
 3d6:	af 91       	pop	r26
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	7f 91       	pop	r23
 3de:	6f 91       	pop	r22
 3e0:	5f 91       	pop	r21
 3e2:	4f 91       	pop	r20
 3e4:	3f 91       	pop	r19
 3e6:	2f 91       	pop	r18
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <scan_keys>:
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
}

void scan_keys(void)
{
	lastKeyState = keyState;
 3f2:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <keyState>
 3f6:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <lastKeyState>
		
	keyState = KEY_PIN;
 3fa:	96 b1       	in	r25, 0x06	; 6
 3fc:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <keyState>
	uint8_t keyDiff = keyState ^ lastKeyState;
 400:	89 27       	eor	r24, r25
	
	keyPressed = keyDiff & ~keyState;	
 402:	29 2f       	mov	r18, r25
 404:	20 95       	com	r18
 406:	28 23       	and	r18, r24
 408:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <keyPressed>
	keyReleased = keyDiff & keyState;
 40c:	89 23       	and	r24, r25
 40e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <keyReleased>
	
	if (~keyState & START_KEY)
 412:	92 fd       	sbrc	r25, 2
 414:	08 c0       	rjmp	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		if (holdTimer < holdTimerThreshold) holdTimer++;		
 416:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <holdTimer>
 41a:	8c 33       	cpi	r24, 0x3C	; 60
 41c:	30 f4       	brcc	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <holdTimer>
 424:	08 95       	ret
	}
	else
	{
		holdTimer = 0;
 426:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <holdTimer>
 42a:	08 95       	ret

0000042c <init_keys>:
uint8_t holdTimer;
const uint8_t holdTimerThreshold=60;

void init_keys(void)
{
	EICRA = 1<<ISC11 | 1<<ISC01; // falling edge
 42c:	8a e0       	ldi	r24, 0x0A	; 10
 42e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT1 | 1<<INT0;   // enable INT0, INT1
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	8d bb       	out	0x1d, r24	; 29
	PORTD |= 1<<PD2 | 1<<PD3;    // enable pullups
 436:	8b b1       	in	r24, 0x0b	; 11
 438:	8c 60       	ori	r24, 0x0C	; 12
 43a:	8b b9       	out	0x0b, r24	; 11
	
	KEY_PORT |= KEY_MASK; // enable pullups
 43c:	88 b1       	in	r24, 0x08	; 8
 43e:	8f 61       	ori	r24, 0x1F	; 31
 440:	88 b9       	out	0x08, r24	; 8
	
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
 442:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <scan_keys>
 446:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <scan_keys>
 44a:	08 95       	ret

0000044c <init_timer>:

volatile playerData playerAData, playerBData, *currentPlayerData;

void init_timer(void)
{
	ASSR = 1<<AS2; // enable asynchronous mode
 44c:	80 e2       	ldi	r24, 0x20	; 32
 44e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	
	TCCR2B |= 1<<CS20;         // /1 prescaler
 452:	e1 eb       	ldi	r30, 0xB1	; 177
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	80 83       	st	Z, r24
	while (ASSR & 1<<TCR2BUB); // wait for register update
 45c:	e6 eb       	ldi	r30, 0xB6	; 182
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	80 fd       	sbrc	r24, 0
 464:	fd cf       	rjmp	.-6      	; 0x460 <init_timer+0x14>

	TIFR2  = 1<<TOV2;   // clear interrupt flag	
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	87 bb       	out	0x17, r24	; 23
 46a:	08 95       	ret

0000046c <add_time>:
	//TIMSK2 = 1<<TOIE2;  // enable Timer2 overflow interrupt
}

/* increments baseTime by incTime (ignoring ticks) */
void add_time(volatile gameTime *baseTime, gameTime incTime)
{
 46c:	fc 01       	movw	r30, r24
 46e:	db 01       	movw	r26, r22
	(*baseTime)[SECONDS] += incTime[SECONDS];
 470:	95 81       	ldd	r25, Z+5	; 0x05
 472:	15 96       	adiw	r26, 0x05	; 5
 474:	8c 91       	ld	r24, X
 476:	15 97       	sbiw	r26, 0x05	; 5
 478:	89 0f       	add	r24, r25
 47a:	85 83       	std	Z+5, r24	; 0x05
	if ((*baseTime)[SECONDS] > 9) 
 47c:	85 81       	ldd	r24, Z+5	; 0x05
 47e:	8a 30       	cpi	r24, 0x0A	; 10
 480:	34 f0       	brlt	.+12     	; 0x48e <add_time+0x22>
	{
		(*baseTime)[SECONDS] -= 10;
 482:	85 81       	ldd	r24, Z+5	; 0x05
 484:	8a 50       	subi	r24, 0x0A	; 10
 486:	85 83       	std	Z+5, r24	; 0x05
		(*baseTime)[TEN_SECONDS]++;
 488:	84 81       	ldd	r24, Z+4	; 0x04
 48a:	8f 5f       	subi	r24, 0xFF	; 255
 48c:	84 83       	std	Z+4, r24	; 0x04
	}
	
	(*baseTime)[TEN_SECONDS] += incTime[TEN_SECONDS];
 48e:	94 81       	ldd	r25, Z+4	; 0x04
 490:	14 96       	adiw	r26, 0x04	; 4
 492:	8c 91       	ld	r24, X
 494:	14 97       	sbiw	r26, 0x04	; 4
 496:	89 0f       	add	r24, r25
 498:	84 83       	std	Z+4, r24	; 0x04
	if ((*baseTime)[TEN_SECONDS] > 5)
 49a:	84 81       	ldd	r24, Z+4	; 0x04
 49c:	86 30       	cpi	r24, 0x06	; 6
 49e:	34 f0       	brlt	.+12     	; 0x4ac <add_time+0x40>
	{
		(*baseTime)[TEN_SECONDS] -= 6;
 4a0:	84 81       	ldd	r24, Z+4	; 0x04
 4a2:	86 50       	subi	r24, 0x06	; 6
 4a4:	84 83       	std	Z+4, r24	; 0x04
		(*baseTime)[MINUTES]++;
 4a6:	83 81       	ldd	r24, Z+3	; 0x03
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	83 83       	std	Z+3, r24	; 0x03
	}
	
	(*baseTime)[MINUTES] += incTime[MINUTES];
 4ac:	93 81       	ldd	r25, Z+3	; 0x03
 4ae:	13 96       	adiw	r26, 0x03	; 3
 4b0:	8c 91       	ld	r24, X
 4b2:	13 97       	sbiw	r26, 0x03	; 3
 4b4:	89 0f       	add	r24, r25
 4b6:	83 83       	std	Z+3, r24	; 0x03
	if ((*baseTime)[MINUTES] > 9)
 4b8:	83 81       	ldd	r24, Z+3	; 0x03
 4ba:	8a 30       	cpi	r24, 0x0A	; 10
 4bc:	34 f0       	brlt	.+12     	; 0x4ca <add_time+0x5e>
	{
		(*baseTime)[MINUTES] -= 10;
 4be:	83 81       	ldd	r24, Z+3	; 0x03
 4c0:	8a 50       	subi	r24, 0x0A	; 10
 4c2:	83 83       	std	Z+3, r24	; 0x03
		(*baseTime)[TEN_MINUTES]++;
 4c4:	82 81       	ldd	r24, Z+2	; 0x02
 4c6:	8f 5f       	subi	r24, 0xFF	; 255
 4c8:	82 83       	std	Z+2, r24	; 0x02
	}
	
	(*baseTime)[TEN_MINUTES] += incTime[TEN_MINUTES];
 4ca:	92 81       	ldd	r25, Z+2	; 0x02
 4cc:	12 96       	adiw	r26, 0x02	; 2
 4ce:	8c 91       	ld	r24, X
 4d0:	12 97       	sbiw	r26, 0x02	; 2
 4d2:	89 0f       	add	r24, r25
 4d4:	82 83       	std	Z+2, r24	; 0x02
	if ((*baseTime)[TEN_MINUTES] > 5)
 4d6:	82 81       	ldd	r24, Z+2	; 0x02
 4d8:	86 30       	cpi	r24, 0x06	; 6
 4da:	34 f0       	brlt	.+12     	; 0x4e8 <add_time+0x7c>
	{
		(*baseTime)[TEN_MINUTES] -= 6;
 4dc:	82 81       	ldd	r24, Z+2	; 0x02
 4de:	86 50       	subi	r24, 0x06	; 6
 4e0:	82 83       	std	Z+2, r24	; 0x02
		(*baseTime)[HOURS]++;
 4e2:	81 81       	ldd	r24, Z+1	; 0x01
 4e4:	8f 5f       	subi	r24, 0xFF	; 255
 4e6:	81 83       	std	Z+1, r24	; 0x01
	}
	
	(*baseTime)[HOURS] += incTime[HOURS];
 4e8:	91 81       	ldd	r25, Z+1	; 0x01
 4ea:	11 96       	adiw	r26, 0x01	; 1
 4ec:	8c 91       	ld	r24, X
 4ee:	11 97       	sbiw	r26, 0x01	; 1
 4f0:	89 0f       	add	r24, r25
 4f2:	81 83       	std	Z+1, r24	; 0x01
	if ((*baseTime)[HOURS] > 9)
 4f4:	81 81       	ldd	r24, Z+1	; 0x01
 4f6:	8a 30       	cpi	r24, 0x0A	; 10
 4f8:	34 f0       	brlt	.+12     	; 0x506 <add_time+0x9a>
	{
		(*baseTime)[HOURS] -= 10;
 4fa:	81 81       	ldd	r24, Z+1	; 0x01
 4fc:	8a 50       	subi	r24, 0x0A	; 10
 4fe:	81 83       	std	Z+1, r24	; 0x01
		(*baseTime)[TEN_HOURS]++;
 500:	80 81       	ld	r24, Z
 502:	8f 5f       	subi	r24, 0xFF	; 255
 504:	80 83       	st	Z, r24
	}
	
	(*baseTime)[TEN_HOURS] += incTime[TEN_HOURS];
 506:	90 81       	ld	r25, Z
 508:	8c 91       	ld	r24, X
 50a:	89 0f       	add	r24, r25
 50c:	80 83       	st	Z, r24
	if ((*baseTime)[TEN_HOURS] > 9)
 50e:	80 81       	ld	r24, Z
 510:	8a 30       	cpi	r24, 0x0A	; 10
 512:	34 f0       	brlt	.+12     	; 0x520 <add_time+0xb4>
	{
		(*baseTime)[TEN_HOURS]   = 0;
 514:	10 82       	st	Z, r1
		(*baseTime)[HOURS]       = 0;
 516:	11 82       	std	Z+1, r1	; 0x01
		(*baseTime)[TEN_MINUTES] = 0;
 518:	12 82       	std	Z+2, r1	; 0x02
		(*baseTime)[MINUTES]     = 0;
 51a:	13 82       	std	Z+3, r1	; 0x03
		(*baseTime)[TEN_SECONDS] = 0;
 51c:	14 82       	std	Z+4, r1	; 0x04
		(*baseTime)[SECONDS]     = 0;
 51e:	15 82       	std	Z+5, r1	; 0x05
 520:	08 95       	ret

00000522 <reset>:

/* returns */
//int8_t cmp_time()

void reset(void)
{	
 522:	e5 e8       	ldi	r30, 0x85	; 133
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
	{
		playerATime[i] = gameConfig.initialTime[i];
 52a:	21 91       	ld	r18, Z+
 52c:	dc 01       	movw	r26, r24
 52e:	a3 58       	subi	r26, 0x83	; 131
 530:	be 4f       	sbci	r27, 0xFE	; 254
 532:	2c 93       	st	X, r18
		playerBTime[i] = gameConfig.initialTime[i];
 534:	dc 01       	movw	r26, r24
 536:	ab 59       	subi	r26, 0x9B	; 155
 538:	be 4f       	sbci	r27, 0xFE	; 254
 53a:	2c 93       	st	X, r18
 53c:	01 96       	adiw	r24, 0x01	; 1
//int8_t cmp_time()

void reset(void)
{	
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
 53e:	86 30       	cpi	r24, 0x06	; 6
 540:	91 05       	cpc	r25, r1
 542:	99 f7       	brne	.-26     	; 0x52a <reset+0x8>
		playerATime[i] = gameConfig.initialTime[i];
		playerBTime[i] = gameConfig.initialTime[i];
	}

	/* reset ticks */
	playerATicks = 0;
 544:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <playerATicks>
	playerBTicks = 0;
 548:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <playerBTicks>
	
	/* reset move counts */
	playerAData.moves = 0;
 54c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <playerAData+0x1>
 550:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <playerAData>
	playerBData.moves = 0;
 554:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <playerBData+0x1>
 558:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <playerBData>
 55c:	08 95       	ret

0000055e <main>:

int main(void)
{		
	/* default to player A as white/starting */
	
	currentPlayerTicks = &playerATicks;
 55e:	8b e6       	ldi	r24, 0x6B	; 107
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <currentPlayerTicks+0x1>
 566:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <currentPlayerTicks>
	currentPlayerTime = &playerATime;
 56a:	8d e7       	ldi	r24, 0x7D	; 125
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <currentPlayerTime+0x1>
 572:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <currentPlayerTime>
	currentPlayerData = &playerAData;
 576:	87 e9       	ldi	r24, 0x97	; 151
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <currentPlayerData+0x1>
 57e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <currentPlayerData>
	
	state = IDLE;
 582:	85 e0       	ldi	r24, 0x05	; 5
 584:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>
	
	DDRD |= 1<<PD6 | 1<<PD7;
 588:	8a b1       	in	r24, 0x0a	; 10
 58a:	80 6c       	ori	r24, 0xC0	; 192
 58c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PD7);
 58e:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 1<<PD6;
 590:	5e 9a       	sbi	0x0b, 6	; 11
	
	load_config();
 592:	0e 94 6c 05 	call	0xad8	; 0xad8 <load_config>
	
	reset();
 596:	0e 94 91 02 	call	0x522	; 0x522 <reset>
	
	init_display();
 59a:	0e 94 61 00 	call	0xc2	; 0xc2 <init_display>
	init_keys();
 59e:	0e 94 16 02 	call	0x42c	; 0x42c <init_keys>
	init_timer();
 5a2:	0e 94 26 02 	call	0x44c	; 0x44c <init_timer>
	init_sound();
 5a6:	0e 94 7f 05 	call	0xafe	; 0xafe <init_sound>
	
	sei();
 5aa:	78 94       	sei
	
    while (1) 
    {
		SPI_PORT ^= 1<<SS; 
 5ac:	c4 e0       	ldi	r28, 0x04	; 4
 5ae:	5c 2e       	mov	r5, r28
			/* One player's time has run out */
			case GAME_FINISHED:
			if (keyPressed & START_KEY)
			{
				reset();
				state = IDLE;
 5b0:	15 e0       	ldi	r17, 0x05	; 5
			break;
			
			/* Game paused */
			/* Clock countdown for both players is paused */
			case GAME_PAUSED:
			if (holdTimer >= holdTimerThreshold)
 5b2:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <holdTimerThreshold>
				reset();
				state = IDLE;	
			}
			else if (keyPressed & START_KEY)
			{
				TIMSK2 = 1<<TOIE2;
 5b6:	0f 2e       	mov	r0, r31
 5b8:	f0 e7       	ldi	r31, 0x70	; 112
 5ba:	ef 2e       	mov	r14, r31
 5bc:	f1 2c       	mov	r15, r1
 5be:	f0 2d       	mov	r31, r0
 5c0:	d1 e0       	ldi	r29, 0x01	; 1
				state = GAME_ACTIVE;
 5c2:	0f 2e       	mov	r0, r31
 5c4:	f6 e0       	ldi	r31, 0x06	; 6
 5c6:	9f 2e       	mov	r9, r31
 5c8:	f0 2d       	mov	r31, r0
			/* Clock is currently counting down */
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
			{
				TIMSK2 = 0x00;
				state = GAME_PAUSED;	
 5ca:	0f 2e       	mov	r0, r31
 5cc:	f7 e0       	ldi	r31, 0x07	; 7
 5ce:	8f 2e       	mov	r8, r31
 5d0:	f0 2d       	mov	r31, r0
				
				state = IDLE;
			}
			else if (keyPressed & MODE_KEY)
			{				
				state++;
 5d2:	0f 2e       	mov	r0, r31
 5d4:	f3 e0       	ldi	r31, 0x03	; 3
 5d6:	6f 2e       	mov	r6, r31
 5d8:	f0 2d       	mov	r31, r0
				
				state = IDLE;
			}
			else if (keyPressed & MODE_KEY)
			{		
				state++;
 5da:	68 94       	set
 5dc:	77 24       	eor	r7, r7
 5de:	71 f8       	bld	r7, 1
					if (gameConfig.gameMode < 0) gameConfig.gameMode = NUM_MODES;
				}
			}		
			
			write_string(settingsMenuNames[state], 0, 4);		
			write_string(gameTypeNames[gameConfig.gameMode], 4, 8);
 5e0:	0f 2e       	mov	r0, r31
 5e2:	f5 e8       	ldi	r31, 0x85	; 133
 5e4:	cf 2e       	mov	r12, r31
 5e6:	f1 e0       	ldi	r31, 0x01	; 1
 5e8:	df 2e       	mov	r13, r31
 5ea:	f0 2d       	mov	r31, r0
			else if (keyPressed & (UP_KEY | DOWN_KEY))
			{
				int8_t timeComponent;
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
 5ec:	0f 2e       	mov	r0, r31
 5ee:	f9 e0       	ldi	r31, 0x09	; 9
 5f0:	4f 2e       	mov	r4, r31
 5f2:	f0 2d       	mov	r31, r0
				state = EDIT_MODE;
			}
			else if (keyPressed & TIME_KEY)
			{
				timeEditCursor = 0;
				blinkMask[0] = 0xFF;
 5f4:	0f 2e       	mov	r0, r31
 5f6:	f2 e5       	ldi	r31, 0x52	; 82
 5f8:	af 2e       	mov	r10, r31
 5fa:	f1 e0       	ldi	r31, 0x01	; 1
 5fc:	bf 2e       	mov	r11, r31
 5fe:	f0 2d       	mov	r31, r0
	
	sei();
	
    while (1) 
    {
		SPI_PORT ^= 1<<SS; 
 600:	85 b1       	in	r24, 0x05	; 5
 602:	8c 27       	eor	r24, r28
 604:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 606:	8f e2       	ldi	r24, 0x2F	; 47
 608:	95 e7       	ldi	r25, 0x75	; 117
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <main+0xac>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <main+0xb2>
 610:	00 00       	nop
		_delay_ms(15);
		
		scan_keys();
 612:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <scan_keys>
		do_blink();
 616:	0e 94 aa 00 	call	0x154	; 0x154 <do_blink>
		
		switch (state)
 61a:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <state>
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	e9 30       	cpi	r30, 0x09	; 9
 622:	f1 05       	cpc	r31, r1
 624:	68 f7       	brcc	.-38     	; 0x600 <main+0xa2>
 626:	ec 5c       	subi	r30, 0xCC	; 204
 628:	ff 4f       	sbci	r31, 0xFF	; 255
 62a:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__tablejump2__>
		{
			/* Idle */
			/* Ready to start a game */
			case IDLE:
			if (keyPressed & START_KEY)
 62e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyPressed>
 632:	82 ff       	sbrs	r24, 2
 634:	05 c0       	rjmp	.+10     	; 0x640 <main+0xe2>
			{
				TIMSK2 = 1<<TOIE2;
 636:	f7 01       	movw	r30, r14
 638:	d0 83       	st	Z, r29
				
				state = GAME_ACTIVE;
 63a:	90 92 9f 01 	sts	0x019F, r9	; 0x80019f <state>
 63e:	0f c0       	rjmp	.+30     	; 0x65e <main+0x100>
			}
			else if (keyPressed & MODE_KEY)
 640:	80 ff       	sbrs	r24, 0
 642:	03 c0       	rjmp	.+6      	; 0x64a <main+0xec>
			{				
				state = EDIT_MODE;
 644:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <state>
 648:	0a c0       	rjmp	.+20     	; 0x65e <main+0x100>
			}
			else if (keyPressed & TIME_KEY)
 64a:	81 ff       	sbrs	r24, 1
 64c:	08 c0       	rjmp	.+16     	; 0x65e <main+0x100>
			{
				timeEditCursor = 0;
 64e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <timeEditCursor>
				blinkMask[0] = 0xFF;
 652:	8f ef       	ldi	r24, 0xFF	; 255
 654:	f5 01       	movw	r30, r10
 656:	80 83       	st	Z, r24
				blinkMask[4] = 0xFF;
 658:	84 83       	std	Z+4, r24	; 0x04
								
				state = EDIT_TIME;
 65a:	50 92 9f 01 	sts	0x019F, r5	; 0x80019f <state>
			}			
			write_time(0);
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 c1 00 	call	0x182	; 0x182 <write_time>
			break;
 664:	cd cf       	rjmp	.-102    	; 0x600 <main+0xa2>
			
			/* Time edit mode */
			/* Edit initial time for one or both players */
			case EDIT_TIME:
			if (keyPressed & START_KEY)
 666:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyPressed>
 66a:	82 ff       	sbrs	r24, 2
 66c:	10 c0       	rjmp	.+32     	; 0x68e <main+0x130>
			{
				/* stop blinking */
				blinkMask[timeEditCursor] = 0x00;
 66e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <timeEditCursor>
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	fc 01       	movw	r30, r24
 676:	ee 5a       	subi	r30, 0xAE	; 174
 678:	fe 4f       	sbci	r31, 0xFE	; 254
 67a:	10 82       	st	Z, r1
				blinkMask[timeEditCursor+4] = 0x00;
 67c:	fc 01       	movw	r30, r24
 67e:	ea 5a       	subi	r30, 0xAA	; 170
 680:	fe 4f       	sbci	r31, 0xFE	; 254
 682:	10 82       	st	Z, r1
				
				/* save settings */
				store_config();
 684:	0e 94 59 05 	call	0xab2	; 0xab2 <store_config>
				
				state = IDLE;	
 688:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <state>
 68c:	53 c0       	rjmp	.+166    	; 0x734 <main+0x1d6>
			}
			else if (keyPressed & TIME_KEY)
 68e:	81 ff       	sbrs	r24, 1
 690:	1b c0       	rjmp	.+54     	; 0x6c8 <main+0x16a>
			{
				blinkMask[timeEditCursor] = 0x00;
 692:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <timeEditCursor>
 696:	28 2f       	mov	r18, r24
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	f9 01       	movw	r30, r18
 69c:	ee 5a       	subi	r30, 0xAE	; 174
 69e:	fe 4f       	sbci	r31, 0xFE	; 254
 6a0:	10 82       	st	Z, r1
				blinkMask[timeEditCursor+4] = 0x00;
 6a2:	f9 01       	movw	r30, r18
 6a4:	ea 5a       	subi	r30, 0xAA	; 170
 6a6:	fe 4f       	sbci	r31, 0xFE	; 254
 6a8:	10 82       	st	Z, r1
				
				timeEditCursor++;
				timeEditCursor &= 0x03;
 6aa:	8f 5f       	subi	r24, 0xFF	; 255
 6ac:	83 70       	andi	r24, 0x03	; 3
 6ae:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <timeEditCursor>
				
				blinkMask[timeEditCursor] = 0xFF;
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	fc 01       	movw	r30, r24
 6b6:	ee 5a       	subi	r30, 0xAE	; 174
 6b8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ba:	2f ef       	ldi	r18, 0xFF	; 255
 6bc:	20 83       	st	Z, r18
				blinkMask[timeEditCursor+4] = 0xFF;
 6be:	fc 01       	movw	r30, r24
 6c0:	ea 5a       	subi	r30, 0xAA	; 170
 6c2:	fe 4f       	sbci	r31, 0xFE	; 254
 6c4:	20 83       	st	Z, r18
 6c6:	36 c0       	rjmp	.+108    	; 0x734 <main+0x1d6>
			}
			else if (keyPressed & (UP_KEY | DOWN_KEY))
 6c8:	98 2f       	mov	r25, r24
 6ca:	98 71       	andi	r25, 0x18	; 24
 6cc:	99 f1       	breq	.+102    	; 0x734 <main+0x1d6>
			{
				int8_t timeComponent;
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
 6ce:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <timeEditCursor>
 6d2:	90 ff       	sbrs	r25, 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <main+0x17c>
 6d6:	44 2d       	mov	r20, r4
 6d8:	01 c0       	rjmp	.+2      	; 0x6dc <main+0x17e>
			}
			else if (keyPressed & (UP_KEY | DOWN_KEY))
			{
				int8_t timeComponent;
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
 6da:	41 2f       	mov	r20, r17
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
				
				if (keyPressed & UP_KEY)
 6dc:	84 ff       	sbrs	r24, 4
 6de:	11 c0       	rjmp	.+34     	; 0x702 <main+0x1a4>
				{
					timeComponent = ++playerATime[timeEditCursor+2];
 6e0:	e9 2f       	mov	r30, r25
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	e1 58       	subi	r30, 0x81	; 129
 6e6:	fe 4f       	sbci	r31, 0xFE	; 254
 6e8:	20 81       	ld	r18, Z
 6ea:	2f 5f       	subi	r18, 0xFF	; 255
 6ec:	20 83       	st	Z, r18
					if (timeComponent > limit) timeComponent = 0;
 6ee:	62 2f       	mov	r22, r18
 6f0:	02 2e       	mov	r0, r18
 6f2:	00 0c       	add	r0, r0
 6f4:	77 0b       	sbc	r23, r23
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	46 17       	cp	r20, r22
 6fa:	57 07       	cpc	r21, r23
 6fc:	64 f4       	brge	.+24     	; 0x716 <main+0x1b8>
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	0a c0       	rjmp	.+20     	; 0x716 <main+0x1b8>
				}
				else
				{
					timeComponent = --playerATime[timeEditCursor+2];
 702:	e9 2f       	mov	r30, r25
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	e1 58       	subi	r30, 0x81	; 129
 708:	fe 4f       	sbci	r31, 0xFE	; 254
 70a:	20 81       	ld	r18, Z
 70c:	21 50       	subi	r18, 0x01	; 1
 70e:	20 83       	st	Z, r18
					if (timeComponent < 0) timeComponent = limit;
 710:	22 23       	and	r18, r18
 712:	0c f4       	brge	.+2      	; 0x716 <main+0x1b8>
 714:	24 2f       	mov	r18, r20
				}
				
				gameConfig.initialTime[timeEditCursor+2] = timeComponent;
 716:	89 2f       	mov	r24, r25
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 96       	adiw	r24, 0x02	; 2
 71c:	fc 01       	movw	r30, r24
 71e:	eb 57       	subi	r30, 0x7B	; 123
 720:	fe 4f       	sbci	r31, 0xFE	; 254
 722:	20 83       	st	Z, r18
				
				playerATime[timeEditCursor+2] = timeComponent;
 724:	fc 01       	movw	r30, r24
 726:	e3 58       	subi	r30, 0x83	; 131
 728:	fe 4f       	sbci	r31, 0xFE	; 254
 72a:	20 83       	st	Z, r18
				playerBTime[timeEditCursor+2] = timeComponent;
 72c:	fc 01       	movw	r30, r24
 72e:	eb 59       	subi	r30, 0x9B	; 155
 730:	fe 4f       	sbci	r31, 0xFE	; 254
 732:	20 83       	st	Z, r18
			}
			
			write_time(1);
 734:	8d 2f       	mov	r24, r29
 736:	0e 94 c1 00 	call	0x182	; 0x182 <write_time>
			break;
 73a:	62 cf       	rjmp	.-316    	; 0x600 <main+0xa2>
			
			/* Edit game mode */
			/* Select between different clock modes */
			case EDIT_MODE:			
			if (keyPressed & START_KEY)
 73c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyPressed>
 740:	82 ff       	sbrs	r24, 2
 742:	05 c0       	rjmp	.+10     	; 0x74e <main+0x1f0>
			{
				/* save settings */
				store_config();
 744:	0e 94 59 05 	call	0xab2	; 0xab2 <store_config>
				
				state = IDLE;
 748:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <state>
 74c:	18 c0       	rjmp	.+48     	; 0x77e <main+0x220>
			}
			else if (keyPressed & MODE_KEY)
 74e:	80 ff       	sbrs	r24, 0
 750:	03 c0       	rjmp	.+6      	; 0x758 <main+0x1fa>
			{			
				state++;
 752:	d0 93 9f 01 	sts	0x019F, r29	; 0x80019f <state>
 756:	13 c0       	rjmp	.+38     	; 0x77e <main+0x220>
			}					
			else if (keyPressed & (UP_KEY | DOWN_KEY))
 758:	98 2f       	mov	r25, r24
 75a:	98 71       	andi	r25, 0x18	; 24
 75c:	81 f0       	breq	.+32     	; 0x77e <main+0x220>
			{	
				if (keyPressed & UP_KEY)
 75e:	84 ff       	sbrs	r24, 4
 760:	0a c0       	rjmp	.+20     	; 0x776 <main+0x218>
				{
					gameConfig.gameMode++;
 762:	f6 01       	movw	r30, r12
 764:	86 81       	ldd	r24, Z+6	; 0x06
 766:	8f 5f       	subi	r24, 0xFF	; 255
					if (gameConfig.gameMode > NUM_MODES) gameConfig.gameMode = 0;
 768:	85 30       	cpi	r24, 0x05	; 5
 76a:	10 f4       	brcc	.+4      	; 0x770 <main+0x212>
			}					
			else if (keyPressed & (UP_KEY | DOWN_KEY))
			{	
				if (keyPressed & UP_KEY)
				{
					gameConfig.gameMode++;
 76c:	86 83       	std	Z+6, r24	; 0x06
 76e:	07 c0       	rjmp	.+14     	; 0x77e <main+0x220>
					if (gameConfig.gameMode > NUM_MODES) gameConfig.gameMode = 0;
 770:	f6 01       	movw	r30, r12
 772:	16 82       	std	Z+6, r1	; 0x06
 774:	04 c0       	rjmp	.+8      	; 0x77e <main+0x220>
				}
				else
				{
					gameConfig.gameMode--;
 776:	f6 01       	movw	r30, r12
 778:	86 81       	ldd	r24, Z+6	; 0x06
 77a:	81 50       	subi	r24, 0x01	; 1
 77c:	86 83       	std	Z+6, r24	; 0x06
					if (gameConfig.gameMode < 0) gameConfig.gameMode = NUM_MODES;
				}
			}		
			
			write_string(settingsMenuNames[state], 0, 4);		
 77e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <state>
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	9c 01       	movw	r18, r24
 786:	22 0f       	add	r18, r18
 788:	33 1f       	adc	r19, r19
 78a:	22 0f       	add	r18, r18
 78c:	33 1f       	adc	r19, r19
 78e:	82 0f       	add	r24, r18
 790:	93 1f       	adc	r25, r19
 792:	4c 2f       	mov	r20, r28
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	84 5c       	subi	r24, 0xC4	; 196
 798:	9e 4f       	sbci	r25, 0xFE	; 254
 79a:	0e 94 85 01 	call	0x30a	; 0x30a <write_string>
			write_string(gameTypeNames[gameConfig.gameMode], 4, 8);
 79e:	f6 01       	movw	r30, r12
 7a0:	86 81       	ldd	r24, Z+6	; 0x06
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	9c 01       	movw	r18, r24
 7a6:	22 0f       	add	r18, r18
 7a8:	33 1f       	adc	r19, r19
 7aa:	22 0f       	add	r18, r18
 7ac:	33 1f       	adc	r19, r19
 7ae:	82 0f       	add	r24, r18
 7b0:	93 1f       	adc	r25, r19
 7b2:	48 e0       	ldi	r20, 0x08	; 8
 7b4:	6c 2f       	mov	r22, r28
 7b6:	88 5d       	subi	r24, 0xD8	; 216
 7b8:	9e 4f       	sbci	r25, 0xFE	; 254
 7ba:	0e 94 85 01 	call	0x30a	; 0x30a <write_string>
			break;
 7be:	20 cf       	rjmp	.-448    	; 0x600 <main+0xa2>
			
			/* Edit time increment/delay */
			/* Change increment or delay (simple/Bronstein modes) time */
			case EDIT_DELAY:
			if (keyPressed & START_KEY)
 7c0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyPressed>
 7c4:	82 ff       	sbrs	r24, 2
 7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <main+0x274>
			{
				/* save settings */
				store_config();
 7c8:	0e 94 59 05 	call	0xab2	; 0xab2 <store_config>
				
				state = IDLE;
 7cc:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <state>
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <main+0x27a>
			}
			else if (keyPressed & MODE_KEY)
 7d2:	80 fd       	sbrc	r24, 0
			{		
				state++;
 7d4:	70 92 9f 01 	sts	0x019F, r7	; 0x80019f <state>
			}
			
			write_string(settingsMenuNames[state], 0, 4);
 7d8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <state>
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	9c 01       	movw	r18, r24
 7e0:	22 0f       	add	r18, r18
 7e2:	33 1f       	adc	r19, r19
 7e4:	22 0f       	add	r18, r18
 7e6:	33 1f       	adc	r19, r19
 7e8:	82 0f       	add	r24, r18
 7ea:	93 1f       	adc	r25, r19
 7ec:	4c 2f       	mov	r20, r28
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	84 5c       	subi	r24, 0xC4	; 196
 7f2:	9e 4f       	sbci	r25, 0xFE	; 254
 7f4:	0e 94 85 01 	call	0x30a	; 0x30a <write_string>
			break;
 7f8:	03 cf       	rjmp	.-506    	; 0x600 <main+0xa2>
			
			/* Edit display brightness */
			/* Change PWM value */
			case EDIT_BRIGHTNESS:
			if (keyPressed & START_KEY)
 7fa:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyPressed>
 7fe:	82 ff       	sbrs	r24, 2
 800:	05 c0       	rjmp	.+10     	; 0x80c <main+0x2ae>
			{
				/* save settings */
				store_config();
 802:	0e 94 59 05 	call	0xab2	; 0xab2 <store_config>
				
				state = IDLE;
 806:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <state>
 80a:	03 c0       	rjmp	.+6      	; 0x812 <main+0x2b4>
			}
			else if (keyPressed & MODE_KEY)
 80c:	80 fd       	sbrc	r24, 0
			{				
				state++;
 80e:	60 92 9f 01 	sts	0x019F, r6	; 0x80019f <state>
			}
			
			write_string(settingsMenuNames[state], 0, 4);
 812:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <state>
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	9c 01       	movw	r18, r24
 81a:	22 0f       	add	r18, r18
 81c:	33 1f       	adc	r19, r19
 81e:	22 0f       	add	r18, r18
 820:	33 1f       	adc	r19, r19
 822:	82 0f       	add	r24, r18
 824:	93 1f       	adc	r25, r19
 826:	4c 2f       	mov	r20, r28
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	84 5c       	subi	r24, 0xC4	; 196
 82c:	9e 4f       	sbci	r25, 0xFE	; 254
 82e:	0e 94 85 01 	call	0x30a	; 0x30a <write_string>
			break;
 832:	e6 ce       	rjmp	.-564    	; 0x600 <main+0xa2>
			
			/* Edit sound */
			/* Turn sound on or off */
			case EDIT_SOUND:
			if (keyPressed & START_KEY)
 834:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyPressed>
 838:	82 ff       	sbrs	r24, 2
 83a:	05 c0       	rjmp	.+10     	; 0x846 <main+0x2e8>
			{
				/* save settings */
				store_config();
 83c:	0e 94 59 05 	call	0xab2	; 0xab2 <store_config>
				
				state = IDLE;
 840:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <state>
 844:	03 c0       	rjmp	.+6      	; 0x84c <main+0x2ee>
			}
			else if (keyPressed & MODE_KEY)
 846:	80 fd       	sbrc	r24, 0
			{				
				state = EDIT_MODE; // wrap around after last setting in list
 848:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <state>
			}
			
			write_string(settingsMenuNames[state], 0, 4);
 84c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <state>
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	9c 01       	movw	r18, r24
 854:	22 0f       	add	r18, r18
 856:	33 1f       	adc	r19, r19
 858:	22 0f       	add	r18, r18
 85a:	33 1f       	adc	r19, r19
 85c:	82 0f       	add	r24, r18
 85e:	93 1f       	adc	r25, r19
 860:	4c 2f       	mov	r20, r28
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	84 5c       	subi	r24, 0xC4	; 196
 866:	9e 4f       	sbci	r25, 0xFE	; 254
 868:	0e 94 85 01 	call	0x30a	; 0x30a <write_string>
			break;
 86c:	c9 ce       	rjmp	.-622    	; 0x600 <main+0xa2>
			
			/* Game active */
			/* Clock is currently counting down */
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
 86e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyPressed>
 872:	82 ff       	sbrs	r24, 2
 874:	04 c0       	rjmp	.+8      	; 0x87e <main+0x320>
			{
				TIMSK2 = 0x00;
 876:	f7 01       	movw	r30, r14
 878:	10 82       	st	Z, r1
				state = GAME_PAUSED;	
 87a:	80 92 9f 01 	sts	0x019F, r8	; 0x80019f <state>
			}
			
			write_time(0);
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	0e 94 c1 00 	call	0x182	; 0x182 <write_time>
			break;
 884:	bd ce       	rjmp	.-646    	; 0x600 <main+0xa2>
			
			/* Game paused */
			/* Clock countdown for both players is paused */
			case GAME_PAUSED:
			if (holdTimer >= holdTimerThreshold)
 886:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <holdTimer>
 88a:	80 17       	cp	r24, r16
 88c:	28 f0       	brcs	.+10     	; 0x898 <main+0x33a>
			{				
				reset();
 88e:	0e 94 91 02 	call	0x522	; 0x522 <reset>
				state = IDLE;	
 892:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <state>
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <main+0x34a>
			}
			else if (keyPressed & START_KEY)
 898:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyPressed>
 89c:	82 ff       	sbrs	r24, 2
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <main+0x34a>
			{
				TIMSK2 = 1<<TOIE2;
 8a0:	f7 01       	movw	r30, r14
 8a2:	d0 83       	st	Z, r29
				state = GAME_ACTIVE;
 8a4:	90 92 9f 01 	sts	0x019F, r9	; 0x80019f <state>
			}
			
			write_time(0);
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	0e 94 c1 00 	call	0x182	; 0x182 <write_time>
			break;
 8ae:	a8 ce       	rjmp	.-688    	; 0x600 <main+0xa2>
			
			/* Game finished */
			/* One player's time has run out */
			case GAME_FINISHED:
			if (keyPressed & START_KEY)
 8b0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <keyPressed>
 8b4:	82 ff       	sbrs	r24, 2
 8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <main+0x362>
			{
				reset();
 8b8:	0e 94 91 02 	call	0x522	; 0x522 <reset>
				state = IDLE;
 8bc:	10 93 9f 01 	sts	0x019F, r17	; 0x80019f <state>
			}
			
			write_time(0);
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	0e 94 c1 00 	call	0x182	; 0x182 <write_time>
			break;
 8c6:	9c ce       	rjmp	.-712    	; 0x600 <main+0xa2>

000008c8 <__vector_1>:
    }
}

/* Player A's button */
ISR(INT0_vect) 
{	
 8c8:	1f 92       	push	r1
 8ca:	0f 92       	push	r0
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	0f 92       	push	r0
 8d0:	11 24       	eor	r1, r1
 8d2:	2f 93       	push	r18
 8d4:	3f 93       	push	r19
 8d6:	4f 93       	push	r20
 8d8:	5f 93       	push	r21
 8da:	6f 93       	push	r22
 8dc:	7f 93       	push	r23
 8de:	8f 93       	push	r24
 8e0:	9f 93       	push	r25
 8e2:	af 93       	push	r26
 8e4:	bf 93       	push	r27
 8e6:	ef 93       	push	r30
 8e8:	ff 93       	push	r31
	switch (state)
 8ea:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <state>
 8ee:	86 30       	cpi	r24, 0x06	; 6
 8f0:	89 f4       	brne	.+34     	; 0x914 <__stack+0x15>
	{
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerATime)
 8f2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <currentPlayerTime>
 8f6:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <currentPlayerTime+0x1>
 8fa:	8d 57       	subi	r24, 0x7D	; 125
 8fc:	91 40       	sbci	r25, 0x01	; 1
 8fe:	51 f4       	brne	.+20     	; 0x914 <__stack+0x15>
		{
			switch (gameConfig.gameMode)
 900:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <gameConfig+0x6>
 904:	81 30       	cpi	r24, 0x01	; 1
 906:	31 f4       	brne	.+12     	; 0x914 <__stack+0x15>
				case SIMPLE:
				
				break;
				
				case INCREMENT:
				add_time(currentPlayerTime, gameConfig.delay);
 908:	6c e8       	ldi	r22, 0x8C	; 140
 90a:	71 e0       	ldi	r23, 0x01	; 1
 90c:	8d e7       	ldi	r24, 0x7D	; 125
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	0e 94 36 02 	call	0x46c	; 0x46c <add_time>
		
		default:			
		break;
	}
	
	currentPlayerTime  = &playerBTime; // start decrementing other player's time instead
 914:	85 e6       	ldi	r24, 0x65	; 101
 916:	91 e0       	ldi	r25, 0x01	; 1
 918:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <currentPlayerTime+0x1>
 91c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <currentPlayerTime>
	currentPlayerTicks = &playerBTicks;
 920:	84 e6       	ldi	r24, 0x64	; 100
 922:	91 e0       	ldi	r25, 0x01	; 1
 924:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <currentPlayerTicks+0x1>
 928:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <currentPlayerTicks>
		
	PORTD |= 1<<PD7;
 92c:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD &= ~(1<<PD6);	
 92e:	5e 98       	cbi	0x0b, 6	; 11
}
 930:	ff 91       	pop	r31
 932:	ef 91       	pop	r30
 934:	bf 91       	pop	r27
 936:	af 91       	pop	r26
 938:	9f 91       	pop	r25
 93a:	8f 91       	pop	r24
 93c:	7f 91       	pop	r23
 93e:	6f 91       	pop	r22
 940:	5f 91       	pop	r21
 942:	4f 91       	pop	r20
 944:	3f 91       	pop	r19
 946:	2f 91       	pop	r18
 948:	0f 90       	pop	r0
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	0f 90       	pop	r0
 94e:	1f 90       	pop	r1
 950:	18 95       	reti

00000952 <__vector_2>:

/* Player B's button */
ISR(INT1_vect)
{
 952:	1f 92       	push	r1
 954:	0f 92       	push	r0
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	0f 92       	push	r0
 95a:	11 24       	eor	r1, r1
 95c:	2f 93       	push	r18
 95e:	3f 93       	push	r19
 960:	4f 93       	push	r20
 962:	5f 93       	push	r21
 964:	6f 93       	push	r22
 966:	7f 93       	push	r23
 968:	8f 93       	push	r24
 96a:	9f 93       	push	r25
 96c:	af 93       	push	r26
 96e:	bf 93       	push	r27
 970:	ef 93       	push	r30
 972:	ff 93       	push	r31
	switch (state)
 974:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <state>
 978:	86 30       	cpi	r24, 0x06	; 6
 97a:	89 f4       	brne	.+34     	; 0x99e <__vector_2+0x4c>
	{		
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerBTime)
 97c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <currentPlayerTime>
 980:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <currentPlayerTime+0x1>
 984:	85 56       	subi	r24, 0x65	; 101
 986:	91 40       	sbci	r25, 0x01	; 1
 988:	51 f4       	brne	.+20     	; 0x99e <__vector_2+0x4c>
		{			
			switch (gameConfig.gameMode)
 98a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <gameConfig+0x6>
 98e:	81 30       	cpi	r24, 0x01	; 1
 990:	31 f4       	brne	.+12     	; 0x99e <__vector_2+0x4c>
				case SIMPLE:
				
				break;
			
				case INCREMENT:
				add_time(currentPlayerTime, gameConfig.delay);
 992:	6c e8       	ldi	r22, 0x8C	; 140
 994:	71 e0       	ldi	r23, 0x01	; 1
 996:	85 e6       	ldi	r24, 0x65	; 101
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	0e 94 36 02 	call	0x46c	; 0x46c <add_time>
		
		default:
		break;
	}
	
	currentPlayerTime  = &playerATime; // start decrementing other player's time instead	
 99e:	8d e7       	ldi	r24, 0x7D	; 125
 9a0:	91 e0       	ldi	r25, 0x01	; 1
 9a2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <currentPlayerTime+0x1>
 9a6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <currentPlayerTime>
	currentPlayerTicks = &playerATicks;
 9aa:	8b e6       	ldi	r24, 0x6B	; 107
 9ac:	91 e0       	ldi	r25, 0x01	; 1
 9ae:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <currentPlayerTicks+0x1>
 9b2:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <currentPlayerTicks>
		
	PORTD |= 1<<PD6;
 9b6:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD &= ~(1<<PD7);
 9b8:	5f 98       	cbi	0x0b, 7	; 11
}
 9ba:	ff 91       	pop	r31
 9bc:	ef 91       	pop	r30
 9be:	bf 91       	pop	r27
 9c0:	af 91       	pop	r26
 9c2:	9f 91       	pop	r25
 9c4:	8f 91       	pop	r24
 9c6:	7f 91       	pop	r23
 9c8:	6f 91       	pop	r22
 9ca:	5f 91       	pop	r21
 9cc:	4f 91       	pop	r20
 9ce:	3f 91       	pop	r19
 9d0:	2f 91       	pop	r18
 9d2:	0f 90       	pop	r0
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	0f 90       	pop	r0
 9d8:	1f 90       	pop	r1
 9da:	18 95       	reti

000009dc <__vector_9>:

/* TODO: implement simple/Bronstein delay by decrementing delay time in addition to/as well as current player time */
ISR(TIMER2_OVF_vect)
{	
 9dc:	1f 92       	push	r1
 9de:	0f 92       	push	r0
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	0f 92       	push	r0
 9e4:	11 24       	eor	r1, r1
 9e6:	8f 93       	push	r24
 9e8:	ef 93       	push	r30
 9ea:	ff 93       	push	r31
	if (++(*currentPlayerTicks) > 127)
 9ec:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <currentPlayerTicks>
 9f0:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <currentPlayerTicks+0x1>
 9f4:	80 81       	ld	r24, Z
 9f6:	8f 5f       	subi	r24, 0xFF	; 255
 9f8:	80 83       	st	Z, r24
 9fa:	88 23       	and	r24, r24
 9fc:	0c f0       	brlt	.+2      	; 0xa00 <__vector_9+0x24>
 9fe:	51 c0       	rjmp	.+162    	; 0xaa2 <__vector_9+0xc6>
	{
		*currentPlayerTicks = 0;
 a00:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <currentPlayerTicks>
 a04:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <currentPlayerTicks+0x1>
 a08:	10 82       	st	Z, r1
		
		if (--(*currentPlayerTime)[SECONDS] < 0)
 a0a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <currentPlayerTime>
 a0e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <currentPlayerTime+0x1>
 a12:	85 81       	ldd	r24, Z+5	; 0x05
 a14:	81 50       	subi	r24, 0x01	; 1
 a16:	85 83       	std	Z+5, r24	; 0x05
 a18:	88 23       	and	r24, r24
 a1a:	0c f0       	brlt	.+2      	; 0xa1e <__vector_9+0x42>
 a1c:	42 c0       	rjmp	.+132    	; 0xaa2 <__vector_9+0xc6>
		{
			(*currentPlayerTime)[SECONDS] = 9;
 a1e:	89 e0       	ldi	r24, 0x09	; 9
 a20:	85 83       	std	Z+5, r24	; 0x05
		
			if (--(*currentPlayerTime)[TEN_SECONDS] < 0)
 a22:	84 81       	ldd	r24, Z+4	; 0x04
 a24:	81 50       	subi	r24, 0x01	; 1
 a26:	84 83       	std	Z+4, r24	; 0x04
 a28:	88 23       	and	r24, r24
 a2a:	dc f5       	brge	.+118    	; 0xaa2 <__vector_9+0xc6>
			{
				(*currentPlayerTime)[TEN_SECONDS] = 5;
 a2c:	85 e0       	ldi	r24, 0x05	; 5
 a2e:	84 83       	std	Z+4, r24	; 0x04
			
				if (--(*currentPlayerTime)[MINUTES] < 0)
 a30:	83 81       	ldd	r24, Z+3	; 0x03
 a32:	81 50       	subi	r24, 0x01	; 1
 a34:	83 83       	std	Z+3, r24	; 0x03
 a36:	88 23       	and	r24, r24
 a38:	a4 f5       	brge	.+104    	; 0xaa2 <__vector_9+0xc6>
				{
					(*currentPlayerTime)[MINUTES] = 9;
 a3a:	89 e0       	ldi	r24, 0x09	; 9
 a3c:	83 83       	std	Z+3, r24	; 0x03
				
					if (--(*currentPlayerTime)[TEN_MINUTES] < 0)
 a3e:	82 81       	ldd	r24, Z+2	; 0x02
 a40:	81 50       	subi	r24, 0x01	; 1
 a42:	82 83       	std	Z+2, r24	; 0x02
 a44:	88 23       	and	r24, r24
 a46:	6c f5       	brge	.+90     	; 0xaa2 <__vector_9+0xc6>
					{					
						(*currentPlayerTime)[TEN_MINUTES] = 5;
 a48:	85 e0       	ldi	r24, 0x05	; 5
 a4a:	82 83       	std	Z+2, r24	; 0x02
					
						if (--(*currentPlayerTime)[HOURS] < 0)
 a4c:	81 81       	ldd	r24, Z+1	; 0x01
 a4e:	81 50       	subi	r24, 0x01	; 1
 a50:	81 83       	std	Z+1, r24	; 0x01
 a52:	88 23       	and	r24, r24
 a54:	34 f5       	brge	.+76     	; 0xaa2 <__vector_9+0xc6>
						{
							(*currentPlayerTime)[HOURS] = 9;
 a56:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <currentPlayerTime>
 a5a:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <currentPlayerTime+0x1>
 a5e:	89 e0       	ldi	r24, 0x09	; 9
 a60:	81 83       	std	Z+1, r24	; 0x01
						
							if(--(*currentPlayerTime)[TEN_HOURS] < 0)
 a62:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <currentPlayerTime>
 a66:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <currentPlayerTime+0x1>
 a6a:	80 81       	ld	r24, Z
 a6c:	81 50       	subi	r24, 0x01	; 1
 a6e:	80 83       	st	Z, r24
 a70:	88 23       	and	r24, r24
 a72:	bc f4       	brge	.+46     	; 0xaa2 <__vector_9+0xc6>
							{
								(*currentPlayerTime)[TEN_HOURS]   = 0;
 a74:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <currentPlayerTime>
 a78:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <currentPlayerTime+0x1>
 a7c:	10 82       	st	Z, r1
								(*currentPlayerTime)[HOURS]       = 0;
 a7e:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <currentPlayerTime>
 a82:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <currentPlayerTime+0x1>
 a86:	11 82       	std	Z+1, r1	; 0x01
								(*currentPlayerTime)[TEN_MINUTES] = 0;
 a88:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <currentPlayerTime>
 a8c:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <currentPlayerTime+0x1>
 a90:	12 82       	std	Z+2, r1	; 0x02
								(*currentPlayerTime)[MINUTES]     = 0;
 a92:	13 82       	std	Z+3, r1	; 0x03
								(*currentPlayerTime)[TEN_SECONDS] = 0;
 a94:	14 82       	std	Z+4, r1	; 0x04
								(*currentPlayerTime)[SECONDS]     = 0;	
 a96:	15 82       	std	Z+5, r1	; 0x05
								
								TIMSK2 = 0x00; // disable further ticks
 a98:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
								state = GAME_FINISHED;
 a9c:	88 e0       	ldi	r24, 0x08	; 8
 a9e:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>
				}
			}
		}
	}		
	
}
 aa2:	ff 91       	pop	r31
 aa4:	ef 91       	pop	r30
 aa6:	8f 91       	pop	r24
 aa8:	0f 90       	pop	r0
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	0f 90       	pop	r0
 aae:	1f 90       	pop	r1
 ab0:	18 95       	reti

00000ab2 <store_config>:
};


void store_config()
{
	cli();	
 ab2:	f8 94       	cli
	eeprom_update_block((const void *)&gameConfig, (void *)0, sizeof(gameConfiguration));
 ab4:	4d e0       	ldi	r20, 0x0D	; 13
 ab6:	50 e0       	ldi	r21, 0x00	; 0
 ab8:	60 e0       	ldi	r22, 0x00	; 0
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	85 e8       	ldi	r24, 0x85	; 133
 abe:	91 e0       	ldi	r25, 0x01	; 1
 ac0:	0e 94 97 05 	call	0xb2e	; 0xb2e <eeprom_update_block>
	eeprom_update_block((const void *)&deviceConfig, (void *)256, sizeof(deviceConfiguration));	
 ac4:	42 e0       	ldi	r20, 0x02	; 2
 ac6:	50 e0       	ldi	r21, 0x00	; 0
 ac8:	60 e0       	ldi	r22, 0x00	; 0
 aca:	71 e0       	ldi	r23, 0x01	; 1
 acc:	8c e6       	ldi	r24, 0x6C	; 108
 ace:	91 e0       	ldi	r25, 0x01	; 1
 ad0:	0e 94 97 05 	call	0xb2e	; 0xb2e <eeprom_update_block>
	sei();	
 ad4:	78 94       	sei
 ad6:	08 95       	ret

00000ad8 <load_config>:
}

void load_config()
{
	cli();	
 ad8:	f8 94       	cli
	eeprom_read_block((void *)&gameConfig, (const void *)0, sizeof(gameConfiguration));	
 ada:	4d e0       	ldi	r20, 0x0D	; 13
 adc:	50 e0       	ldi	r21, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	85 e8       	ldi	r24, 0x85	; 133
 ae4:	91 e0       	ldi	r25, 0x01	; 1
 ae6:	0e 94 87 05 	call	0xb0e	; 0xb0e <eeprom_read_block>
	eeprom_read_block((void *)&deviceConfig, (const void *)256, sizeof(deviceConfiguration));
 aea:	42 e0       	ldi	r20, 0x02	; 2
 aec:	50 e0       	ldi	r21, 0x00	; 0
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	71 e0       	ldi	r23, 0x01	; 1
 af2:	8c e6       	ldi	r24, 0x6C	; 108
 af4:	91 e0       	ldi	r25, 0x01	; 1
 af6:	0e 94 87 05 	call	0xb0e	; 0xb0e <eeprom_read_block>
	sei();
 afa:	78 94       	sei
 afc:	08 95       	ret

00000afe <init_sound>:

#include "sound.h"

void init_sound(void)
{
	DDRB |= 1<<PB1;
 afe:	21 9a       	sbi	0x04, 1	; 4
 b00:	08 95       	ret

00000b02 <__tablejump2__>:
 b02:	ee 0f       	add	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	05 90       	lpm	r0, Z+
 b08:	f4 91       	lpm	r31, Z
 b0a:	e0 2d       	mov	r30, r0
 b0c:	09 94       	ijmp

00000b0e <eeprom_read_block>:
 b0e:	dc 01       	movw	r26, r24
 b10:	cb 01       	movw	r24, r22

00000b12 <eeprom_read_blraw>:
 b12:	fc 01       	movw	r30, r24
 b14:	f9 99       	sbic	0x1f, 1	; 31
 b16:	fe cf       	rjmp	.-4      	; 0xb14 <eeprom_read_blraw+0x2>
 b18:	06 c0       	rjmp	.+12     	; 0xb26 <eeprom_read_blraw+0x14>
 b1a:	f2 bd       	out	0x22, r31	; 34
 b1c:	e1 bd       	out	0x21, r30	; 33
 b1e:	f8 9a       	sbi	0x1f, 0	; 31
 b20:	31 96       	adiw	r30, 0x01	; 1
 b22:	00 b4       	in	r0, 0x20	; 32
 b24:	0d 92       	st	X+, r0
 b26:	41 50       	subi	r20, 0x01	; 1
 b28:	50 40       	sbci	r21, 0x00	; 0
 b2a:	b8 f7       	brcc	.-18     	; 0xb1a <eeprom_read_blraw+0x8>
 b2c:	08 95       	ret

00000b2e <eeprom_update_block>:
 b2e:	dc 01       	movw	r26, r24
 b30:	a4 0f       	add	r26, r20
 b32:	b5 1f       	adc	r27, r21
 b34:	41 50       	subi	r20, 0x01	; 1
 b36:	50 40       	sbci	r21, 0x00	; 0
 b38:	48 f0       	brcs	.+18     	; 0xb4c <eeprom_update_block+0x1e>
 b3a:	cb 01       	movw	r24, r22
 b3c:	84 0f       	add	r24, r20
 b3e:	95 1f       	adc	r25, r21
 b40:	2e 91       	ld	r18, -X
 b42:	0e 94 a8 05 	call	0xb50	; 0xb50 <eeprom_update_r18>
 b46:	41 50       	subi	r20, 0x01	; 1
 b48:	50 40       	sbci	r21, 0x00	; 0
 b4a:	d0 f7       	brcc	.-12     	; 0xb40 <eeprom_update_block+0x12>
 b4c:	08 95       	ret

00000b4e <eeprom_update_byte>:
 b4e:	26 2f       	mov	r18, r22

00000b50 <eeprom_update_r18>:
 b50:	f9 99       	sbic	0x1f, 1	; 31
 b52:	fe cf       	rjmp	.-4      	; 0xb50 <eeprom_update_r18>
 b54:	92 bd       	out	0x22, r25	; 34
 b56:	81 bd       	out	0x21, r24	; 33
 b58:	f8 9a       	sbi	0x1f, 0	; 31
 b5a:	01 97       	sbiw	r24, 0x01	; 1
 b5c:	00 b4       	in	r0, 0x20	; 32
 b5e:	02 16       	cp	r0, r18
 b60:	39 f0       	breq	.+14     	; 0xb70 <eeprom_update_r18+0x20>
 b62:	1f ba       	out	0x1f, r1	; 31
 b64:	20 bd       	out	0x20, r18	; 32
 b66:	0f b6       	in	r0, 0x3f	; 63
 b68:	f8 94       	cli
 b6a:	fa 9a       	sbi	0x1f, 2	; 31
 b6c:	f9 9a       	sbi	0x1f, 1	; 31
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	08 95       	ret

00000b72 <_exit>:
 b72:	f8 94       	cli

00000b74 <__stop_program>:
 b74:	ff cf       	rjmp	.-2      	; 0xb74 <__stop_program>
