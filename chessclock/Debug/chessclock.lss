
chessclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000624  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  0080010e  0080010e  000006c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f22  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000954  00000000  00000000  0000170a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b0  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000681  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000382  00000000  00000000  00003195  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003517  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_1>
   8:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 82 01 	call	0x304	; 0x304 <main>
  9e:	0c 94 10 03 	jmp	0x620	; 0x620 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <tx_spi>:
};


static void tx_spi(uint8_t data)
{
	SPDR = data;
  a6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <tx_spi+0x2>
}
  ae:	08 95       	ret

000000b0 <init_display>:

void init_display(void)
{
	SPI_DDR |= 1<<SCK | 1<<MOSI | 1<<CS; 
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	8c 62       	ori	r24, 0x2C	; 44
  b4:	84 b9       	out	0x04, r24	; 4
	SPI_PORT |= 1<<CS;                  
  b6:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = 1<<SPE | 1<<MSTR | 1<<SPR1; // master mode, /64 prescaler
  b8:	82 e5       	ldi	r24, 0x52	; 82
  ba:	8c bd       	out	0x2c, r24	; 44
	
	TCCR0A = 1<<WGM01;				// CTC
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 1<<CS02;		        // /256 prescaler
  c0:	94 e0       	ldi	r25, 0x04	; 4
  c2:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 1<<OCIE0A;             // compare interrupt
  c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = 64;					    // ~480Hz at 8MHz
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	87 bd       	out	0x27, r24	; 39
	
	PORTB &= ~(1<<CS); // shutdown
  cc:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0C);
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0x01);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
  da:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); // scanmode
  dc:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0B);
  de:	8b e0       	ldi	r24, 0x0B	; 11
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0x07);
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
  ea:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); // intensity
  ec:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0A);
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0x0B);
  f4:	8b e0       	ldi	r24, 0x0B	; 11
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
  fa:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); // decode
  fc:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x09);
  fe:	89 e0       	ldi	r24, 0x09	; 9
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0xFF);
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;	
 10a:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); // test mode off
 10c:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0F);
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(0x00);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
 11a:	2a 9a       	sbi	0x05, 2	; 5
 11c:	08 95       	ret

0000011e <__vector_14>:


}

ISR(TIMER0_COMPA_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	cf 93       	push	r28
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	static uint8_t i;
	
	PORTB &= ~(1<<CS);
 142:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(i+1);
 144:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <__data_end>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	8c 0f       	add	r24, r28
 14c:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	tx_spi(displayBuffer[i]);
 150:	ec 2f       	mov	r30, r28
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ef 5e       	subi	r30, 0xEF	; 239
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	80 81       	ld	r24, Z
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_spi>
	PORTB |= 1<<CS;
 15e:	2a 9a       	sbi	0x05, 2	; 5
	
	i++;
	i &= 0x07;	
 160:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	87 70       	andi	r24, 0x07	; 7
 168:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	cf 91       	pop	r28
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <scan_keys>:
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
}

void scan_keys(void)
{
	lastKeyState = keyState;
 190:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <keyState>
 194:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <lastKeyState>
		
	keyState = KEY_PIN;
 198:	96 b1       	in	r25, 0x06	; 6
 19a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <keyState>
	uint8_t keyDiff = keyState ^ lastKeyState;
 19e:	89 27       	eor	r24, r25
	
	keyPressed = keyDiff & ~keyState;	
 1a0:	29 2f       	mov	r18, r25
 1a2:	20 95       	com	r18
 1a4:	28 23       	and	r18, r24
 1a6:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <keyPressed>
	keyReleased = keyDiff & keyState;
 1aa:	89 23       	and	r24, r25
 1ac:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <keyReleased>
 1b0:	08 95       	ret

000001b2 <init_keys>:

#include "keys.h"

void init_keys(void)
{
	EICRA = 1<<ISC11 | 1<<ISC01; // falling edge
 1b2:	8a e0       	ldi	r24, 0x0A	; 10
 1b4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT1 | 1<<INT0;   // enable INT0, INT1
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	8d bb       	out	0x1d, r24	; 29
	PORTD |= 1<<PD2 | 1<<PD3;    // enable pullups
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	8c 60       	ori	r24, 0x0C	; 12
 1c0:	8b b9       	out	0x0b, r24	; 11
	
	KEY_PORT |= KEY_MASK; // enable pullups
 1c2:	88 b1       	in	r24, 0x08	; 8
 1c4:	8f 61       	ori	r24, 0x1F	; 31
 1c6:	88 b9       	out	0x08, r24	; 8
	
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
 1c8:	0e 94 c8 00 	call	0x190	; 0x190 <scan_keys>
 1cc:	0e 94 c8 00 	call	0x190	; 0x190 <scan_keys>
 1d0:	08 95       	ret

000001d2 <init_timer>:

volatile playerData playerAData, playerBData, *currentPlayerData;

void init_timer(void)
{
	ASSR = 1<<AS2; // enable asynchronous mode
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	
	TCCR2B |= 1<<CS20;         // /1 prescaler
 1d8:	e1 eb       	ldi	r30, 0xB1	; 177
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	80 83       	st	Z, r24
	while (ASSR & 1<<TCR2BUB); // wait for register update
 1e2:	e6 eb       	ldi	r30, 0xB6	; 182
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 fd       	sbrc	r24, 0
 1ea:	fd cf       	rjmp	.-6      	; 0x1e6 <init_timer+0x14>

	TIFR2  = 1<<TOV2;   // clear interrupt flag	
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	87 bb       	out	0x17, r24	; 23
 1f0:	08 95       	ret

000001f2 <add_time>:
	//TIMSK2 = 1<<TOIE2;  // enable Timer2 overflow interrupt
}

/* increments baseTime by incTime (ignoring ticks) */
void add_time(volatile gameTime *baseTime, gameTime incTime)
{
 1f2:	fc 01       	movw	r30, r24
 1f4:	db 01       	movw	r26, r22
	(*baseTime)[SECONDS] += incTime[SECONDS];
 1f6:	95 81       	ldd	r25, Z+5	; 0x05
 1f8:	15 96       	adiw	r26, 0x05	; 5
 1fa:	8c 91       	ld	r24, X
 1fc:	15 97       	sbiw	r26, 0x05	; 5
 1fe:	89 0f       	add	r24, r25
 200:	85 83       	std	Z+5, r24	; 0x05
	if ((*baseTime)[SECONDS] > 9) 
 202:	85 81       	ldd	r24, Z+5	; 0x05
 204:	8a 30       	cpi	r24, 0x0A	; 10
 206:	24 f0       	brlt	.+8      	; 0x210 <add_time+0x1e>
	{
		(*baseTime)[SECONDS] = 0;
 208:	15 82       	std	Z+5, r1	; 0x05
		(*baseTime)[TEN_SECONDS]++;
 20a:	84 81       	ldd	r24, Z+4	; 0x04
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	84 83       	std	Z+4, r24	; 0x04
	}
	
	(*baseTime)[TEN_SECONDS] += incTime[TEN_SECONDS];
 210:	94 81       	ldd	r25, Z+4	; 0x04
 212:	14 96       	adiw	r26, 0x04	; 4
 214:	8c 91       	ld	r24, X
 216:	14 97       	sbiw	r26, 0x04	; 4
 218:	89 0f       	add	r24, r25
 21a:	84 83       	std	Z+4, r24	; 0x04
	if ((*baseTime)[TEN_SECONDS] > 5)
 21c:	84 81       	ldd	r24, Z+4	; 0x04
 21e:	86 30       	cpi	r24, 0x06	; 6
 220:	24 f0       	brlt	.+8      	; 0x22a <add_time+0x38>
	{
		(*baseTime)[TEN_SECONDS] = 0;
 222:	14 82       	std	Z+4, r1	; 0x04
		(*baseTime)[MINUTES]++;
 224:	83 81       	ldd	r24, Z+3	; 0x03
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	83 83       	std	Z+3, r24	; 0x03
	}
	
	(*baseTime)[MINUTES] += incTime[MINUTES];
 22a:	93 81       	ldd	r25, Z+3	; 0x03
 22c:	13 96       	adiw	r26, 0x03	; 3
 22e:	8c 91       	ld	r24, X
 230:	13 97       	sbiw	r26, 0x03	; 3
 232:	89 0f       	add	r24, r25
 234:	83 83       	std	Z+3, r24	; 0x03
	if ((*baseTime)[MINUTES] > 9)
 236:	83 81       	ldd	r24, Z+3	; 0x03
 238:	8a 30       	cpi	r24, 0x0A	; 10
 23a:	24 f0       	brlt	.+8      	; 0x244 <add_time+0x52>
	{
		(*baseTime)[MINUTES] = 0;
 23c:	13 82       	std	Z+3, r1	; 0x03
		(*baseTime)[TEN_MINUTES]++;
 23e:	82 81       	ldd	r24, Z+2	; 0x02
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	82 83       	std	Z+2, r24	; 0x02
	}
	
	(*baseTime)[TEN_MINUTES] += incTime[TEN_MINUTES];
 244:	92 81       	ldd	r25, Z+2	; 0x02
 246:	12 96       	adiw	r26, 0x02	; 2
 248:	8c 91       	ld	r24, X
 24a:	12 97       	sbiw	r26, 0x02	; 2
 24c:	89 0f       	add	r24, r25
 24e:	82 83       	std	Z+2, r24	; 0x02
	if ((*baseTime)[TEN_MINUTES] > 5)
 250:	82 81       	ldd	r24, Z+2	; 0x02
 252:	86 30       	cpi	r24, 0x06	; 6
 254:	24 f0       	brlt	.+8      	; 0x25e <add_time+0x6c>
	{
		(*baseTime)[TEN_MINUTES] = 0;
 256:	12 82       	std	Z+2, r1	; 0x02
		(*baseTime)[HOURS]++;
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	81 83       	std	Z+1, r24	; 0x01
	}
	
	(*baseTime)[HOURS] += incTime[HOURS];
 25e:	91 81       	ldd	r25, Z+1	; 0x01
 260:	11 96       	adiw	r26, 0x01	; 1
 262:	8c 91       	ld	r24, X
 264:	11 97       	sbiw	r26, 0x01	; 1
 266:	89 0f       	add	r24, r25
 268:	81 83       	std	Z+1, r24	; 0x01
	if ((*baseTime)[HOURS] > 9)
 26a:	81 81       	ldd	r24, Z+1	; 0x01
 26c:	8a 30       	cpi	r24, 0x0A	; 10
 26e:	24 f0       	brlt	.+8      	; 0x278 <add_time+0x86>
	{
		(*baseTime)[HOURS] = 0;
 270:	11 82       	std	Z+1, r1	; 0x01
		(*baseTime)[TEN_HOURS]++;
 272:	80 81       	ld	r24, Z
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 83       	st	Z, r24
	}
	
	(*baseTime)[TEN_HOURS] += incTime[TEN_HOURS];
 278:	90 81       	ld	r25, Z
 27a:	8c 91       	ld	r24, X
 27c:	89 0f       	add	r24, r25
 27e:	80 83       	st	Z, r24
	if ((*baseTime)[TEN_HOURS] > 9)
 280:	80 81       	ld	r24, Z
 282:	8a 30       	cpi	r24, 0x0A	; 10
 284:	34 f0       	brlt	.+12     	; 0x292 <add_time+0xa0>
	{
		(*baseTime)[TEN_HOURS]   = 0;
 286:	10 82       	st	Z, r1
		(*baseTime)[HOURS]       = 0;
 288:	11 82       	std	Z+1, r1	; 0x01
		(*baseTime)[TEN_MINUTES] = 0;
 28a:	12 82       	std	Z+2, r1	; 0x02
		(*baseTime)[MINUTES]     = 0;
 28c:	13 82       	std	Z+3, r1	; 0x03
		(*baseTime)[TEN_SECONDS] = 0;
 28e:	14 82       	std	Z+4, r1	; 0x04
		(*baseTime)[SECONDS]     = 0;
 290:	15 82       	std	Z+5, r1	; 0x05
 292:	08 95       	ret

00000294 <reset>:

/* returns */
//int8_t cmp_time()

void reset(void)
{
 294:	e4 e4       	ldi	r30, 0x44	; 68
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
	{
		uint8_t initialTimeComponent = gameConfig.initialTime[i];
 29c:	21 91       	ld	r18, Z+
		playerATime[i] = initialTimeComponent;
 29e:	dc 01       	movw	r26, r24
 2a0:	a4 5c       	subi	r26, 0xC4	; 196
 2a2:	be 4f       	sbci	r27, 0xFE	; 254
 2a4:	2c 93       	st	X, r18
		playerBTime[i] = initialTimeComponent;
 2a6:	dc 01       	movw	r26, r24
 2a8:	a2 5d       	subi	r26, 0xD2	; 210
 2aa:	be 4f       	sbci	r27, 0xFE	; 254
 2ac:	2c 93       	st	X, r18
 2ae:	01 96       	adiw	r24, 0x01	; 1
//int8_t cmp_time()

void reset(void)
{
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
 2b0:	86 30       	cpi	r24, 0x06	; 6
 2b2:	91 05       	cpc	r25, r1
 2b4:	99 f7       	brne	.-26     	; 0x29c <reset+0x8>
		playerATime[i] = initialTimeComponent;
		playerBTime[i] = initialTimeComponent;
	}

	/* reset ticks */
	playerATicks = 0;
 2b6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <playerATicks>
	playerBTicks = 0;
 2ba:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <playerBTicks>
	
	/* reset move counts */
	playerAData.moves = 0;
 2be:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <playerAData+0x1>
 2c2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <playerAData>
	playerBData.moves = 0;
 2c6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <playerBData+0x1>
 2ca:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <playerBData>
 2ce:	08 95       	ret

000002d0 <write_time>:
}

void write_time(void)
{	
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	9c 01       	movw	r18, r24
 2d6:	2e 5f       	subi	r18, 0xFE	; 254
 2d8:	3f 4f       	sbci	r19, 0xFF	; 255
	for (uint8_t i = 0; i < 4; i++)
	{
		displayBuffer[i] = playerATime[i+2];
 2da:	f9 01       	movw	r30, r18
 2dc:	e4 5c       	subi	r30, 0xC4	; 196
 2de:	fe 4f       	sbci	r31, 0xFE	; 254
 2e0:	40 81       	ld	r20, Z
 2e2:	fc 01       	movw	r30, r24
 2e4:	ef 5e       	subi	r30, 0xEF	; 239
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	40 83       	st	Z, r20
		displayBuffer[i+4] = playerBTime[i+2];
 2ea:	f9 01       	movw	r30, r18
 2ec:	e2 5d       	subi	r30, 0xD2	; 210
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	20 81       	ld	r18, Z
 2f2:	fc 01       	movw	r30, r24
 2f4:	eb 5e       	subi	r30, 0xEB	; 235
 2f6:	fe 4f       	sbci	r31, 0xFE	; 254
 2f8:	20 83       	st	Z, r18
 2fa:	01 96       	adiw	r24, 0x01	; 1
	playerBData.moves = 0;
}

void write_time(void)
{	
	for (uint8_t i = 0; i < 4; i++)
 2fc:	84 30       	cpi	r24, 0x04	; 4
 2fe:	91 05       	cpc	r25, r1
 300:	49 f7       	brne	.-46     	; 0x2d4 <write_time+0x4>
	{
		displayBuffer[i] = playerATime[i+2];
		displayBuffer[i+4] = playerBTime[i+2];
	}
}
 302:	08 95       	ret

00000304 <main>:

int main(void)
{		
	/* default to player A as white/starting */
	
	currentPlayerTicks = &playerATicks;
 304:	85 e3       	ldi	r24, 0x35	; 53
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <currentPlayerTicks+0x1>
 30c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <currentPlayerTicks>
	currentPlayerTime = &playerATime;
 310:	8c e3       	ldi	r24, 0x3C	; 60
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <currentPlayerTime+0x1>
 318:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <currentPlayerTime>
	currentPlayerData = &playerAData;
 31c:	8d e1       	ldi	r24, 0x1D	; 29
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <currentPlayerData+0x1>
 324:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <currentPlayerData>
	
	DDRB |= 1<<PB0 | 1<<PB1;
 328:	84 b1       	in	r24, 0x04	; 4
 32a:	83 60       	ori	r24, 0x03	; 3
 32c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PB1);
 32e:	29 98       	cbi	0x05, 1	; 5
	PORTB |= 1<<PB0;
 330:	28 9a       	sbi	0x05, 0	; 5
	
	gameConfig = blitz5plus3Config;
 332:	8d e0       	ldi	r24, 0x0D	; 13
 334:	e0 e0       	ldi	r30, 0x00	; 0
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	a4 e4       	ldi	r26, 0x44	; 68
 33a:	b1 e0       	ldi	r27, 0x01	; 1
 33c:	01 90       	ld	r0, Z+
 33e:	0d 92       	st	X+, r0
 340:	8a 95       	dec	r24
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x38>
	
	reset();
 344:	0e 94 4a 01 	call	0x294	; 0x294 <reset>
	
	init_display();
 348:	0e 94 58 00 	call	0xb0	; 0xb0 <init_display>
	init_timer();
 34c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <init_timer>
	init_keys();
 350:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <init_keys>
	
	sei();
 354:	78 94       	sei
			break;
			
			case GAME_PAUSED:
			if (keyPressed & START_KEY)
			{
				TIMSK2 = 1<<TOIE2;
 356:	00 e7       	ldi	r16, 0x70	; 112
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	d1 e0       	ldi	r29, 0x01	; 1
				state = GAME_ACTIVE;
 35c:	0f 2e       	mov	r0, r31
 35e:	f3 e0       	ldi	r31, 0x03	; 3
 360:	ff 2e       	mov	r15, r31
 362:	f0 2d       	mov	r31, r0
			
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
			{
				TIMSK2 = 0x00;
				state = GAME_PAUSED;	
 364:	68 94       	set
 366:	ee 24       	eor	r14, r14
 368:	e2 f8       	bld	r14, 2
		
		blinkTimer++;
		if (blinkTimer > blinkThreshold)
		{
			blinkTimer = 0;
			blink ^= 0x0F;
 36a:	cf e0       	ldi	r28, 0x0F	; 15
	
	sei();
	
    while (1) 
    {
		scan_keys();
 36c:	0e 94 c8 00 	call	0x190	; 0x190 <scan_keys>
		
		switch (state)
 370:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <state>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	11 f1       	breq	.+68     	; 0x3bc <main+0xb8>
 378:	28 f4       	brcc	.+10     	; 0x384 <main+0x80>
 37a:	88 23       	and	r24, r24
 37c:	49 f0       	breq	.+18     	; 0x390 <main+0x8c>
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	b1 f0       	breq	.+44     	; 0x3ae <main+0xaa>
 382:	43 c0       	rjmp	.+134    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 384:	84 30       	cpi	r24, 0x04	; 4
 386:	61 f1       	breq	.+88     	; 0x3e0 <main+0xdc>
 388:	00 f1       	brcs	.+64     	; 0x3ca <main+0xc6>
 38a:	85 30       	cpi	r24, 0x05	; 5
 38c:	a1 f1       	breq	.+104    	; 0x3f6 <main+0xf2>
 38e:	3d c0       	rjmp	.+122    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
			case IDLE:
			if (keyPressed & START_KEY)
 390:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <keyPressed>
 394:	82 ff       	sbrs	r24, 2
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <main+0x9e>
			{
				TIMSK2 = 1<<TOIE2;
 398:	f8 01       	movw	r30, r16
 39a:	d0 83       	st	Z, r29
				state = GAME_ACTIVE;
 39c:	f0 92 34 01 	sts	0x0134, r15	; 0x800134 <state>
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <main+0xa4>
			}
			else if (keyPressed & TIME_KEY)
 3a2:	81 fd       	sbrc	r24, 1
			{
				state = EDIT_TIME;
 3a4:	d0 93 34 01 	sts	0x0134, r29	; 0x800134 <state>
			}
			
			write_time();
 3a8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <write_time>
			break;
 3ac:	2e c0       	rjmp	.+92     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			
			case EDIT_TIME:
			if (keyPressed & START_KEY)
 3ae:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <keyPressed>
 3b2:	82 ff       	sbrs	r24, 2
 3b4:	2a c0       	rjmp	.+84     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			{
				state = IDLE;	
 3b6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <state>
 3ba:	27 c0       	rjmp	.+78     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			}
			break;
			
			case EDIT_SETTINGS:
			if (keyPressed & START_KEY)
 3bc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <keyPressed>
 3c0:	82 ff       	sbrs	r24, 2
 3c2:	23 c0       	rjmp	.+70     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			{
				state = IDLE;
 3c4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <state>
 3c8:	20 c0       	rjmp	.+64     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			}
			break;
			
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
 3ca:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <keyPressed>
 3ce:	82 ff       	sbrs	r24, 2
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <main+0xd6>
			{
				TIMSK2 = 0x00;
 3d2:	f8 01       	movw	r30, r16
 3d4:	10 82       	st	Z, r1
				state = GAME_PAUSED;	
 3d6:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <state>
			}
			
			write_time();
 3da:	0e 94 68 01 	call	0x2d0	; 0x2d0 <write_time>
			break;
 3de:	15 c0       	rjmp	.+42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			
			case GAME_PAUSED:
			if (keyPressed & START_KEY)
 3e0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <keyPressed>
 3e4:	82 ff       	sbrs	r24, 2
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <main+0xec>
			{
				TIMSK2 = 1<<TOIE2;
 3e8:	f8 01       	movw	r30, r16
 3ea:	d0 83       	st	Z, r29
				state = GAME_ACTIVE;
 3ec:	f0 92 34 01 	sts	0x0134, r15	; 0x800134 <state>
			}
			
			write_time();
 3f0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <write_time>
			break;
 3f4:	0a c0       	rjmp	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			
			case GAME_FINISHED:
			if (keyPressed & START_KEY)
 3f6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <keyPressed>
 3fa:	82 ff       	sbrs	r24, 2
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			{
				reset();
 3fe:	0e 94 4a 01 	call	0x294	; 0x294 <reset>
				state = IDLE;
 402:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <state>
			}
			
			write_time();
 406:	0e 94 68 01 	call	0x2d0	; 0x2d0 <write_time>
			break;
		}
		
		
		
		blinkTimer++;
 40a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <blinkTimer>
 40e:	8f 5f       	subi	r24, 0xFF	; 255
		if (blinkTimer > blinkThreshold)
 410:	8f 31       	cpi	r24, 0x1F	; 31
 412:	18 f4       	brcc	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			break;
		}
		
		
		
		blinkTimer++;
 414:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <blinkTimer>
 418:	07 c0       	rjmp	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		if (blinkTimer > blinkThreshold)
		{
			blinkTimer = 0;
 41a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <blinkTimer>
			blink ^= 0x0F;
 41e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <blink>
 422:	8c 27       	eor	r24, r28
 424:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <blink>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	8f e2       	ldi	r24, 0x2F	; 47
 42a:	95 e7       	ldi	r25, 0x75	; 117
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	9b cf       	rjmp	.-202    	; 0x36c <main+0x68>

00000436 <__vector_1>:
    }
}

/* Player A's button */
ISR(INT0_vect) 
{	
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	2f 93       	push	r18
 442:	3f 93       	push	r19
 444:	4f 93       	push	r20
 446:	5f 93       	push	r21
 448:	6f 93       	push	r22
 44a:	7f 93       	push	r23
 44c:	8f 93       	push	r24
 44e:	9f 93       	push	r25
 450:	af 93       	push	r26
 452:	bf 93       	push	r27
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31
	switch (state)
 458:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <state>
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	89 f4       	brne	.+34     	; 0x482 <__vector_1+0x4c>
	{
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerATime)
 460:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <currentPlayerTime>
 464:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <currentPlayerTime+0x1>
 468:	8c 53       	subi	r24, 0x3C	; 60
 46a:	91 40       	sbci	r25, 0x01	; 1
 46c:	51 f4       	brne	.+20     	; 0x482 <__vector_1+0x4c>
		{
			switch (gameConfig.gameMode)
 46e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <gameConfig+0x6>
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	31 f4       	brne	.+12     	; 0x482 <__vector_1+0x4c>
				case SIMPLE:
				
				break;
				
				case INCREMENT:
					add_time(currentPlayerTime, gameConfig.delay);
 476:	6b e4       	ldi	r22, 0x4B	; 75
 478:	71 e0       	ldi	r23, 0x01	; 1
 47a:	8c e3       	ldi	r24, 0x3C	; 60
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <add_time>
		
		default:			
		break;
	}
	
	currentPlayerTime  = &playerBTime; // start decrementing other player's time instead
 482:	8e e2       	ldi	r24, 0x2E	; 46
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <currentPlayerTime+0x1>
 48a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <currentPlayerTime>
	currentPlayerTicks = &playerBTicks;
 48e:	8d e2       	ldi	r24, 0x2D	; 45
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <currentPlayerTicks+0x1>
 496:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <currentPlayerTicks>
		
	PORTB |= 1<<PB0;
 49a:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<PB1);	
 49c:	29 98       	cbi	0x05, 1	; 5
}
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <__vector_2>:

/* Player B's button */
ISR(INT1_vect)
{
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	2f 93       	push	r18
 4cc:	3f 93       	push	r19
 4ce:	4f 93       	push	r20
 4d0:	5f 93       	push	r21
 4d2:	6f 93       	push	r22
 4d4:	7f 93       	push	r23
 4d6:	8f 93       	push	r24
 4d8:	9f 93       	push	r25
 4da:	af 93       	push	r26
 4dc:	bf 93       	push	r27
 4de:	ef 93       	push	r30
 4e0:	ff 93       	push	r31
	switch (state)
 4e2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <state>
 4e6:	83 30       	cpi	r24, 0x03	; 3
 4e8:	89 f4       	brne	.+34     	; 0x50c <__vector_2+0x4c>
	{		
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerBTime)
 4ea:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <currentPlayerTime>
 4ee:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <currentPlayerTime+0x1>
 4f2:	8e 52       	subi	r24, 0x2E	; 46
 4f4:	91 40       	sbci	r25, 0x01	; 1
 4f6:	51 f4       	brne	.+20     	; 0x50c <__vector_2+0x4c>
		{			
			switch (gameConfig.gameMode)
 4f8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <gameConfig+0x6>
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	31 f4       	brne	.+12     	; 0x50c <__vector_2+0x4c>
				case SIMPLE:
				
				break;
			
				case INCREMENT:
					add_time(currentPlayerTime, gameConfig.delay);
 500:	6b e4       	ldi	r22, 0x4B	; 75
 502:	71 e0       	ldi	r23, 0x01	; 1
 504:	8e e2       	ldi	r24, 0x2E	; 46
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <add_time>
		
		default:
		break;
	}
	
	currentPlayerTime  = &playerATime; // start decrementing other player's time instead	
 50c:	8c e3       	ldi	r24, 0x3C	; 60
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <currentPlayerTime+0x1>
 514:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <currentPlayerTime>
	currentPlayerTicks = &playerATicks;
 518:	85 e3       	ldi	r24, 0x35	; 53
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <currentPlayerTicks+0x1>
 520:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <currentPlayerTicks>
		
	PORTB |= 1<<PB1;
 524:	29 9a       	sbi	0x05, 1	; 5
	PORTB &= ~(1<<PB0);
 526:	28 98       	cbi	0x05, 0	; 5
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_9>:

/* TODO: implement simple/Bronstein delay by decrementing delay time in addition to/as well as current player time */
ISR(TIMER2_OVF_vect)
{	
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	8f 93       	push	r24
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
	if (++(*currentPlayerTicks) > 127)
 55a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <currentPlayerTicks>
 55e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <currentPlayerTicks+0x1>
 562:	80 81       	ld	r24, Z
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	80 83       	st	Z, r24
 568:	88 23       	and	r24, r24
 56a:	0c f0       	brlt	.+2      	; 0x56e <__vector_9+0x24>
 56c:	51 c0       	rjmp	.+162    	; 0x610 <__vector_9+0xc6>
	{
		*currentPlayerTicks = 0;
 56e:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <currentPlayerTicks>
 572:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <currentPlayerTicks+0x1>
 576:	10 82       	st	Z, r1
		
		if (--(*currentPlayerTime)[SECONDS] < 0)
 578:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <currentPlayerTime>
 57c:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <currentPlayerTime+0x1>
 580:	85 81       	ldd	r24, Z+5	; 0x05
 582:	81 50       	subi	r24, 0x01	; 1
 584:	85 83       	std	Z+5, r24	; 0x05
 586:	88 23       	and	r24, r24
 588:	0c f0       	brlt	.+2      	; 0x58c <__vector_9+0x42>
 58a:	42 c0       	rjmp	.+132    	; 0x610 <__vector_9+0xc6>
		{
			(*currentPlayerTime)[SECONDS] = 9;
 58c:	89 e0       	ldi	r24, 0x09	; 9
 58e:	85 83       	std	Z+5, r24	; 0x05
		
			if (--(*currentPlayerTime)[TEN_SECONDS] < 0)
 590:	84 81       	ldd	r24, Z+4	; 0x04
 592:	81 50       	subi	r24, 0x01	; 1
 594:	84 83       	std	Z+4, r24	; 0x04
 596:	88 23       	and	r24, r24
 598:	dc f5       	brge	.+118    	; 0x610 <__vector_9+0xc6>
			{
				(*currentPlayerTime)[TEN_SECONDS] = 5;
 59a:	85 e0       	ldi	r24, 0x05	; 5
 59c:	84 83       	std	Z+4, r24	; 0x04
			
				if (--(*currentPlayerTime)[MINUTES] < 0)
 59e:	83 81       	ldd	r24, Z+3	; 0x03
 5a0:	81 50       	subi	r24, 0x01	; 1
 5a2:	83 83       	std	Z+3, r24	; 0x03
 5a4:	88 23       	and	r24, r24
 5a6:	a4 f5       	brge	.+104    	; 0x610 <__vector_9+0xc6>
				{
					(*currentPlayerTime)[MINUTES] = 9;
 5a8:	89 e0       	ldi	r24, 0x09	; 9
 5aa:	83 83       	std	Z+3, r24	; 0x03
				
					if (--(*currentPlayerTime)[TEN_MINUTES] < 0)
 5ac:	82 81       	ldd	r24, Z+2	; 0x02
 5ae:	81 50       	subi	r24, 0x01	; 1
 5b0:	82 83       	std	Z+2, r24	; 0x02
 5b2:	88 23       	and	r24, r24
 5b4:	6c f5       	brge	.+90     	; 0x610 <__vector_9+0xc6>
					{					
						(*currentPlayerTime)[TEN_MINUTES] = 5;
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	82 83       	std	Z+2, r24	; 0x02
					
						if (--(*currentPlayerTime)[HOURS] < 0)
 5ba:	81 81       	ldd	r24, Z+1	; 0x01
 5bc:	81 50       	subi	r24, 0x01	; 1
 5be:	81 83       	std	Z+1, r24	; 0x01
 5c0:	88 23       	and	r24, r24
 5c2:	34 f5       	brge	.+76     	; 0x610 <__vector_9+0xc6>
						{
							(*currentPlayerTime)[HOURS] = 9;
 5c4:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <currentPlayerTime>
 5c8:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <currentPlayerTime+0x1>
 5cc:	89 e0       	ldi	r24, 0x09	; 9
 5ce:	81 83       	std	Z+1, r24	; 0x01
						
							if(--(*currentPlayerTime)[TEN_HOURS] < 0)
 5d0:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <currentPlayerTime>
 5d4:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <currentPlayerTime+0x1>
 5d8:	80 81       	ld	r24, Z
 5da:	81 50       	subi	r24, 0x01	; 1
 5dc:	80 83       	st	Z, r24
 5de:	88 23       	and	r24, r24
 5e0:	bc f4       	brge	.+46     	; 0x610 <__vector_9+0xc6>
							{
								(*currentPlayerTime)[TEN_HOURS]   = 0;
 5e2:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <currentPlayerTime>
 5e6:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <currentPlayerTime+0x1>
 5ea:	10 82       	st	Z, r1
								(*currentPlayerTime)[HOURS]       = 0;
 5ec:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <currentPlayerTime>
 5f0:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <currentPlayerTime+0x1>
 5f4:	11 82       	std	Z+1, r1	; 0x01
								(*currentPlayerTime)[TEN_MINUTES] = 0;
 5f6:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <currentPlayerTime>
 5fa:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <currentPlayerTime+0x1>
 5fe:	12 82       	std	Z+2, r1	; 0x02
								(*currentPlayerTime)[MINUTES]     = 0;
 600:	13 82       	std	Z+3, r1	; 0x03
								(*currentPlayerTime)[TEN_SECONDS] = 0;
 602:	14 82       	std	Z+4, r1	; 0x04
								(*currentPlayerTime)[SECONDS]     = 0;	
 604:	15 82       	std	Z+5, r1	; 0x05
								
								TIMSK2 = 0x00; // disable further ticks
 606:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
								state = GAME_FINISHED;
 60a:	85 e0       	ldi	r24, 0x05	; 5
 60c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
				}
			}
		}
	}		
	
}
 610:	ff 91       	pop	r31
 612:	ef 91       	pop	r30
 614:	8f 91       	pop	r24
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
