
chessclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00000e6e  00000f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800162  00800162  00000f64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f03  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf2  00000000  00000000  00003073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001434  00000000  00000000  00003d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  0000519c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000855  00000000  00000000  00005504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e8  00000000  00000000  00005d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
   2:	84 c5       	rjmp	.+2824   	; 0xb0c <__vector_1>
   4:	c7 c5       	rjmp	.+2958   	; 0xb94 <__vector_2>
   6:	ba c0       	rjmp	.+372    	; 0x17c <__bad_interrupt>
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	b8 c0       	rjmp	.+368    	; 0x17c <__bad_interrupt>
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	b6 c0       	rjmp	.+364    	; 0x17c <__bad_interrupt>
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	04 c6       	rjmp	.+3080   	; 0xc1c <__vector_9>
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	b2 c0       	rjmp	.+356    	; 0x17c <__bad_interrupt>
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	b0 c0       	rjmp	.+352    	; 0x17c <__bad_interrupt>
  1c:	5e c2       	rjmp	.+1212   	; 0x4da <__vector_14>
  1e:	ae c0       	rjmp	.+348    	; 0x17c <__bad_interrupt>
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	ac c0       	rjmp	.+344    	; 0x17c <__bad_interrupt>
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	aa c0       	rjmp	.+340    	; 0x17c <__bad_interrupt>
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	a8 c0       	rjmp	.+336    	; 0x17c <__bad_interrupt>
  2c:	a7 c0       	rjmp	.+334    	; 0x17c <__bad_interrupt>
  2e:	a6 c0       	rjmp	.+332    	; 0x17c <__bad_interrupt>
  30:	a5 c0       	rjmp	.+330    	; 0x17c <__bad_interrupt>
  32:	a4 c0       	rjmp	.+328    	; 0x17c <__bad_interrupt>
  34:	2e c4       	rjmp	.+2140   	; 0x892 <main+0x1d4>
  36:	6c c4       	rjmp	.+2264   	; 0x910 <main+0x252>
  38:	c3 c4       	rjmp	.+2438   	; 0x9c0 <main+0x302>
  3a:	fa c4       	rjmp	.+2548   	; 0xa30 <main+0x372>
  3c:	c2 c3       	rjmp	.+1924   	; 0x7c2 <main+0x104>
  3e:	a4 c3       	rjmp	.+1864   	; 0x788 <main+0xca>
  40:	2b c5       	rjmp	.+2646   	; 0xa98 <main+0x3da>
  42:	37 c5       	rjmp	.+2670   	; 0xab2 <main+0x3f4>
  44:	4d c5       	rjmp	.+2714   	; 0xae0 <main+0x422>

00000046 <__trampolines_end>:
  46:	ff ff       	.word	0xffff	; ????
  48:	ff ff       	.word	0xffff	; ????
  4a:	ff ff       	.word	0xffff	; ????
  4c:	ff ff       	.word	0xffff	; ????
  4e:	ff ff       	.word	0xffff	; ????
  50:	ff ff       	.word	0xffff	; ????
  52:	ff ff       	.word	0xffff	; ????
  54:	ff ff       	.word	0xffff	; ????
  56:	ff ff       	.word	0xffff	; ????
  58:	ff ff       	.word	0xffff	; ????
  5a:	ff ff       	.word	0xffff	; ????
  5c:	18 fd       	.word	0xfd18	; ????
  5e:	e3 ee       	ldi	r30, 0xE3	; 227
  60:	7b e1       	ldi	r23, 0x1B	; 27
  62:	d3 d4       	rcall	.+2470   	; 0xa0a <main+0x34c>
  64:	e1 c8       	rjmp	.-3646   	; 0xfffff228 <__eeprom_end+0xff7ef228>
  66:	9b bd       	out	0x2b, r25	; 43
  68:	f6 b2       	in	r15, 0x16	; 22
  6a:	eb a8       	ldd	r14, Y+51	; 0x33
  6c:	70 9f       	mul	r23, r16
  6e:	7d 96       	adiw	r30, 0x1d	; 29
  70:	0b 8e       	std	Y+27, r0	; 0x1b
  72:	12 86       	std	Z+10, r1	; 0x0a
  74:	8b 7e       	andi	r24, 0xEB	; 235
  76:	71 77       	andi	r23, 0x71	; 113
  78:	bd 70       	andi	r27, 0x0D	; 13
  7a:	69 6a       	ori	r22, 0xA9	; 169
  7c:	70 64       	ori	r23, 0x40	; 64
  7e:	cd 5e       	subi	r28, 0xED	; 237
  80:	7b 59       	subi	r23, 0x9B	; 155
  82:	75 54       	subi	r23, 0x45	; 69
  84:	b7 4f       	sbci	r27, 0xF7	; 247
  86:	3e 4b       	sbci	r19, 0xBE	; 190
  88:	05 47       	sbci	r16, 0x75	; 117
  8a:	08 43       	sbci	r16, 0x38	; 56
  8c:	45 3f       	cpi	r20, 0xF5	; 245
  8e:	b8 3b       	cpi	r27, 0xB8	; 184
  90:	5e 38       	cpi	r21, 0x8E	; 142
  92:	34 35       	cpi	r19, 0x54	; 84
  94:	37 32       	cpi	r19, 0x27	; 39
  96:	66 2f       	mov	r22, r22
  98:	bd 2c       	mov	r11, r13
  9a:	3a 2a       	or	r3, r26
  9c:	db 27       	eor	r29, r27
  9e:	9e 25       	eor	r25, r14
  a0:	82 23       	and	r24, r18
  a2:	84 21       	and	r24, r4
  a4:	a2 1f       	adc	r26, r18
  a6:	dc 1d       	adc	r29, r12
  a8:	2e 1c       	adc	r2, r14
  aa:	99 1a       	sub	r9, r25
  ac:	1b 19       	sub	r17, r11
  ae:	b2 17       	cp	r27, r18
  b0:	5e 16       	cp	r5, r30
  b2:	1c 15       	cp	r17, r12
  b4:	ed 13       	cpse	r30, r29
  b6:	cf 12       	cpse	r12, r31
  b8:	c0 11       	cpse	r28, r0
  ba:	c1 10       	cpse	r12, r1
  bc:	d1 0f       	add	r29, r17
  be:	ed 0e       	add	r14, r29
  c0:	17 0e       	add	r1, r23
  c2:	4c 0d       	add	r20, r12
  c4:	8d 0c       	add	r8, r13
  c6:	d9 0b       	sbc	r29, r25
  c8:	2e 0b       	sbc	r18, r30
  ca:	8e 0a       	sbc	r8, r30
  cc:	f6 09       	sbc	r31, r6
  ce:	67 09       	sbc	r22, r7
  d0:	e0 08       	sbc	r14, r0
  d2:	60 08       	sbc	r6, r0
  d4:	e8 07       	cpc	r30, r24
  d6:	76 07       	cpc	r23, r22
  d8:	0b 07       	cpc	r16, r27
  da:	a6 06       	cpc	r10, r22
  dc:	46 06       	cpc	r4, r22
  de:	ec 05       	cpc	r30, r12
  e0:	97 05       	cpc	r25, r7
  e2:	46 05       	cpc	r20, r6
  e4:	fb 04       	cpc	r15, r11
  e6:	b3 04       	cpc	r11, r3
  e8:	6f 04       	cpc	r6, r15
  ea:	30 04       	cpc	r3, r0
  ec:	f3 03       	fmuls	r23, r19
  ee:	bb 03       	fmulsu	r19, r19
  f0:	85 03       	fmuls	r16, r21
  f2:	52 03       	mulsu	r21, r18
  f4:	23 03       	mulsu	r18, r19
  f6:	f5 02       	muls	r31, r21
  f8:	cb 02       	muls	r28, r27
  fa:	a3 02       	muls	r26, r19
  fc:	7d 02       	muls	r23, r29
  fe:	59 02       	muls	r21, r25
 100:	37 02       	muls	r19, r23
 102:	17 02       	muls	r17, r23
 104:	f9 01       	movw	r30, r18
 106:	dd 01       	movw	r26, r26
 108:	c2 01       	movw	r24, r4
 10a:	a9 01       	movw	r20, r18
 10c:	91 01       	movw	r18, r2
 10e:	7a 01       	movw	r14, r20
 110:	65 01       	movw	r12, r10
 112:	51 01       	movw	r10, r2
 114:	3e 01       	movw	r6, r28
 116:	2c 01       	movw	r4, r24
 118:	1b 01       	movw	r2, r22
 11a:	0b 01       	movw	r0, r22
 11c:	fc 00       	.word	0x00fc	; ????
 11e:	ee 00       	.word	0x00ee	; ????
 120:	e0 00       	.word	0x00e0	; ????
 122:	d4 00       	.word	0x00d4	; ????
 124:	c8 00       	.word	0x00c8	; ????
 126:	bd 00       	.word	0x00bd	; ????
 128:	b2 00       	.word	0x00b2	; ????
 12a:	a8 00       	.word	0x00a8	; ????
 12c:	9e 00       	.word	0x009e	; ????
 12e:	95 00       	.word	0x0095	; ????
 130:	8d 00       	.word	0x008d	; ????
 132:	85 00       	.word	0x0085	; ????
 134:	7e 00       	.word	0x007e	; ????
 136:	76 00       	.word	0x0076	; ????
 138:	70 00       	.word	0x0070	; ????
 13a:	69 00       	.word	0x0069	; ????
 13c:	63 00       	.word	0x0063	; ????
 13e:	5e 00       	.word	0x005e	; ????
 140:	58 00       	.word	0x0058	; ????
 142:	53 00       	.word	0x0053	; ????
 144:	4f 00       	.word	0x004f	; ????

00000146 <__ctors_end>:
 146:	11 24       	eor	r1, r1
 148:	1f be       	out	0x3f, r1	; 63
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d4 e0       	ldi	r29, 0x04	; 4
 14e:	de bf       	out	0x3e, r29	; 62
 150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
 152:	11 e0       	ldi	r17, 0x01	; 1
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	ee e6       	ldi	r30, 0x6E	; 110
 15a:	fe e0       	ldi	r31, 0x0E	; 14
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
 15e:	05 90       	lpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	a2 36       	cpi	r26, 0x62	; 98
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	a2 e6       	ldi	r26, 0x62	; 98
 16c:	b1 e0       	ldi	r27, 0x01	; 1
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a0 3b       	cpi	r26, 0xB0	; 176
 174:	b2 07       	cpc	r27, r18
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	a2 d2       	rcall	.+1348   	; 0x6be <main>
 17a:	77 c6       	rjmp	.+3310   	; 0xe6a <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <tx_spi>:
// 	0b00000000, // space
// };

static void tx_spi(uint8_t data)
{
	SPDR = data;
 17e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 180:	0d b4       	in	r0, 0x2d	; 45
 182:	07 fe       	sbrs	r0, 7
 184:	fd cf       	rjmp	.-6      	; 0x180 <tx_spi+0x2>
}
 186:	08 95       	ret

00000188 <init_display>:

void init_display(uint8_t brightness)
{
	/* SS must be set as output for master mode */
	/* but CS is used as the actual select pin  */
	SPI_DDR |= 1<<SCK | 1<<MOSI | 1<<SS | 1<<CS; 
 188:	94 b1       	in	r25, 0x04	; 4
 18a:	9d 62       	ori	r25, 0x2D	; 45
 18c:	94 b9       	out	0x04, r25	; 4
	SPI_PORT |= 1<<CS;                  
 18e:	28 9a       	sbi	0x05, 0	; 5
	SPCR = 1<<SPE | 1<<MSTR | 1<<SPR1; // master mode, /64 prescaler (125kHz)
 190:	92 e5       	ldi	r25, 0x52	; 82
 192:	9c bd       	out	0x2c, r25	; 44
	
	DDRD |= 1<<PD4 | 1<<PD5; // colon, OC0B
 194:	9a b1       	in	r25, 0x0a	; 10
 196:	90 63       	ori	r25, 0x30	; 48
 198:	9a b9       	out	0x0a, r25	; 10
#define MOSI PB3
#define SS   PB2
#define CS   PB0

inline void COLON_ON()  {PORTD |= 1<<PD4;}
inline void COLON_OFF() {PORTD &= ~(1<<PD4);}
 19a:	5c 98       	cbi	0x0b, 4	; 11
	
	COLON_OFF();	
	
	TCCR0A = 1<<COM0B1 | 1<<COM0B0 | 1<<WGM01 | 1<<WGM00; // Fast PWM, TOP = OCR0A
 19c:	93 e3       	ldi	r25, 0x33	; 51
 19e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 1<<WGM02 | 1<<CS02;                          // /256 prescaler
 1a0:	9c e0       	ldi	r25, 0x0C	; 12
 1a2:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 1<<OCIE0A;                                   // compare interrupt
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	OCR0A = 48;					                          // ~640Hz at 8MHz
 1aa:	90 e3       	ldi	r25, 0x30	; 48
 1ac:	97 bd       	out	0x27, r25	; 39
	OCR0B = brightness << 2;                              // Display brightness PWM: 1-10 is mapped to 4-40
 1ae:	88 0f       	add	r24, r24
 1b0:	88 0f       	add	r24, r24
 1b2:	88 bd       	out	0x28, r24	; 40
	
	PORTB &= ~(1<<CS); 
 1b4:	28 98       	cbi	0x05, 0	; 5
	tx_spi(0x0C);		// shutdown
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	e2 df       	rcall	.-60     	; 0x17e <tx_spi>
	tx_spi(0x01);		//
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	e0 df       	rcall	.-64     	; 0x17e <tx_spi>
	PORTB |= 1<<CS;
 1be:	28 9a       	sbi	0x05, 0	; 5
	
	PORTB &= ~(1<<CS); 
 1c0:	28 98       	cbi	0x05, 0	; 5
	tx_spi(0x0B);		// scanmode
 1c2:	8b e0       	ldi	r24, 0x0B	; 11
 1c4:	dc df       	rcall	.-72     	; 0x17e <tx_spi>
	tx_spi(0x07);		//
 1c6:	87 e0       	ldi	r24, 0x07	; 7
 1c8:	da df       	rcall	.-76     	; 0x17e <tx_spi>
	PORTB |= 1<<CS;
 1ca:	28 9a       	sbi	0x05, 0	; 5
	
	PORTB &= ~(1<<CS); 
 1cc:	28 98       	cbi	0x05, 0	; 5
	tx_spi(0x0A);	    // intensity
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	d6 df       	rcall	.-84     	; 0x17e <tx_spi>
	tx_spi(0x0F);		//
 1d2:	8f e0       	ldi	r24, 0x0F	; 15
 1d4:	d4 df       	rcall	.-88     	; 0x17e <tx_spi>
	PORTB |= 1<<CS;
 1d6:	28 9a       	sbi	0x05, 0	; 5
	
	PORTB &= ~(1<<CS); 
 1d8:	28 98       	cbi	0x05, 0	; 5
	tx_spi(0x09);		// decode
 1da:	89 e0       	ldi	r24, 0x09	; 9
 1dc:	d0 df       	rcall	.-96     	; 0x17e <tx_spi>
	tx_spi(0x00);		// no decode
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	ce df       	rcall	.-100    	; 0x17e <tx_spi>
	PORTB |= 1<<CS;	
 1e2:	28 9a       	sbi	0x05, 0	; 5
	
	PORTB &= ~(1<<CS); 
 1e4:	28 98       	cbi	0x05, 0	; 5
	tx_spi(0x0F);		// test mode
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	ca df       	rcall	.-108    	; 0x17e <tx_spi>
	tx_spi(0x00);		// off
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	c8 df       	rcall	.-112    	; 0x17e <tx_spi>
	PORTB |= 1<<CS;
 1ee:	28 9a       	sbi	0x05, 0	; 5
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i = 0; i < 8; i++)
	{
		blinkOsc[i] = 0x00;
 1f4:	fc 01       	movw	r30, r24
 1f6:	e4 59       	subi	r30, 0x94	; 148
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	10 82       	st	Z, r1
		blinkMask[i] = 0x00;
 1fc:	fc 01       	movw	r30, r24
 1fe:	ec 59       	subi	r30, 0x9C	; 156
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	10 82       	st	Z, r1
 204:	01 96       	adiw	r24, 0x01	; 1
	PORTB &= ~(1<<CS); 
	tx_spi(0x0F);		// test mode
	tx_spi(0x00);		// off
	PORTB |= 1<<CS;
	
	for (uint8_t i = 0; i < 8; i++)
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	91 05       	cpc	r25, r1
 20a:	a1 f7       	brne	.-24     	; 0x1f4 <init_display+0x6c>
	{
		blinkOsc[i] = 0x00;
		blinkMask[i] = 0x00;
	}
}
 20c:	08 95       	ret

0000020e <update_blink>:

void update_blink(void)
{
	blinkTimer++;
 20e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <blinkTimer>
 212:	8f 5f       	subi	r24, 0xFF	; 255
	if (blinkTimer > blinkThreshold)
 214:	85 31       	cpi	r24, 0x15	; 21
 216:	18 f4       	brcc	.+6      	; 0x21e <update_blink+0x10>
	}
}

void update_blink(void)
{
	blinkTimer++;
 218:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <blinkTimer>
 21c:	08 95       	ret
	if (blinkTimer > blinkThreshold)
	{
		blinkTimer = 0;
 21e:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <blinkTimer>
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
		for (uint8_t i = 0; i < 8; i++)
		{			
			blinkOsc[i] ^= 0xFF;
 226:	fc 01       	movw	r30, r24
 228:	e4 59       	subi	r30, 0x94	; 148
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	20 81       	ld	r18, Z
 22e:	20 95       	com	r18
 230:	20 83       	st	Z, r18
 232:	01 96       	adiw	r24, 0x01	; 1
{
	blinkTimer++;
	if (blinkTimer > blinkThreshold)
	{
		blinkTimer = 0;
		for (uint8_t i = 0; i < 8; i++)
 234:	88 30       	cpi	r24, 0x08	; 8
 236:	91 05       	cpc	r25, r1
 238:	b1 f7       	brne	.-20     	; 0x226 <update_blink+0x18>
 23a:	08 95       	ret

0000023c <write_time>:
	}
}

void write_time(uint8_t edit)
{
	if (hmms) hmms = 2;
 23c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 240:	99 23       	and	r25, r25
 242:	19 f0       	breq	.+6      	; 0x24a <write_time+0xe>
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
	
	if (playerATime[hmms] || edit) displayBuffer[0] = sevenSeg[playerATime[hmms]];
 24a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	e1 57       	subi	r30, 0x71	; 113
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	90 81       	ld	r25, Z
 258:	91 11       	cpse	r25, r1
 25a:	03 c0       	rjmp	.+6      	; 0x262 <write_time+0x26>
 25c:	81 11       	cpse	r24, r1
 25e:	7c c0       	rjmp	.+248    	; 0x358 <write_time+0x11c>
 260:	13 c0       	rjmp	.+38     	; 0x288 <write_time+0x4c>
 262:	f9 01       	movw	r30, r18
 264:	e1 57       	subi	r30, 0x71	; 113
 266:	fe 4f       	sbci	r31, 0xFE	; 254
 268:	e0 81       	ld	r30, Z
 26a:	0e 2e       	mov	r0, r30
 26c:	00 0c       	add	r0, r0
 26e:	ff 0b       	sbc	r31, r31
 270:	ef 5f       	subi	r30, 0xFF	; 255
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	90 81       	ld	r25, Z
 276:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <displayBuffer>
	else                           displayBuffer[0] = 0x00;
	
	if (playerBTime[hmms] || edit) displayBuffer[4] = sevenSeg[playerBTime[hmms]];
 27a:	f9 01       	movw	r30, r18
 27c:	e9 58       	subi	r30, 0x89	; 137
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	90 81       	ld	r25, Z
 282:	99 23       	and	r25, r25
 284:	51 f0       	breq	.+20     	; 0x29a <write_time+0x5e>
 286:	0b c0       	rjmp	.+22     	; 0x29e <write_time+0x62>
void write_time(uint8_t edit)
{
	if (hmms) hmms = 2;
	
	if (playerATime[hmms] || edit) displayBuffer[0] = sevenSeg[playerATime[hmms]];
	else                           displayBuffer[0] = 0x00;
 288:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <displayBuffer>
	
	if (playerBTime[hmms] || edit) displayBuffer[4] = sevenSeg[playerBTime[hmms]];
 28c:	f9 01       	movw	r30, r18
 28e:	e9 58       	subi	r30, 0x89	; 137
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	81 f0       	breq	.+32     	; 0x2b8 <write_time+0x7c>
 298:	02 c0       	rjmp	.+4      	; 0x29e <write_time+0x62>
 29a:	88 23       	and	r24, r24
 29c:	69 f0       	breq	.+26     	; 0x2b8 <write_time+0x7c>
 29e:	f9 01       	movw	r30, r18
 2a0:	e9 58       	subi	r30, 0x89	; 137
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	e0 81       	ld	r30, Z
 2a6:	0e 2e       	mov	r0, r30
 2a8:	00 0c       	add	r0, r0
 2aa:	ff 0b       	sbc	r31, r31
 2ac:	ef 5f       	subi	r30, 0xFF	; 255
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	80 81       	ld	r24, Z
 2b2:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <displayBuffer+0x4>
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <write_time+0x80>
	else                           displayBuffer[4] = 0x00;
 2b8:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <displayBuffer+0x4>
// 	{
// 		displayBuffer[i]   = sevenSeg[playerATime[i+hmms]];
// 		displayBuffer[i+4] = sevenSeg[playerBTime[i+hmms]];
// 	}

	displayBuffer[1] = sevenSeg[playerATime[1+hmms]] | 0x80; // dp
 2bc:	a9 01       	movw	r20, r18
 2be:	4f 5f       	subi	r20, 0xFF	; 255
 2c0:	5f 4f       	sbci	r21, 0xFF	; 255
 2c2:	fa 01       	movw	r30, r20
 2c4:	e1 57       	subi	r30, 0x71	; 113
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	e0 81       	ld	r30, Z
 2ca:	0e 2e       	mov	r0, r30
 2cc:	00 0c       	add	r0, r0
 2ce:	ff 0b       	sbc	r31, r31
 2d0:	ef 5f       	subi	r30, 0xFF	; 255
 2d2:	fe 4f       	sbci	r31, 0xFE	; 254
 2d4:	80 81       	ld	r24, Z
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	e7 e8       	ldi	r30, 0x87	; 135
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	81 83       	std	Z+1, r24	; 0x01
	displayBuffer[2] = sevenSeg[playerATime[2+hmms]];
 2de:	c9 01       	movw	r24, r18
 2e0:	02 96       	adiw	r24, 0x02	; 2
 2e2:	dc 01       	movw	r26, r24
 2e4:	a1 57       	subi	r26, 0x71	; 113
 2e6:	be 4f       	sbci	r27, 0xFE	; 254
 2e8:	ac 91       	ld	r26, X
 2ea:	0a 2e       	mov	r0, r26
 2ec:	00 0c       	add	r0, r0
 2ee:	bb 0b       	sbc	r27, r27
 2f0:	af 5f       	subi	r26, 0xFF	; 255
 2f2:	be 4f       	sbci	r27, 0xFE	; 254
 2f4:	6c 91       	ld	r22, X
 2f6:	62 83       	std	Z+2, r22	; 0x02
	displayBuffer[3] = sevenSeg[playerATime[3+hmms]];
 2f8:	2d 5f       	subi	r18, 0xFD	; 253
 2fa:	3f 4f       	sbci	r19, 0xFF	; 255
 2fc:	d9 01       	movw	r26, r18
 2fe:	a1 57       	subi	r26, 0x71	; 113
 300:	be 4f       	sbci	r27, 0xFE	; 254
 302:	ac 91       	ld	r26, X
 304:	0a 2e       	mov	r0, r26
 306:	00 0c       	add	r0, r0
 308:	bb 0b       	sbc	r27, r27
 30a:	af 5f       	subi	r26, 0xFF	; 255
 30c:	be 4f       	sbci	r27, 0xFE	; 254
 30e:	6c 91       	ld	r22, X
 310:	63 83       	std	Z+3, r22	; 0x03
	
	displayBuffer[5] = sevenSeg[playerBTime[1+hmms]] | 0x80; // dp
 312:	da 01       	movw	r26, r20
 314:	a9 58       	subi	r26, 0x89	; 137
 316:	be 4f       	sbci	r27, 0xFE	; 254
 318:	ac 91       	ld	r26, X
 31a:	0a 2e       	mov	r0, r26
 31c:	00 0c       	add	r0, r0
 31e:	bb 0b       	sbc	r27, r27
 320:	af 5f       	subi	r26, 0xFF	; 255
 322:	be 4f       	sbci	r27, 0xFE	; 254
 324:	4c 91       	ld	r20, X
 326:	40 68       	ori	r20, 0x80	; 128
 328:	45 83       	std	Z+5, r20	; 0x05
	displayBuffer[6] = sevenSeg[playerBTime[2+hmms]];
 32a:	dc 01       	movw	r26, r24
 32c:	a9 58       	subi	r26, 0x89	; 137
 32e:	be 4f       	sbci	r27, 0xFE	; 254
 330:	ac 91       	ld	r26, X
 332:	0a 2e       	mov	r0, r26
 334:	00 0c       	add	r0, r0
 336:	bb 0b       	sbc	r27, r27
 338:	af 5f       	subi	r26, 0xFF	; 255
 33a:	be 4f       	sbci	r27, 0xFE	; 254
 33c:	8c 91       	ld	r24, X
 33e:	86 83       	std	Z+6, r24	; 0x06
	displayBuffer[7] = sevenSeg[playerBTime[3+hmms]];
 340:	d9 01       	movw	r26, r18
 342:	a9 58       	subi	r26, 0x89	; 137
 344:	be 4f       	sbci	r27, 0xFE	; 254
 346:	ac 91       	ld	r26, X
 348:	0a 2e       	mov	r0, r26
 34a:	00 0c       	add	r0, r0
 34c:	bb 0b       	sbc	r27, r27
 34e:	af 5f       	subi	r26, 0xFF	; 255
 350:	be 4f       	sbci	r27, 0xFE	; 254
 352:	8c 91       	ld	r24, X
 354:	87 83       	std	Z+7, r24	; 0x07
}
 356:	08 95       	ret

void write_time(uint8_t edit)
{
	if (hmms) hmms = 2;
	
	if (playerATime[hmms] || edit) displayBuffer[0] = sevenSeg[playerATime[hmms]];
 358:	f9 01       	movw	r30, r18
 35a:	e1 57       	subi	r30, 0x71	; 113
 35c:	fe 4f       	sbci	r31, 0xFE	; 254
 35e:	e0 81       	ld	r30, Z
 360:	0e 2e       	mov	r0, r30
 362:	00 0c       	add	r0, r0
 364:	ff 0b       	sbc	r31, r31
 366:	ef 5f       	subi	r30, 0xFF	; 255
 368:	fe 4f       	sbci	r31, 0xFE	; 254
 36a:	80 81       	ld	r24, Z
 36c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <displayBuffer>
	else                           displayBuffer[0] = 0x00;
	
	if (playerBTime[hmms] || edit) displayBuffer[4] = sevenSeg[playerBTime[hmms]];
 370:	f9 01       	movw	r30, r18
 372:	e9 58       	subi	r30, 0x89	; 137
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	80 81       	ld	r24, Z
 378:	92 cf       	rjmp	.-220    	; 0x29e <write_time+0x62>

0000037a <write_char>:
	displayBuffer[7] = sevenSeg[playerBTime[3+hmms]];
}

void write_char(uint8_t chr, uint8_t pos)
{
	if      (chr >= 65 && chr < 91)  chr -= 55; // uppercase
 37a:	9f eb       	ldi	r25, 0xBF	; 191
 37c:	98 0f       	add	r25, r24
 37e:	9a 31       	cpi	r25, 0x1A	; 26
 380:	18 f4       	brcc	.+6      	; 0x388 <write_char+0xe>
 382:	e9 ec       	ldi	r30, 0xC9	; 201
 384:	e8 0f       	add	r30, r24
 386:	14 c0       	rjmp	.+40     	; 0x3b0 <write_char+0x36>
	else if (chr == ' ')             chr  = 37; // space
 388:	80 32       	cpi	r24, 0x20	; 32
 38a:	79 f0       	breq	.+30     	; 0x3aa <write_char+0x30>
	else if (chr >= 97 && chr < 123) chr -= 87; // lowercase
 38c:	9f e9       	ldi	r25, 0x9F	; 159
 38e:	98 0f       	add	r25, r24
 390:	9a 31       	cpi	r25, 0x1A	; 26
 392:	18 f4       	brcc	.+6      	; 0x39a <write_char+0x20>
 394:	e9 ea       	ldi	r30, 0xA9	; 169
 396:	e8 0f       	add	r30, r24
 398:	0b c0       	rjmp	.+22     	; 0x3b0 <write_char+0x36>
	else if (chr >= 48 && chr < 58)  chr -= 48; // numbers
 39a:	e0 ed       	ldi	r30, 0xD0	; 208
 39c:	e8 0f       	add	r30, r24
 39e:	ea 30       	cpi	r30, 0x0A	; 10
 3a0:	38 f0       	brcs	.+14     	; 0x3b0 <write_char+0x36>
	else if (chr == '?')             chr  = 36;
 3a2:	8f 33       	cpi	r24, 0x3F	; 63
 3a4:	21 f0       	breq	.+8      	; 0x3ae <write_char+0x34>
	else                             chr  = 37;
 3a6:	e5 e2       	ldi	r30, 0x25	; 37
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <write_char+0x36>
}

void write_char(uint8_t chr, uint8_t pos)
{
	if      (chr >= 65 && chr < 91)  chr -= 55; // uppercase
	else if (chr == ' ')             chr  = 37; // space
 3aa:	e5 e2       	ldi	r30, 0x25	; 37
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <write_char+0x36>
	else if (chr >= 97 && chr < 123) chr -= 87; // lowercase
	else if (chr >= 48 && chr < 58)  chr -= 48; // numbers
	else if (chr == '?')             chr  = 36;
 3ae:	e4 e2       	ldi	r30, 0x24	; 36
	else                             chr  = 37;
	
	displayBuffer[pos] = sevenSeg[chr];
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	ef 5f       	subi	r30, 0xFF	; 255
 3b6:	fe 4f       	sbci	r31, 0xFE	; 254
 3b8:	80 81       	ld	r24, Z
 3ba:	fb 01       	movw	r30, r22
 3bc:	e9 57       	subi	r30, 0x79	; 121
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	80 83       	st	Z, r24
 3c2:	08 95       	ret

000003c4 <write_string>:
}

void write_string(const char *str, uint8_t start, uint8_t end)
{
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	8c 01       	movw	r16, r24
 3d2:	c6 2f       	mov	r28, r22
 3d4:	d4 2f       	mov	r29, r20
	uint8_t i;
	char c;
	
	for (i = start; i < end && (c = str[i-start]) != '\0'; i++)
 3d6:	64 17       	cp	r22, r20
 3d8:	e0 f4       	brcc	.+56     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3da:	e6 2e       	mov	r14, r22
 3dc:	f1 2c       	mov	r15, r1
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	88 23       	and	r24, r24
 3e4:	71 f0       	breq	.+28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		write_char(c, i);
 3e6:	6c 2f       	mov	r22, r28
 3e8:	c8 df       	rcall	.-112    	; 0x37a <write_char>
void write_string(const char *str, uint8_t start, uint8_t end)
{
	uint8_t i;
	char c;
	
	for (i = start; i < end && (c = str[i-start]) != '\0'; i++)
 3ea:	cf 5f       	subi	r28, 0xFF	; 255
 3ec:	cd 17       	cp	r28, r29
 3ee:	88 f4       	brcc	.+34     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f0:	ec 2f       	mov	r30, r28
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	ee 19       	sub	r30, r14
 3f6:	ff 09       	sbc	r31, r15
 3f8:	e0 0f       	add	r30, r16
 3fa:	f1 1f       	adc	r31, r17
 3fc:	80 81       	ld	r24, Z
 3fe:	81 11       	cpse	r24, r1
 400:	f2 cf       	rjmp	.-28     	; 0x3e6 <write_string+0x22>
		write_char(c, i);
	
	for (; i < end; i++)
		displayBuffer[i] = 0x00;
 402:	ec 2f       	mov	r30, r28
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	e9 57       	subi	r30, 0x79	; 121
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	10 82       	st	Z, r1
	char c;
	
	for (i = start; i < end && (c = str[i-start]) != '\0'; i++)
		write_char(c, i);
	
	for (; i < end; i++)
 40c:	cf 5f       	subi	r28, 0xFF	; 255
 40e:	cd 17       	cp	r28, r29
 410:	c0 f3       	brcs	.-16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		displayBuffer[i] = 0x00;
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	08 95       	ret

00000420 <write_number_8>:

void write_number_8(uint8_t num, uint8_t start)
{
 420:	df 92       	push	r13
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	00 d0       	rcall	.+0      	; 0x430 <write_number_8+0x10>
 430:	1f 92       	push	r1
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	58 2f       	mov	r21, r24
	const uint8_t factors[3] = {100, 10, 1};
 438:	84 e6       	ldi	r24, 0x64	; 100
 43a:	89 83       	std	Y+1, r24	; 0x01
 43c:	8a e0       	ldi	r24, 0x0A	; 10
 43e:	8a 83       	std	Y+2, r24	; 0x02
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t z = 0;
	
	displayBuffer[start] = 0x00;
 444:	e6 2f       	mov	r30, r22
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	e9 57       	subi	r30, 0x79	; 121
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	10 82       	st	Z, r1
 44e:	de 01       	movw	r26, r28
 450:	11 96       	adiw	r26, 0x01	; 1
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
}

void write_number_8(uint8_t num, uint8_t start)
{
	const uint8_t factors[3] = {100, 10, 1};
	uint8_t z = 0;
 456:	d1 2c       	mov	r13, r1
 458:	06 2f       	mov	r16, r22
 45a:	10 e0       	ldi	r17, 0x00	; 0
		}
		else
		{
			displayBuffer[start+i] = sevenSeg[q];
			num -= q*factors[i-1];
			z = 1;	
 45c:	ff 24       	eor	r15, r15
 45e:	f3 94       	inc	r15
	{
		uint8_t q = num / factors[i-1];
		
		if (q == 0)
		{
			if (z || (i == 3)) displayBuffer[start+i] = sevenSeg[0];	
 460:	0f 2e       	mov	r0, r31
 462:	ff e3       	ldi	r31, 0x3F	; 63
 464:	ef 2e       	mov	r14, r31
 466:	f0 2d       	mov	r31, r0
	
	displayBuffer[start] = 0x00;
	
	for (uint8_t i = 1; i < 4; i++)
	{
		uint8_t q = num / factors[i-1];
 468:	4d 91       	ld	r20, X+
 46a:	2f 5f       	subi	r18, 0xFF	; 255
 46c:	3f 4f       	sbci	r19, 0xFF	; 255
 46e:	85 2f       	mov	r24, r21
 470:	64 2f       	mov	r22, r20
 472:	be d4       	rcall	.+2428   	; 0xdf0 <__udivmodqi4>
		
		if (q == 0)
 474:	81 11       	cpse	r24, r1
 476:	14 c0       	rjmp	.+40     	; 0x4a0 <write_number_8+0x80>
		{
			if (z || (i == 3)) displayBuffer[start+i] = sevenSeg[0];	
 478:	d1 10       	cpse	r13, r1
 47a:	02 c0       	rjmp	.+4      	; 0x480 <write_number_8+0x60>
 47c:	23 30       	cpi	r18, 0x03	; 3
 47e:	41 f4       	brne	.+16     	; 0x490 <write_number_8+0x70>
 480:	c8 01       	movw	r24, r16
 482:	82 0f       	add	r24, r18
 484:	93 1f       	adc	r25, r19
 486:	89 57       	subi	r24, 0x79	; 121
 488:	9e 4f       	sbci	r25, 0xFE	; 254
 48a:	fc 01       	movw	r30, r24
 48c:	e0 82       	st	Z, r14
 48e:	17 c0       	rjmp	.+46     	; 0x4be <write_number_8+0x9e>
 490:	c8 01       	movw	r24, r16
 492:	82 0f       	add	r24, r18
 494:	93 1f       	adc	r25, r19
			else   displayBuffer[start+i] = 0x00;		
 496:	89 57       	subi	r24, 0x79	; 121
 498:	9e 4f       	sbci	r25, 0xFE	; 254
 49a:	fc 01       	movw	r30, r24
 49c:	10 82       	st	Z, r1
 49e:	0f c0       	rjmp	.+30     	; 0x4be <write_number_8+0x9e>
		}
		else
		{
			displayBuffer[start+i] = sevenSeg[q];
 4a0:	e8 2f       	mov	r30, r24
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	ef 5f       	subi	r30, 0xFF	; 255
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	90 81       	ld	r25, Z
 4aa:	f8 01       	movw	r30, r16
 4ac:	e2 0f       	add	r30, r18
 4ae:	f3 1f       	adc	r31, r19
 4b0:	e9 57       	subi	r30, 0x79	; 121
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	90 83       	st	Z, r25
			num -= q*factors[i-1];
 4b6:	48 9f       	mul	r20, r24
 4b8:	50 19       	sub	r21, r0
 4ba:	11 24       	eor	r1, r1
			z = 1;	
 4bc:	df 2c       	mov	r13, r15
	const uint8_t factors[3] = {100, 10, 1};
	uint8_t z = 0;
	
	displayBuffer[start] = 0x00;
	
	for (uint8_t i = 1; i < 4; i++)
 4be:	23 30       	cpi	r18, 0x03	; 3
 4c0:	31 05       	cpc	r19, r1
 4c2:	91 f6       	brne	.-92     	; 0x468 <write_number_8+0x48>
			displayBuffer[start+i] = sevenSeg[q];
			num -= q*factors[i-1];
			z = 1;	
		}			
	}	
}
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	08 95       	ret

000004da <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 4da:	1f 92       	push	r1
 4dc:	0f 92       	push	r0
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	0f 92       	push	r0
 4e2:	11 24       	eor	r1, r1
 4e4:	1f 93       	push	r17
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
	static uint8_t i;
	
	uint8_t dispRows = ~(1<<i); // drive current row low
 502:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
 506:	82 2f       	mov	r24, r18
 508:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t dispCols = displayBuffer[i] & ~(blinkMask[i] & blinkOsc[i]);
 50a:	fc 01       	movw	r30, r24
 50c:	e9 57       	subi	r30, 0x79	; 121
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	d0 81       	ld	r29, Z
 512:	fc 01       	movw	r30, r24
 514:	ec 59       	subi	r30, 0x9C	; 156
 516:	fe 4f       	sbci	r31, 0xFE	; 254
 518:	10 81       	ld	r17, Z
 51a:	fc 01       	movw	r30, r24
 51c:	e4 59       	subi	r30, 0x94	; 148
 51e:	fe 4f       	sbci	r31, 0xFE	; 254
 520:	c0 81       	ld	r28, Z
	
	PORTB &= ~(1<<CS);
 522:	28 98       	cbi	0x05, 0	; 5
	tx_spi(dispRows);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <__stack+0x2f>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	2a 95       	dec	r18
 530:	e2 f7       	brpl	.-8      	; 0x52a <__stack+0x2b>
 532:	80 95       	com	r24
 534:	24 de       	rcall	.-952    	; 0x17e <tx_spi>
	tx_spi(dispCols);
 536:	81 2f       	mov	r24, r17
 538:	8c 23       	and	r24, r28
 53a:	80 95       	com	r24
 53c:	8d 23       	and	r24, r29
 53e:	1f de       	rcall	.-962    	; 0x17e <tx_spi>
	PORTB |= 1<<CS;
 540:	28 9a       	sbi	0x05, 0	; 5
		
	i++;
	i &= 0x07;	
 542:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
 546:	8f 5f       	subi	r24, 0xFF	; 255
 548:	87 70       	andi	r24, 0x07	; 7
 54a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
}
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	1f 91       	pop	r17
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <scan_keys>:
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
}

void scan_keys(void)
{
	lastKeyState = keyState;
 576:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <keyState>
 57a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <lastKeyState>
		
	keyState = KEY_PIN;
 57e:	96 b1       	in	r25, 0x06	; 6
 580:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <keyState>
	uint8_t keyDiff = keyState ^ lastKeyState;
 584:	89 27       	eor	r24, r25
	
	keyPressed = keyDiff & ~keyState;	
 586:	29 2f       	mov	r18, r25
 588:	20 95       	com	r18
 58a:	28 23       	and	r18, r24
 58c:	20 93 a1 01 	sts	0x01A1, r18	; 0x8001a1 <keyPressed>
	keyReleased = keyDiff & keyState;
 590:	89 23       	and	r24, r25
 592:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <keyReleased>
	
	if (~keyState & START_KEY)
 596:	92 fd       	sbrc	r25, 2
 598:	08 c0       	rjmp	.+16     	; 0x5aa <scan_keys+0x34>
	{
		if (holdTimer < holdTimerThreshold) holdTimer++;		
 59a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <holdTimer>
 59e:	8c 33       	cpi	r24, 0x3C	; 60
 5a0:	30 f4       	brcc	.+12     	; 0x5ae <scan_keys+0x38>
 5a2:	8f 5f       	subi	r24, 0xFF	; 255
 5a4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <holdTimer>
 5a8:	08 95       	ret
	}
	else
	{
		holdTimer = 0;
 5aa:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <holdTimer>
 5ae:	08 95       	ret

000005b0 <init_keys>:
uint8_t holdTimer;
const uint8_t holdTimerThreshold=60;

void init_keys(void)
{
	EICRA = 1<<ISC11 | 1<<ISC01; // falling edge
 5b0:	8a e0       	ldi	r24, 0x0A	; 10
 5b2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__EEPROM_REGION_LENGTH__+0x7f0069>
	EIMSK = 1<<INT1 | 1<<INT0;   // enable INT0, INT1
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	8d bb       	out	0x1d, r24	; 29
	PORTD |= 1<<PD2 | 1<<PD3;    // enable pullups
 5ba:	8b b1       	in	r24, 0x0b	; 11
 5bc:	8c 60       	ori	r24, 0x0C	; 12
 5be:	8b b9       	out	0x0b, r24	; 11
	
	KEY_PORT |= KEY_MASK; // enable pullups
 5c0:	88 b1       	in	r24, 0x08	; 8
 5c2:	8f 61       	ori	r24, 0x1F	; 31
 5c4:	88 b9       	out	0x08, r24	; 8
	
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
 5c6:	d7 df       	rcall	.-82     	; 0x576 <scan_keys>
 5c8:	d6 df       	rcall	.-84     	; 0x576 <scan_keys>
 5ca:	08 95       	ret

000005cc <init_timer>:

volatile playerData playerAData, playerBData, *currentPlayerData;

void init_timer(void)
{
	ASSR = 1<<AS2; // enable asynchronous mode
 5cc:	80 e2       	ldi	r24, 0x20	; 32
 5ce:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__EEPROM_REGION_LENGTH__+0x7f00b6>
	
	TCCR2B |= 1<<CS20;         // /1 prescaler
 5d2:	e1 eb       	ldi	r30, 0xB1	; 177
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	81 60       	ori	r24, 0x01	; 1
 5da:	80 83       	st	Z, r24
	while (ASSR & 1<<TCR2BUB); // wait for register update
 5dc:	e6 eb       	ldi	r30, 0xB6	; 182
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	80 fd       	sbrc	r24, 0
 5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <init_timer+0x14>

	TIFR2  = 1<<TOV2;   // clear interrupt flag	
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	87 bb       	out	0x17, r24	; 23
 5ea:	08 95       	ret

000005ec <add_time>:
	//TIMSK2 = 1<<TOIE2;  // enable Timer2 overflow interrupt
}

/* increments baseTime by incTime (ignoring ticks) */
void add_time(volatile gameTime *baseTime, uint8_t incTime)
{
 5ec:	fc 01       	movw	r30, r24
	(*baseTime)[SECONDS] += incTime;
 5ee:	85 81       	ldd	r24, Z+5	; 0x05
 5f0:	68 0f       	add	r22, r24
 5f2:	65 83       	std	Z+5, r22	; 0x05
	
	while ((*baseTime)[SECONDS] > 9) 
 5f4:	85 81       	ldd	r24, Z+5	; 0x05
 5f6:	8a 30       	cpi	r24, 0x0A	; 10
 5f8:	4c f0       	brlt	.+18     	; 0x60c <add_time+0x20>
	{
		(*baseTime)[SECONDS] -= 10;
 5fa:	85 81       	ldd	r24, Z+5	; 0x05
 5fc:	8a 50       	subi	r24, 0x0A	; 10
 5fe:	85 83       	std	Z+5, r24	; 0x05
		(*baseTime)[TEN_SECONDS]++;
 600:	84 81       	ldd	r24, Z+4	; 0x04
 602:	8f 5f       	subi	r24, 0xFF	; 255
 604:	84 83       	std	Z+4, r24	; 0x04
/* increments baseTime by incTime (ignoring ticks) */
void add_time(volatile gameTime *baseTime, uint8_t incTime)
{
	(*baseTime)[SECONDS] += incTime;
	
	while ((*baseTime)[SECONDS] > 9) 
 606:	85 81       	ldd	r24, Z+5	; 0x05
 608:	8a 30       	cpi	r24, 0x0A	; 10
 60a:	bc f7       	brge	.-18     	; 0x5fa <add_time+0xe>
	{
		(*baseTime)[SECONDS] -= 10;
		(*baseTime)[TEN_SECONDS]++;
	}
	
	while ((*baseTime)[TEN_SECONDS] > 5)
 60c:	84 81       	ldd	r24, Z+4	; 0x04
 60e:	86 30       	cpi	r24, 0x06	; 6
 610:	4c f0       	brlt	.+18     	; 0x624 <add_time+0x38>
	{
		(*baseTime)[TEN_SECONDS] -= 6;
 612:	84 81       	ldd	r24, Z+4	; 0x04
 614:	86 50       	subi	r24, 0x06	; 6
 616:	84 83       	std	Z+4, r24	; 0x04
		(*baseTime)[MINUTES]++;
 618:	83 81       	ldd	r24, Z+3	; 0x03
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	83 83       	std	Z+3, r24	; 0x03
	{
		(*baseTime)[SECONDS] -= 10;
		(*baseTime)[TEN_SECONDS]++;
	}
	
	while ((*baseTime)[TEN_SECONDS] > 5)
 61e:	84 81       	ldd	r24, Z+4	; 0x04
 620:	86 30       	cpi	r24, 0x06	; 6
 622:	bc f7       	brge	.-18     	; 0x612 <add_time+0x26>
	{
		(*baseTime)[TEN_SECONDS] -= 6;
		(*baseTime)[MINUTES]++;
	}
	
	while ((*baseTime)[MINUTES] > 9)
 624:	83 81       	ldd	r24, Z+3	; 0x03
 626:	8a 30       	cpi	r24, 0x0A	; 10
 628:	4c f0       	brlt	.+18     	; 0x63c <add_time+0x50>
	{
		(*baseTime)[MINUTES] -= 10;
 62a:	83 81       	ldd	r24, Z+3	; 0x03
 62c:	8a 50       	subi	r24, 0x0A	; 10
 62e:	83 83       	std	Z+3, r24	; 0x03
		(*baseTime)[TEN_MINUTES]++;
 630:	82 81       	ldd	r24, Z+2	; 0x02
 632:	8f 5f       	subi	r24, 0xFF	; 255
 634:	82 83       	std	Z+2, r24	; 0x02
	{
		(*baseTime)[TEN_SECONDS] -= 6;
		(*baseTime)[MINUTES]++;
	}
	
	while ((*baseTime)[MINUTES] > 9)
 636:	83 81       	ldd	r24, Z+3	; 0x03
 638:	8a 30       	cpi	r24, 0x0A	; 10
 63a:	bc f7       	brge	.-18     	; 0x62a <add_time+0x3e>
	{
		(*baseTime)[MINUTES] -= 10;
		(*baseTime)[TEN_MINUTES]++;
	}
	
	while ((*baseTime)[TEN_MINUTES] > 5)
 63c:	82 81       	ldd	r24, Z+2	; 0x02
 63e:	86 30       	cpi	r24, 0x06	; 6
 640:	4c f0       	brlt	.+18     	; 0x654 <add_time+0x68>
	{
		(*baseTime)[TEN_MINUTES] -= 6;
 642:	82 81       	ldd	r24, Z+2	; 0x02
 644:	86 50       	subi	r24, 0x06	; 6
 646:	82 83       	std	Z+2, r24	; 0x02
		(*baseTime)[HOURS]++;
 648:	81 81       	ldd	r24, Z+1	; 0x01
 64a:	8f 5f       	subi	r24, 0xFF	; 255
 64c:	81 83       	std	Z+1, r24	; 0x01
	{
		(*baseTime)[MINUTES] -= 10;
		(*baseTime)[TEN_MINUTES]++;
	}
	
	while ((*baseTime)[TEN_MINUTES] > 5)
 64e:	82 81       	ldd	r24, Z+2	; 0x02
 650:	86 30       	cpi	r24, 0x06	; 6
 652:	bc f7       	brge	.-18     	; 0x642 <add_time+0x56>
	{
		(*baseTime)[TEN_MINUTES] -= 6;
		(*baseTime)[HOURS]++;
	}
	
	while ((*baseTime)[HOURS] > 9)
 654:	81 81       	ldd	r24, Z+1	; 0x01
 656:	8a 30       	cpi	r24, 0x0A	; 10
 658:	4c f0       	brlt	.+18     	; 0x66c <add_time+0x80>
	{
		(*baseTime)[HOURS] -= 10;
 65a:	81 81       	ldd	r24, Z+1	; 0x01
 65c:	8a 50       	subi	r24, 0x0A	; 10
 65e:	81 83       	std	Z+1, r24	; 0x01
		(*baseTime)[TEN_HOURS]++;
 660:	80 81       	ld	r24, Z
 662:	8f 5f       	subi	r24, 0xFF	; 255
 664:	80 83       	st	Z, r24
	{
		(*baseTime)[TEN_MINUTES] -= 6;
		(*baseTime)[HOURS]++;
	}
	
	while ((*baseTime)[HOURS] > 9)
 666:	81 81       	ldd	r24, Z+1	; 0x01
 668:	8a 30       	cpi	r24, 0x0A	; 10
 66a:	bc f7       	brge	.-18     	; 0x65a <add_time+0x6e>
	{
		(*baseTime)[HOURS] -= 10;
		(*baseTime)[TEN_HOURS]++;
	}
	
	if ((*baseTime)[TEN_HOURS] > 9)
 66c:	80 81       	ld	r24, Z
 66e:	8a 30       	cpi	r24, 0x0A	; 10
 670:	3c f0       	brlt	.+14     	; 0x680 <add_time+0x94>
	{
		(*baseTime)[TEN_HOURS]   = 9;
 672:	89 e0       	ldi	r24, 0x09	; 9
 674:	80 83       	st	Z, r24
		(*baseTime)[HOURS]       = 9;
 676:	81 83       	std	Z+1, r24	; 0x01
		(*baseTime)[TEN_MINUTES] = 9;
 678:	82 83       	std	Z+2, r24	; 0x02
		(*baseTime)[MINUTES]     = 9;
 67a:	83 83       	std	Z+3, r24	; 0x03
		(*baseTime)[TEN_SECONDS] = 9;
 67c:	84 83       	std	Z+4, r24	; 0x04
		(*baseTime)[SECONDS]     = 9;
 67e:	85 83       	std	Z+5, r24	; 0x05
 680:	08 95       	ret

00000682 <reset>:
	}
}

void reset(void)
{	
 682:	e7 e9       	ldi	r30, 0x97	; 151
 684:	f1 e0       	ldi	r31, 0x01	; 1
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	90 e0       	ldi	r25, 0x00	; 0
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
	{
		playerATime[i] = gameConfig.initialTime[i];
 68a:	21 91       	ld	r18, Z+
 68c:	dc 01       	movw	r26, r24
 68e:	a1 57       	subi	r26, 0x71	; 113
 690:	be 4f       	sbci	r27, 0xFE	; 254
 692:	2c 93       	st	X, r18
		playerBTime[i] = gameConfig.initialTime[i];
 694:	dc 01       	movw	r26, r24
 696:	a9 58       	subi	r26, 0x89	; 137
 698:	be 4f       	sbci	r27, 0xFE	; 254
 69a:	2c 93       	st	X, r18
 69c:	01 96       	adiw	r24, 0x01	; 1
}

void reset(void)
{	
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
 69e:	86 30       	cpi	r24, 0x06	; 6
 6a0:	91 05       	cpc	r25, r1
 6a2:	99 f7       	brne	.-26     	; 0x68a <reset+0x8>
		playerATime[i] = gameConfig.initialTime[i];
		playerBTime[i] = gameConfig.initialTime[i];
	}

	/* reset ticks */
	playerATicks = 0;
 6a4:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <playerATicks>
	playerBTicks = 0;
 6a8:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <playerBTicks>
	
	/* reset move counts */
	playerAData.moves = 0;
 6ac:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <playerAData+0x1>
 6b0:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <playerAData>
	playerBData.moves = 0;
 6b4:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <playerBData+0x1>
 6b8:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <playerBData>
 6bc:	08 95       	ret

000006be <main>:
}

int main(void)
{	
	init_config();
 6be:	19 d3       	rcall	.+1586   	; 0xcf2 <init_config>
		
	/* default to player A as white/starting */
	
	currentPlayerTicks = &playerATicks;
 6c0:	8d e7       	ldi	r24, 0x7D	; 125
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <currentPlayerTicks+0x1>
 6c8:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <currentPlayerTicks>
	currentPlayerTime = &playerATime;
 6cc:	8f e8       	ldi	r24, 0x8F	; 143
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <currentPlayerTime+0x1>
 6d4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <currentPlayerTime>
	currentPlayerData = &playerAData;
 6d8:	84 ea       	ldi	r24, 0xA4	; 164
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <currentPlayerData+0x1>
 6e0:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <currentPlayerData>
	
	state = IDLE;
 6e4:	85 e0       	ldi	r24, 0x05	; 5
 6e6:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <state>
	
	DDRD |= 1<<PD6 | 1<<PD7;
 6ea:	8a b1       	in	r24, 0x0a	; 10
 6ec:	80 6c       	ori	r24, 0xC0	; 192
 6ee:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PD7);
 6f0:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 1<<PD6;
 6f2:	5e 9a       	sbi	0x0b, 6	; 11
	
	load_config();
 6f4:	2f d3       	rcall	.+1630   	; 0xd54 <load_config>
	
	reset();
 6f6:	c5 df       	rcall	.-118    	; 0x682 <reset>
	
	init_display(deviceConfig.brightness);
 6f8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <deviceConfig>
 6fc:	45 dd       	rcall	.-1398   	; 0x188 <init_display>
	init_keys();
 6fe:	58 df       	rcall	.-336    	; 0x5b0 <init_keys>
	init_timer();
 700:	65 df       	rcall	.-310    	; 0x5cc <init_timer>
	init_sound();
 702:	39 d3       	rcall	.+1650   	; 0xd76 <init_sound>
	
	sei();
 704:	78 94       	sei
#define SCK  PB5
#define MOSI PB3
#define SS   PB2
#define CS   PB0

inline void COLON_ON()  {PORTD |= 1<<PD4;}
 706:	5c 9a       	sbi	0x0b, 4	; 11
	COLON_ON();
	
    while (1) 
    {					
		scan_keys();		
		if ((keyPressed & KEY_MASK) && deviceConfig.soundOn) beep(2);
 708:	ce e7       	ldi	r28, 0x7E	; 126
 70a:	d1 e0       	ldi	r29, 0x01	; 1
			case GAME_FINISHED:
			if (keyPressed & START_KEY)
			{
				reset();
				beep(12);
				state = IDLE;
 70c:	0f 2e       	mov	r0, r31
 70e:	f5 e0       	ldi	r31, 0x05	; 5
 710:	bf 2e       	mov	r11, r31
 712:	f0 2d       	mov	r31, r0
			break;
			
			/* Game paused */
			/* Clock countdown for both players is paused */
			case GAME_PAUSED:
			if (holdTimer >= holdTimerThreshold)
 714:	70 90 27 01 	lds	r7, 0x0127	; 0x800127 <holdTimerThreshold>
				state = IDLE;
				break;	
			}
			else if (keyPressed & START_KEY)
			{
				TIMSK2 = 1<<TOIE2;
 718:	00 e7       	ldi	r16, 0x70	; 112
 71a:	10 e0       	ldi	r17, 0x00	; 0
 71c:	aa 24       	eor	r10, r10
 71e:	a3 94       	inc	r10
				state = GAME_ACTIVE;
 720:	0f 2e       	mov	r0, r31
 722:	f6 e0       	ldi	r31, 0x06	; 6
 724:	8f 2e       	mov	r8, r31
 726:	f0 2d       	mov	r31, r0
			/* Clock is currently counting down */
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
			{
				TIMSK2 = 0x00;
				state = GAME_PAUSED;
 728:	0f 2e       	mov	r0, r31
 72a:	f7 e0       	ldi	r31, 0x07	; 7
 72c:	6f 2e       	mov	r6, r31
 72e:	f0 2d       	mov	r31, r0
				state = IDLE;
				break;
			}
			else if (keyPressed & MODE_KEY)
			{				
				state++;
 730:	0f 2e       	mov	r0, r31
 732:	f3 e0       	ldi	r31, 0x03	; 3
 734:	5f 2e       	mov	r5, r31
 736:	f0 2d       	mov	r31, r0
				else if (gameConfig.delay > 0)  gameConfig.delay -= 1; 	
			}
				
			COLON_OFF();		
			write_string(settingsMenuNames[state], 0, 4);
			write_number_8(gameConfig.delay, 4);
 738:	0f 2e       	mov	r0, r31
 73a:	f7 e9       	ldi	r31, 0x97	; 151
 73c:	ef 2e       	mov	r14, r31
 73e:	f1 e0       	ldi	r31, 0x01	; 1
 740:	ff 2e       	mov	r15, r31
 742:	f0 2d       	mov	r31, r0
			else if (keyPressed & (UP_KEY | DOWN_KEY))
			{
				int8_t timeComponent;
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
 744:	0f 2e       	mov	r0, r31
 746:	f9 e0       	ldi	r31, 0x09	; 9
 748:	4f 2e       	mov	r4, r31
 74a:	f0 2d       	mov	r31, r0
				blinkMask[timeEditCursor+4] = 0x00;
				
				timeEditCursor++;
				timeEditCursor &= 0x03;
				
				blinkMask[timeEditCursor] = 0xFF;
 74c:	99 24       	eor	r9, r9
 74e:	9a 94       	dec	r9
				break;
			}
			else if (keyPressed & TIME_KEY)
			{
				timeEditCursor = 0;
				blinkMask[0] = 0xFF;
 750:	0f 2e       	mov	r0, r31
 752:	f4 e6       	ldi	r31, 0x64	; 100
 754:	cf 2e       	mov	r12, r31
 756:	f1 e0       	ldi	r31, 0x01	; 1
 758:	df 2e       	mov	r13, r31
 75a:	f0 2d       	mov	r31, r0
	
	COLON_ON();
	
    while (1) 
    {					
		scan_keys();		
 75c:	0c df       	rcall	.-488    	; 0x576 <scan_keys>
		if ((keyPressed & KEY_MASK) && deviceConfig.soundOn) beep(2);
 75e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <keyPressed>
 762:	8f 71       	andi	r24, 0x1F	; 31
 764:	29 f0       	breq	.+10     	; 0x770 <main+0xb2>
 766:	89 81       	ldd	r24, Y+1	; 0x01
 768:	88 23       	and	r24, r24
 76a:	11 f0       	breq	.+4      	; 0x770 <main+0xb2>
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	22 d3       	rcall	.+1604   	; 0xdb4 <beep>
		
		switch (state)
 770:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <state>
 774:	8e 2f       	mov	r24, r30
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	89 30       	cpi	r24, 0x09	; 9
 77a:	91 05       	cpc	r25, r1
 77c:	08 f0       	brcs	.+2      	; 0x780 <main+0xc2>
 77e:	bd c1       	rjmp	.+890    	; 0xafa <main+0x43c>
 780:	fc 01       	movw	r30, r24
 782:	e6 5e       	subi	r30, 0xE6	; 230
 784:	ff 4f       	sbci	r31, 0xFF	; 255
 786:	09 94       	ijmp
		{
			/* Idle */
			/* Ready to start a game */
			case IDLE:
			if (keyPressed & START_KEY)
 788:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <keyPressed>
 78c:	82 ff       	sbrs	r24, 2
 78e:	05 c0       	rjmp	.+10     	; 0x79a <main+0xdc>
			{
				TIMSK2 = 1<<TOIE2;
 790:	f8 01       	movw	r30, r16
 792:	a0 82       	st	Z, r10
				
				state = GAME_ACTIVE;
 794:	80 92 ac 01 	sts	0x01AC, r8	; 0x8001ac <state>
				break;
 798:	b0 c1       	rjmp	.+864    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & MODE_KEY)
 79a:	84 ff       	sbrs	r24, 4
 79c:	03 c0       	rjmp	.+6      	; 0x7a4 <main+0xe6>
			{								
				state = EDIT_MODE;
 79e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <state>
				break;
 7a2:	ab c1       	rjmp	.+854    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & TIME_KEY)
 7a4:	83 ff       	sbrs	r24, 3
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <main+0xfc>
			{
				timeEditCursor = 0;
 7a8:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <timeEditCursor>
				blinkMask[0] = 0xFF;
 7ac:	f6 01       	movw	r30, r12
 7ae:	90 82       	st	Z, r9
				blinkMask[4] = 0xFF;
 7b0:	94 82       	std	Z+4, r9	; 0x04
								
				state = EDIT_TIME;
 7b2:	84 e0       	ldi	r24, 0x04	; 4
 7b4:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <state>
				break;
 7b8:	a0 c1       	rjmp	.+832    	; 0xafa <main+0x43c>
 7ba:	5c 9a       	sbi	0x0b, 4	; 11
			}
				
			COLON_ON();		
			write_time(0);
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	3e dd       	rcall	.-1412   	; 0x23c <write_time>
			break;
 7c0:	9c c1       	rjmp	.+824    	; 0xafa <main+0x43c>
			
			/* Time edit mode */
			/* Edit initial time for one or both players */
			case EDIT_TIME:
			if (keyPressed & START_KEY)
 7c2:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <keyPressed>
 7c6:	92 ff       	sbrs	r25, 2
 7c8:	0f c0       	rjmp	.+30     	; 0x7e8 <main+0x12a>
			{
				/* stop blinking */
				blinkMask[timeEditCursor] = 0x00;
 7ca:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <timeEditCursor>
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	fc 01       	movw	r30, r24
 7d2:	ec 59       	subi	r30, 0x9C	; 156
 7d4:	fe 4f       	sbci	r31, 0xFE	; 254
 7d6:	10 82       	st	Z, r1
				blinkMask[timeEditCursor+4] = 0x00;
 7d8:	fc 01       	movw	r30, r24
 7da:	e8 59       	subi	r30, 0x98	; 152
 7dc:	fe 4f       	sbci	r31, 0xFE	; 254
 7de:	10 82       	st	Z, r1
				
				/* save settings */
				store_config();
 7e0:	a8 d2       	rcall	.+1360   	; 0xd32 <store_config>
				
				state = IDLE;
 7e2:	b0 92 ac 01 	sts	0x01AC, r11	; 0x8001ac <state>
				break;	
 7e6:	89 c1       	rjmp	.+786    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & TIME_KEY)
 7e8:	93 ff       	sbrs	r25, 3
 7ea:	1a c0       	rjmp	.+52     	; 0x820 <main+0x162>
			{
				blinkMask[timeEditCursor] = 0x00;
 7ec:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <timeEditCursor>
 7f0:	28 2f       	mov	r18, r24
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	f9 01       	movw	r30, r18
 7f6:	ec 59       	subi	r30, 0x9C	; 156
 7f8:	fe 4f       	sbci	r31, 0xFE	; 254
 7fa:	10 82       	st	Z, r1
				blinkMask[timeEditCursor+4] = 0x00;
 7fc:	f9 01       	movw	r30, r18
 7fe:	e8 59       	subi	r30, 0x98	; 152
 800:	fe 4f       	sbci	r31, 0xFE	; 254
 802:	10 82       	st	Z, r1
				
				timeEditCursor++;
				timeEditCursor &= 0x03;
 804:	8f 5f       	subi	r24, 0xFF	; 255
 806:	83 70       	andi	r24, 0x03	; 3
 808:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <timeEditCursor>
				
				blinkMask[timeEditCursor] = 0xFF;
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	fc 01       	movw	r30, r24
 810:	ec 59       	subi	r30, 0x9C	; 156
 812:	fe 4f       	sbci	r31, 0xFE	; 254
 814:	90 82       	st	Z, r9
				blinkMask[timeEditCursor+4] = 0xFF;
 816:	fc 01       	movw	r30, r24
 818:	e8 59       	subi	r30, 0x98	; 152
 81a:	fe 4f       	sbci	r31, 0xFE	; 254
 81c:	90 82       	st	Z, r9
 81e:	35 c0       	rjmp	.+106    	; 0x88a <main+0x1cc>
			}
			else if (keyPressed & (UP_KEY | DOWN_KEY))
 820:	89 2f       	mov	r24, r25
 822:	83 70       	andi	r24, 0x03	; 3
 824:	91 f1       	breq	.+100    	; 0x88a <main+0x1cc>
			{
				int8_t timeComponent;
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
 826:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <timeEditCursor>
 82a:	80 ff       	sbrs	r24, 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <main+0x174>
 82e:	24 2d       	mov	r18, r4
 830:	01 c0       	rjmp	.+2      	; 0x834 <main+0x176>
			}
			else if (keyPressed & (UP_KEY | DOWN_KEY))
			{
				int8_t timeComponent;
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
 832:	2b 2d       	mov	r18, r11
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
				
				if (keyPressed & UP_KEY)
 834:	90 ff       	sbrs	r25, 0
 836:	11 c0       	rjmp	.+34     	; 0x85a <main+0x19c>
				{
					timeComponent = ++playerATime[timeEditCursor+2];
 838:	e8 2f       	mov	r30, r24
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	ef 56       	subi	r30, 0x6F	; 111
 83e:	fe 4f       	sbci	r31, 0xFE	; 254
 840:	60 81       	ld	r22, Z
 842:	6f 5f       	subi	r22, 0xFF	; 255
 844:	60 83       	st	Z, r22
					if (timeComponent > limit) timeComponent = 0;
 846:	46 2f       	mov	r20, r22
 848:	06 2e       	mov	r0, r22
 84a:	00 0c       	add	r0, r0
 84c:	55 0b       	sbc	r21, r21
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	24 17       	cp	r18, r20
 852:	35 07       	cpc	r19, r21
 854:	64 f4       	brge	.+24     	; 0x86e <main+0x1b0>
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	0a c0       	rjmp	.+20     	; 0x86e <main+0x1b0>
				}
				else
				{
					timeComponent = --playerATime[timeEditCursor+2];
 85a:	e8 2f       	mov	r30, r24
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	ef 56       	subi	r30, 0x6F	; 111
 860:	fe 4f       	sbci	r31, 0xFE	; 254
 862:	60 81       	ld	r22, Z
 864:	61 50       	subi	r22, 0x01	; 1
 866:	60 83       	st	Z, r22
					if (timeComponent < 0) timeComponent = limit;
 868:	66 23       	and	r22, r22
 86a:	0c f4       	brge	.+2      	; 0x86e <main+0x1b0>
 86c:	62 2f       	mov	r22, r18
				}
				
				gameConfig.initialTime[timeEditCursor+2] = timeComponent;
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	02 96       	adiw	r24, 0x02	; 2
 872:	fc 01       	movw	r30, r24
 874:	e9 56       	subi	r30, 0x69	; 105
 876:	fe 4f       	sbci	r31, 0xFE	; 254
 878:	60 83       	st	Z, r22
				
				playerATime[timeEditCursor+2] = timeComponent;
 87a:	fc 01       	movw	r30, r24
 87c:	e1 57       	subi	r30, 0x71	; 113
 87e:	fe 4f       	sbci	r31, 0xFE	; 254
 880:	60 83       	st	Z, r22
				playerBTime[timeEditCursor+2] = timeComponent;
 882:	fc 01       	movw	r30, r24
 884:	e9 58       	subi	r30, 0x89	; 137
 886:	fe 4f       	sbci	r31, 0xFE	; 254
 888:	60 83       	st	Z, r22
 88a:	5c 9a       	sbi	0x0b, 4	; 11
			}
			
			COLON_ON();	
			write_time(1);
 88c:	8a 2d       	mov	r24, r10
 88e:	d6 dc       	rcall	.-1620   	; 0x23c <write_time>
			break;
 890:	34 c1       	rjmp	.+616    	; 0xafa <main+0x43c>
			
			/* Edit game mode */
			/* Select between different clock modes */
			case EDIT_MODE:			
			if (keyPressed & START_KEY)
 892:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <keyPressed>
 896:	82 ff       	sbrs	r24, 2
 898:	04 c0       	rjmp	.+8      	; 0x8a2 <main+0x1e4>
			{
				/* save settings */
				store_config();
 89a:	4b d2       	rcall	.+1174   	; 0xd32 <store_config>
				
				state = IDLE;
 89c:	b0 92 ac 01 	sts	0x01AC, r11	; 0x8001ac <state>
				break;
 8a0:	2c c1       	rjmp	.+600    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & MODE_KEY)
 8a2:	84 ff       	sbrs	r24, 4
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <main+0x1ee>
			{			
				state++;
 8a6:	a0 92 ac 01 	sts	0x01AC, r10	; 0x8001ac <state>
				break;
 8aa:	27 c1       	rjmp	.+590    	; 0xafa <main+0x43c>
			}						
			else if (keyPressed & UP_KEY)
 8ac:	80 ff       	sbrs	r24, 0
 8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <main+0x206>
			{
				gameConfig.gameMode++;
 8b0:	f7 01       	movw	r30, r14
 8b2:	86 81       	ldd	r24, Z+6	; 0x06
 8b4:	8f 5f       	subi	r24, 0xFF	; 255
				if (gameConfig.gameMode > NUM_MODES-1) gameConfig.gameMode = 0;
 8b6:	84 30       	cpi	r24, 0x04	; 4
 8b8:	10 f4       	brcc	.+4      	; 0x8be <main+0x200>
				state++;
				break;
			}						
			else if (keyPressed & UP_KEY)
			{
				gameConfig.gameMode++;
 8ba:	86 83       	std	Z+6, r24	; 0x06
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <main+0x212>
				if (gameConfig.gameMode > NUM_MODES-1) gameConfig.gameMode = 0;
 8be:	f7 01       	movw	r30, r14
 8c0:	16 82       	std	Z+6, r1	; 0x06
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <main+0x212>
			}
			else if (keyPressed & DOWN_KEY)
 8c4:	81 ff       	sbrs	r24, 1
 8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <main+0x212>
			{
				gameConfig.gameMode--;
 8c8:	f7 01       	movw	r30, r14
 8ca:	86 81       	ldd	r24, Z+6	; 0x06
 8cc:	81 50       	subi	r24, 0x01	; 1
 8ce:	86 83       	std	Z+6, r24	; 0x06
inline void COLON_OFF() {PORTD &= ~(1<<PD4);}
 8d0:	5c 98       	cbi	0x0b, 4	; 11
				if (gameConfig.gameMode < 0) gameConfig.gameMode = NUM_MODES-1;
			}
				
			COLON_OFF();		
			write_string(settingsMenuNames[state], 0, 4);		
 8d2:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <state>
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	9c 01       	movw	r18, r24
 8da:	22 0f       	add	r18, r18
 8dc:	33 1f       	adc	r19, r19
 8de:	22 0f       	add	r18, r18
 8e0:	33 1f       	adc	r19, r19
 8e2:	82 0f       	add	r24, r18
 8e4:	93 1f       	adc	r25, r19
 8e6:	44 e0       	ldi	r20, 0x04	; 4
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	82 5b       	subi	r24, 0xB2	; 178
 8ec:	9e 4f       	sbci	r25, 0xFE	; 254
 8ee:	6a dd       	rcall	.-1324   	; 0x3c4 <write_string>
			write_string(gameTypeNames[gameConfig.gameMode], 4, 8);
 8f0:	f7 01       	movw	r30, r14
 8f2:	86 81       	ldd	r24, Z+6	; 0x06
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	9c 01       	movw	r18, r24
 8f8:	22 0f       	add	r18, r18
 8fa:	33 1f       	adc	r19, r19
 8fc:	22 0f       	add	r18, r18
 8fe:	33 1f       	adc	r19, r19
 900:	82 0f       	add	r24, r18
 902:	93 1f       	adc	r25, r19
 904:	48 e0       	ldi	r20, 0x08	; 8
 906:	64 e0       	ldi	r22, 0x04	; 4
 908:	86 5c       	subi	r24, 0xC6	; 198
 90a:	9e 4f       	sbci	r25, 0xFE	; 254
 90c:	5b dd       	rcall	.-1354   	; 0x3c4 <write_string>
			break;
 90e:	f5 c0       	rjmp	.+490    	; 0xafa <main+0x43c>
			
			/* Edit time increment/delay */
			/* Change increment or delay (simple/Bronstein modes) time */
			case EDIT_DELAY:
			if (keyPressed & START_KEY)
 910:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <keyPressed>
 914:	82 ff       	sbrs	r24, 2
 916:	04 c0       	rjmp	.+8      	; 0x920 <main+0x262>
			{
				/* save settings */
				store_config();
 918:	0c d2       	rcall	.+1048   	; 0xd32 <store_config>
				
				state = IDLE;
 91a:	b0 92 ac 01 	sts	0x01AC, r11	; 0x8001ac <state>
				break;
 91e:	ed c0       	rjmp	.+474    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & MODE_KEY)
 920:	84 ff       	sbrs	r24, 4
 922:	04 c0       	rjmp	.+8      	; 0x92c <main+0x26e>
			{		
				state++;
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <state>
				break;
 92a:	e7 c0       	rjmp	.+462    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & UP_KEY)
 92c:	80 ff       	sbrs	r24, 0
 92e:	19 c0       	rjmp	.+50     	; 0x962 <main+0x2a4>
			{
				if      (gameConfig.delay < 20)  gameConfig.delay++;
 930:	f7 01       	movw	r30, r14
 932:	87 81       	ldd	r24, Z+7	; 0x07
 934:	84 31       	cpi	r24, 0x14	; 20
 936:	18 f4       	brcc	.+6      	; 0x93e <main+0x280>
 938:	8f 5f       	subi	r24, 0xFF	; 255
 93a:	87 83       	std	Z+7, r24	; 0x07
 93c:	2c c0       	rjmp	.+88     	; 0x996 <main+0x2d8>
				else if (gameConfig.delay < 45)  gameConfig.delay += 5;
 93e:	8d 32       	cpi	r24, 0x2D	; 45
 940:	20 f4       	brcc	.+8      	; 0x94a <main+0x28c>
 942:	8b 5f       	subi	r24, 0xFB	; 251
 944:	f7 01       	movw	r30, r14
 946:	87 83       	std	Z+7, r24	; 0x07
 948:	26 c0       	rjmp	.+76     	; 0x996 <main+0x2d8>
				else if (gameConfig.delay < 60)  gameConfig.delay += 15; 
 94a:	8c 33       	cpi	r24, 0x3C	; 60
 94c:	20 f4       	brcc	.+8      	; 0x956 <main+0x298>
 94e:	81 5f       	subi	r24, 0xF1	; 241
 950:	f7 01       	movw	r30, r14
 952:	87 83       	std	Z+7, r24	; 0x07
 954:	20 c0       	rjmp	.+64     	; 0x996 <main+0x2d8>
				else if (gameConfig.delay < 180) gameConfig.delay += 30; 	
 956:	84 3b       	cpi	r24, 0xB4	; 180
 958:	f0 f4       	brcc	.+60     	; 0x996 <main+0x2d8>
 95a:	82 5e       	subi	r24, 0xE2	; 226
 95c:	f7 01       	movw	r30, r14
 95e:	87 83       	std	Z+7, r24	; 0x07
 960:	1a c0       	rjmp	.+52     	; 0x996 <main+0x2d8>
			}
			else if (keyPressed & DOWN_KEY)
 962:	81 ff       	sbrs	r24, 1
 964:	18 c0       	rjmp	.+48     	; 0x996 <main+0x2d8>
			{
				if      (gameConfig.delay > 60) gameConfig.delay -= 30;
 966:	f7 01       	movw	r30, r14
 968:	87 81       	ldd	r24, Z+7	; 0x07
 96a:	8d 33       	cpi	r24, 0x3D	; 61
 96c:	18 f0       	brcs	.+6      	; 0x974 <main+0x2b6>
 96e:	8e 51       	subi	r24, 0x1E	; 30
 970:	87 83       	std	Z+7, r24	; 0x07
 972:	11 c0       	rjmp	.+34     	; 0x996 <main+0x2d8>
				else if (gameConfig.delay > 45) gameConfig.delay -= 15;
 974:	8e 32       	cpi	r24, 0x2E	; 46
 976:	20 f0       	brcs	.+8      	; 0x980 <main+0x2c2>
 978:	8f 50       	subi	r24, 0x0F	; 15
 97a:	f7 01       	movw	r30, r14
 97c:	87 83       	std	Z+7, r24	; 0x07
 97e:	0b c0       	rjmp	.+22     	; 0x996 <main+0x2d8>
				else if (gameConfig.delay > 20) gameConfig.delay -= 5;
 980:	85 31       	cpi	r24, 0x15	; 21
 982:	20 f0       	brcs	.+8      	; 0x98c <main+0x2ce>
 984:	85 50       	subi	r24, 0x05	; 5
 986:	f7 01       	movw	r30, r14
 988:	87 83       	std	Z+7, r24	; 0x07
 98a:	05 c0       	rjmp	.+10     	; 0x996 <main+0x2d8>
				else if (gameConfig.delay > 0)  gameConfig.delay -= 1; 	
 98c:	88 23       	and	r24, r24
 98e:	19 f0       	breq	.+6      	; 0x996 <main+0x2d8>
 990:	81 50       	subi	r24, 0x01	; 1
 992:	f7 01       	movw	r30, r14
 994:	87 83       	std	Z+7, r24	; 0x07
 996:	5c 98       	cbi	0x0b, 4	; 11
			}
				
			COLON_OFF();		
			write_string(settingsMenuNames[state], 0, 4);
 998:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <state>
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	9c 01       	movw	r18, r24
 9a0:	22 0f       	add	r18, r18
 9a2:	33 1f       	adc	r19, r19
 9a4:	22 0f       	add	r18, r18
 9a6:	33 1f       	adc	r19, r19
 9a8:	82 0f       	add	r24, r18
 9aa:	93 1f       	adc	r25, r19
 9ac:	44 e0       	ldi	r20, 0x04	; 4
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	82 5b       	subi	r24, 0xB2	; 178
 9b2:	9e 4f       	sbci	r25, 0xFE	; 254
 9b4:	07 dd       	rcall	.-1522   	; 0x3c4 <write_string>
			write_number_8(gameConfig.delay, 4);
 9b6:	64 e0       	ldi	r22, 0x04	; 4
 9b8:	f7 01       	movw	r30, r14
 9ba:	87 81       	ldd	r24, Z+7	; 0x07
 9bc:	31 dd       	rcall	.-1438   	; 0x420 <write_number_8>
			break;
 9be:	9d c0       	rjmp	.+314    	; 0xafa <main+0x43c>
			
			/* Edit display brightness */
			/* Change PWM value */
			case EDIT_BRIGHTNESS:
			if (keyPressed & START_KEY)
 9c0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <keyPressed>
 9c4:	82 ff       	sbrs	r24, 2
 9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <main+0x312>
			{
				/* save settings */
				store_config();
 9c8:	b4 d1       	rcall	.+872    	; 0xd32 <store_config>
				
				state = IDLE;
 9ca:	b0 92 ac 01 	sts	0x01AC, r11	; 0x8001ac <state>
				break;
 9ce:	95 c0       	rjmp	.+298    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & MODE_KEY)
 9d0:	84 ff       	sbrs	r24, 4
 9d2:	03 c0       	rjmp	.+6      	; 0x9da <main+0x31c>
			{				
				state++;
 9d4:	50 92 ac 01 	sts	0x01AC, r5	; 0x8001ac <state>
				break;
 9d8:	90 c0       	rjmp	.+288    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & UP_KEY)
 9da:	80 ff       	sbrs	r24, 0
 9dc:	0a c0       	rjmp	.+20     	; 0x9f2 <main+0x334>
			{
				if (deviceConfig.brightness < 10) deviceConfig.brightness++;
 9de:	88 81       	ld	r24, Y
 9e0:	8a 30       	cpi	r24, 0x0A	; 10
 9e2:	10 f4       	brcc	.+4      	; 0x9e8 <main+0x32a>
 9e4:	8f 5f       	subi	r24, 0xFF	; 255
 9e6:	88 83       	st	Y, r24
				OCR0B = deviceConfig.brightness << 2;	
 9e8:	88 81       	ld	r24, Y
 9ea:	88 0f       	add	r24, r24
 9ec:	88 0f       	add	r24, r24
 9ee:	88 bd       	out	0x28, r24	; 40
 9f0:	0b c0       	rjmp	.+22     	; 0xa08 <main+0x34a>
			}
			else if (keyPressed & DOWN_KEY)
 9f2:	81 ff       	sbrs	r24, 1
 9f4:	09 c0       	rjmp	.+18     	; 0xa08 <main+0x34a>
			{
				if (deviceConfig.brightness > 1) deviceConfig.brightness--;
 9f6:	88 81       	ld	r24, Y
 9f8:	82 30       	cpi	r24, 0x02	; 2
 9fa:	10 f0       	brcs	.+4      	; 0xa00 <main+0x342>
 9fc:	81 50       	subi	r24, 0x01	; 1
 9fe:	88 83       	st	Y, r24
				OCR0B = deviceConfig.brightness << 2;	
 a00:	88 81       	ld	r24, Y
 a02:	88 0f       	add	r24, r24
 a04:	88 0f       	add	r24, r24
 a06:	88 bd       	out	0x28, r24	; 40
 a08:	5c 98       	cbi	0x0b, 4	; 11
			}
			
			COLON_OFF();
			write_string(settingsMenuNames[state], 0, 4);
 a0a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <state>
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	9c 01       	movw	r18, r24
 a12:	22 0f       	add	r18, r18
 a14:	33 1f       	adc	r19, r19
 a16:	22 0f       	add	r18, r18
 a18:	33 1f       	adc	r19, r19
 a1a:	82 0f       	add	r24, r18
 a1c:	93 1f       	adc	r25, r19
 a1e:	44 e0       	ldi	r20, 0x04	; 4
 a20:	60 e0       	ldi	r22, 0x00	; 0
 a22:	82 5b       	subi	r24, 0xB2	; 178
 a24:	9e 4f       	sbci	r25, 0xFE	; 254
 a26:	ce dc       	rcall	.-1636   	; 0x3c4 <write_string>
			write_number_8(deviceConfig.brightness, 4);
 a28:	64 e0       	ldi	r22, 0x04	; 4
 a2a:	88 81       	ld	r24, Y
 a2c:	f9 dc       	rcall	.-1550   	; 0x420 <write_number_8>
			break;
 a2e:	65 c0       	rjmp	.+202    	; 0xafa <main+0x43c>
			
			/* Edit sound */
			/* Turn sound on or off */
			case EDIT_SOUND:
			if (keyPressed & START_KEY)
 a30:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <keyPressed>
 a34:	82 ff       	sbrs	r24, 2
 a36:	04 c0       	rjmp	.+8      	; 0xa40 <main+0x382>
			{
				/* save settings */
				store_config();
 a38:	7c d1       	rcall	.+760    	; 0xd32 <store_config>
				
				state = IDLE;
 a3a:	b0 92 ac 01 	sts	0x01AC, r11	; 0x8001ac <state>
				break;
 a3e:	5d c0       	rjmp	.+186    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & MODE_KEY)
 a40:	84 ff       	sbrs	r24, 4
 a42:	03 c0       	rjmp	.+6      	; 0xa4a <main+0x38c>
			{				
				state = EDIT_MODE; // wrap around after last setting in list
 a44:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <state>
				break;
 a48:	58 c0       	rjmp	.+176    	; 0xafa <main+0x43c>
			}
			else if (keyPressed & (UP_KEY | DOWN_KEY))
 a4a:	83 70       	andi	r24, 0x03	; 3
 a4c:	31 f0       	breq	.+12     	; 0xa5a <main+0x39c>
			{
				deviceConfig.soundOn++;	
				deviceConfig.soundOn &= 0x01;
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
 a50:	8f 5f       	subi	r24, 0xFF	; 255
 a52:	81 70       	andi	r24, 0x01	; 1
 a54:	89 83       	std	Y+1, r24	; 0x01
				beep(2); // extra beep required here as sound was disabled at top of loop	
 a56:	82 e0       	ldi	r24, 0x02	; 2
 a58:	ad d1       	rcall	.+858    	; 0xdb4 <beep>
 a5a:	5c 98       	cbi	0x0b, 4	; 11
			}
			
			COLON_OFF();
			write_string(settingsMenuNames[state], 0, 4);
 a5c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <state>
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	9c 01       	movw	r18, r24
 a64:	22 0f       	add	r18, r18
 a66:	33 1f       	adc	r19, r19
 a68:	22 0f       	add	r18, r18
 a6a:	33 1f       	adc	r19, r19
 a6c:	82 0f       	add	r24, r18
 a6e:	93 1f       	adc	r25, r19
 a70:	44 e0       	ldi	r20, 0x04	; 4
 a72:	60 e0       	ldi	r22, 0x00	; 0
 a74:	82 5b       	subi	r24, 0xB2	; 178
 a76:	9e 4f       	sbci	r25, 0xFE	; 254
 a78:	a5 dc       	rcall	.-1718   	; 0x3c4 <write_string>
			write_string(offOnStrings[deviceConfig.soundOn], 4, 8);
 a7a:	89 81       	ldd	r24, Y+1	; 0x01
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	9c 01       	movw	r18, r24
 a80:	22 0f       	add	r18, r18
 a82:	33 1f       	adc	r19, r19
 a84:	22 0f       	add	r18, r18
 a86:	33 1f       	adc	r19, r19
 a88:	82 0f       	add	r24, r18
 a8a:	93 1f       	adc	r25, r19
 a8c:	48 e0       	ldi	r20, 0x08	; 8
 a8e:	64 e0       	ldi	r22, 0x04	; 4
 a90:	80 5d       	subi	r24, 0xD0	; 208
 a92:	9e 4f       	sbci	r25, 0xFE	; 254
 a94:	97 dc       	rcall	.-1746   	; 0x3c4 <write_string>
			break;
 a96:	31 c0       	rjmp	.+98     	; 0xafa <main+0x43c>
			
			/* Game active */
			/* Clock is currently counting down */
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
 a98:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <keyPressed>
 a9c:	82 ff       	sbrs	r24, 2
 a9e:	05 c0       	rjmp	.+10     	; 0xaaa <main+0x3ec>
			{
				TIMSK2 = 0x00;
 aa0:	f8 01       	movw	r30, r16
 aa2:	10 82       	st	Z, r1
				state = GAME_PAUSED;
 aa4:	60 92 ac 01 	sts	0x01AC, r6	; 0x8001ac <state>
				break;	
 aa8:	28 c0       	rjmp	.+80     	; 0xafa <main+0x43c>
#define SCK  PB5
#define MOSI PB3
#define SS   PB2
#define CS   PB0

inline void COLON_ON()  {PORTD |= 1<<PD4;}
 aaa:	5c 9a       	sbi	0x0b, 4	; 11
			}
			
			COLON_ON();
			write_time(0);
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	c6 db       	rcall	.-2164   	; 0x23c <write_time>
			break;
 ab0:	24 c0       	rjmp	.+72     	; 0xafa <main+0x43c>
			
			/* Game paused */
			/* Clock countdown for both players is paused */
			case GAME_PAUSED:
			if (holdTimer >= holdTimerThreshold)
 ab2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <holdTimer>
 ab6:	87 15       	cp	r24, r7
 ab8:	30 f0       	brcs	.+12     	; 0xac6 <main+0x408>
			{				
				reset();
 aba:	e3 dd       	rcall	.-1082   	; 0x682 <reset>
				beep(12);
 abc:	8c e0       	ldi	r24, 0x0C	; 12
 abe:	7a d1       	rcall	.+756    	; 0xdb4 <beep>
				state = IDLE;
 ac0:	b0 92 ac 01 	sts	0x01AC, r11	; 0x8001ac <state>
				break;	
 ac4:	1a c0       	rjmp	.+52     	; 0xafa <main+0x43c>
			}
			else if (keyPressed & START_KEY)
 ac6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <keyPressed>
 aca:	82 ff       	sbrs	r24, 2
 acc:	05 c0       	rjmp	.+10     	; 0xad8 <main+0x41a>
			{
				TIMSK2 = 1<<TOIE2;
 ace:	f8 01       	movw	r30, r16
 ad0:	a0 82       	st	Z, r10
				state = GAME_ACTIVE;
 ad2:	80 92 ac 01 	sts	0x01AC, r8	; 0x8001ac <state>
				break;
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <main+0x43c>
 ad8:	5c 9a       	sbi	0x0b, 4	; 11
			}
			
			COLON_ON();
			write_time(0);
 ada:	80 e0       	ldi	r24, 0x00	; 0
 adc:	af db       	rcall	.-2210   	; 0x23c <write_time>
			break;
 ade:	0d c0       	rjmp	.+26     	; 0xafa <main+0x43c>
			
			/* Game finished */
			/* One player's time has run out */
			case GAME_FINISHED:
			if (keyPressed & START_KEY)
 ae0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <keyPressed>
 ae4:	82 ff       	sbrs	r24, 2
 ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <main+0x436>
			{
				reset();
 ae8:	cc dd       	rcall	.-1128   	; 0x682 <reset>
				beep(12);
 aea:	8c e0       	ldi	r24, 0x0C	; 12
 aec:	63 d1       	rcall	.+710    	; 0xdb4 <beep>
				state = IDLE;
 aee:	b0 92 ac 01 	sts	0x01AC, r11	; 0x8001ac <state>
				break;
 af2:	03 c0       	rjmp	.+6      	; 0xafa <main+0x43c>
 af4:	5c 9a       	sbi	0x0b, 4	; 11
			}
			
			COLON_ON();
			write_time(0);
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	a1 db       	rcall	.-2238   	; 0x23c <write_time>
			break;
		}
							
		update_blink();
 afa:	89 db       	rcall	.-2286   	; 0x20e <update_blink>
		update_beep();
 afc:	50 d1       	rcall	.+672    	; 0xd9e <update_beep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 afe:	8f e2       	ldi	r24, 0x2F	; 47
 b00:	95 e7       	ldi	r25, 0x75	; 117
 b02:	01 97       	sbiw	r24, 0x01	; 1
 b04:	f1 f7       	brne	.-4      	; 0xb02 <main+0x444>
 b06:	00 c0       	rjmp	.+0      	; 0xb08 <main+0x44a>
 b08:	00 00       	nop
 b0a:	28 ce       	rjmp	.-944    	; 0x75c <main+0x9e>

00000b0c <__vector_1>:
    }
}

/* Player A's button */
ISR(INT0_vect) 
{	
 b0c:	1f 92       	push	r1
 b0e:	0f 92       	push	r0
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	0f 92       	push	r0
 b14:	11 24       	eor	r1, r1
 b16:	2f 93       	push	r18
 b18:	3f 93       	push	r19
 b1a:	4f 93       	push	r20
 b1c:	5f 93       	push	r21
 b1e:	6f 93       	push	r22
 b20:	7f 93       	push	r23
 b22:	8f 93       	push	r24
 b24:	9f 93       	push	r25
 b26:	af 93       	push	r26
 b28:	bf 93       	push	r27
 b2a:	ef 93       	push	r30
 b2c:	ff 93       	push	r31
	switch (state)
 b2e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <state>
 b32:	86 30       	cpi	r24, 0x06	; 6
 b34:	81 f4       	brne	.+32     	; 0xb56 <__vector_1+0x4a>
	{
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerATime)
 b36:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <currentPlayerTime>
 b3a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <currentPlayerTime+0x1>
 b3e:	8f 58       	subi	r24, 0x8F	; 143
 b40:	91 40       	sbci	r25, 0x01	; 1
 b42:	49 f4       	brne	.+18     	; 0xb56 <__vector_1+0x4a>
		{
			switch (gameConfig.gameMode)
 b44:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <gameConfig+0x6>
 b48:	81 30       	cpi	r24, 0x01	; 1
 b4a:	29 f4       	brne	.+10     	; 0xb56 <__vector_1+0x4a>
				case SIMPLE:
				
				break;
				
				case INCREMENT:
				add_time(currentPlayerTime, gameConfig.delay);
 b4c:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <gameConfig+0x7>
 b50:	8f e8       	ldi	r24, 0x8F	; 143
 b52:	91 e0       	ldi	r25, 0x01	; 1
 b54:	4b dd       	rcall	.-1386   	; 0x5ec <add_time>
		
		default:			
		break;
	}
	
	currentPlayerTime  = &playerBTime; // start decrementing other player's time instead
 b56:	87 e7       	ldi	r24, 0x77	; 119
 b58:	91 e0       	ldi	r25, 0x01	; 1
 b5a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <currentPlayerTime+0x1>
 b5e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <currentPlayerTime>
	currentPlayerTicks = &playerBTicks;
 b62:	86 e7       	ldi	r24, 0x76	; 118
 b64:	91 e0       	ldi	r25, 0x01	; 1
 b66:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <currentPlayerTicks+0x1>
 b6a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <currentPlayerTicks>
		
	PORTD |= 1<<PD7;
 b6e:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD &= ~(1<<PD6);	
 b70:	5e 98       	cbi	0x0b, 6	; 11
}
 b72:	ff 91       	pop	r31
 b74:	ef 91       	pop	r30
 b76:	bf 91       	pop	r27
 b78:	af 91       	pop	r26
 b7a:	9f 91       	pop	r25
 b7c:	8f 91       	pop	r24
 b7e:	7f 91       	pop	r23
 b80:	6f 91       	pop	r22
 b82:	5f 91       	pop	r21
 b84:	4f 91       	pop	r20
 b86:	3f 91       	pop	r19
 b88:	2f 91       	pop	r18
 b8a:	0f 90       	pop	r0
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	0f 90       	pop	r0
 b90:	1f 90       	pop	r1
 b92:	18 95       	reti

00000b94 <__vector_2>:

/* Player B's button */
ISR(INT1_vect)
{
 b94:	1f 92       	push	r1
 b96:	0f 92       	push	r0
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	0f 92       	push	r0
 b9c:	11 24       	eor	r1, r1
 b9e:	2f 93       	push	r18
 ba0:	3f 93       	push	r19
 ba2:	4f 93       	push	r20
 ba4:	5f 93       	push	r21
 ba6:	6f 93       	push	r22
 ba8:	7f 93       	push	r23
 baa:	8f 93       	push	r24
 bac:	9f 93       	push	r25
 bae:	af 93       	push	r26
 bb0:	bf 93       	push	r27
 bb2:	ef 93       	push	r30
 bb4:	ff 93       	push	r31
	switch (state)
 bb6:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <state>
 bba:	86 30       	cpi	r24, 0x06	; 6
 bbc:	81 f4       	brne	.+32     	; 0xbde <__vector_2+0x4a>
	{		
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerBTime)
 bbe:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <currentPlayerTime>
 bc2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <currentPlayerTime+0x1>
 bc6:	87 57       	subi	r24, 0x77	; 119
 bc8:	91 40       	sbci	r25, 0x01	; 1
 bca:	49 f4       	brne	.+18     	; 0xbde <__vector_2+0x4a>
		{			
			switch (gameConfig.gameMode)
 bcc:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <gameConfig+0x6>
 bd0:	81 30       	cpi	r24, 0x01	; 1
 bd2:	29 f4       	brne	.+10     	; 0xbde <__vector_2+0x4a>
				case SIMPLE:
				
				break;
			
				case INCREMENT:
				add_time(currentPlayerTime, gameConfig.delay);
 bd4:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <gameConfig+0x7>
 bd8:	87 e7       	ldi	r24, 0x77	; 119
 bda:	91 e0       	ldi	r25, 0x01	; 1
 bdc:	07 dd       	rcall	.-1522   	; 0x5ec <add_time>
		
		default:
		break;
	}
	
	currentPlayerTime  = &playerATime; // start decrementing other player's time instead	
 bde:	8f e8       	ldi	r24, 0x8F	; 143
 be0:	91 e0       	ldi	r25, 0x01	; 1
 be2:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <currentPlayerTime+0x1>
 be6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <currentPlayerTime>
	currentPlayerTicks = &playerATicks;
 bea:	8d e7       	ldi	r24, 0x7D	; 125
 bec:	91 e0       	ldi	r25, 0x01	; 1
 bee:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <currentPlayerTicks+0x1>
 bf2:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <currentPlayerTicks>
		
	PORTD |= 1<<PD6;
 bf6:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD &= ~(1<<PD7);
 bf8:	5f 98       	cbi	0x0b, 7	; 11
}
 bfa:	ff 91       	pop	r31
 bfc:	ef 91       	pop	r30
 bfe:	bf 91       	pop	r27
 c00:	af 91       	pop	r26
 c02:	9f 91       	pop	r25
 c04:	8f 91       	pop	r24
 c06:	7f 91       	pop	r23
 c08:	6f 91       	pop	r22
 c0a:	5f 91       	pop	r21
 c0c:	4f 91       	pop	r20
 c0e:	3f 91       	pop	r19
 c10:	2f 91       	pop	r18
 c12:	0f 90       	pop	r0
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	0f 90       	pop	r0
 c18:	1f 90       	pop	r1
 c1a:	18 95       	reti

00000c1c <__vector_9>:

/* TODO: implement simple/Bronstein delay by decrementing delay time in addition to/as well as current player time */
ISR(TIMER2_OVF_vect)
{	
 c1c:	1f 92       	push	r1
 c1e:	0f 92       	push	r0
 c20:	0f b6       	in	r0, 0x3f	; 63
 c22:	0f 92       	push	r0
 c24:	11 24       	eor	r1, r1
 c26:	8f 93       	push	r24
 c28:	ef 93       	push	r30
 c2a:	ff 93       	push	r31
	if (++(*currentPlayerTicks) > 127)
 c2c:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <currentPlayerTicks>
 c30:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <currentPlayerTicks+0x1>
 c34:	80 81       	ld	r24, Z
 c36:	8f 5f       	subi	r24, 0xFF	; 255
 c38:	80 83       	st	Z, r24
 c3a:	88 23       	and	r24, r24
 c3c:	0c f0       	brlt	.+2      	; 0xc40 <__vector_9+0x24>
 c3e:	51 c0       	rjmp	.+162    	; 0xce2 <__vector_9+0xc6>
	{
		*currentPlayerTicks = 0;
 c40:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <currentPlayerTicks>
 c44:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <currentPlayerTicks+0x1>
 c48:	10 82       	st	Z, r1
		
		if (--(*currentPlayerTime)[SECONDS] < 0)
 c4a:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <currentPlayerTime>
 c4e:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <currentPlayerTime+0x1>
 c52:	85 81       	ldd	r24, Z+5	; 0x05
 c54:	81 50       	subi	r24, 0x01	; 1
 c56:	85 83       	std	Z+5, r24	; 0x05
 c58:	88 23       	and	r24, r24
 c5a:	0c f0       	brlt	.+2      	; 0xc5e <__vector_9+0x42>
 c5c:	42 c0       	rjmp	.+132    	; 0xce2 <__vector_9+0xc6>
		{
			(*currentPlayerTime)[SECONDS] = 9;
 c5e:	89 e0       	ldi	r24, 0x09	; 9
 c60:	85 83       	std	Z+5, r24	; 0x05
		
			if (--(*currentPlayerTime)[TEN_SECONDS] < 0)
 c62:	84 81       	ldd	r24, Z+4	; 0x04
 c64:	81 50       	subi	r24, 0x01	; 1
 c66:	84 83       	std	Z+4, r24	; 0x04
 c68:	88 23       	and	r24, r24
 c6a:	dc f5       	brge	.+118    	; 0xce2 <__vector_9+0xc6>
			{
				(*currentPlayerTime)[TEN_SECONDS] = 5;
 c6c:	85 e0       	ldi	r24, 0x05	; 5
 c6e:	84 83       	std	Z+4, r24	; 0x04
			
				if (--(*currentPlayerTime)[MINUTES] < 0)
 c70:	83 81       	ldd	r24, Z+3	; 0x03
 c72:	81 50       	subi	r24, 0x01	; 1
 c74:	83 83       	std	Z+3, r24	; 0x03
 c76:	88 23       	and	r24, r24
 c78:	a4 f5       	brge	.+104    	; 0xce2 <__vector_9+0xc6>
				{
					(*currentPlayerTime)[MINUTES] = 9;
 c7a:	89 e0       	ldi	r24, 0x09	; 9
 c7c:	83 83       	std	Z+3, r24	; 0x03
				
					if (--(*currentPlayerTime)[TEN_MINUTES] < 0)
 c7e:	82 81       	ldd	r24, Z+2	; 0x02
 c80:	81 50       	subi	r24, 0x01	; 1
 c82:	82 83       	std	Z+2, r24	; 0x02
 c84:	88 23       	and	r24, r24
 c86:	6c f5       	brge	.+90     	; 0xce2 <__vector_9+0xc6>
					{					
						(*currentPlayerTime)[TEN_MINUTES] = 5;
 c88:	85 e0       	ldi	r24, 0x05	; 5
 c8a:	82 83       	std	Z+2, r24	; 0x02
					
						if (--(*currentPlayerTime)[HOURS] < 0)
 c8c:	81 81       	ldd	r24, Z+1	; 0x01
 c8e:	81 50       	subi	r24, 0x01	; 1
 c90:	81 83       	std	Z+1, r24	; 0x01
 c92:	88 23       	and	r24, r24
 c94:	34 f5       	brge	.+76     	; 0xce2 <__vector_9+0xc6>
						{
							(*currentPlayerTime)[HOURS] = 9;
 c96:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <currentPlayerTime>
 c9a:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <currentPlayerTime+0x1>
 c9e:	89 e0       	ldi	r24, 0x09	; 9
 ca0:	81 83       	std	Z+1, r24	; 0x01
						
							if(--(*currentPlayerTime)[TEN_HOURS] < 0)
 ca2:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <currentPlayerTime>
 ca6:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <currentPlayerTime+0x1>
 caa:	80 81       	ld	r24, Z
 cac:	81 50       	subi	r24, 0x01	; 1
 cae:	80 83       	st	Z, r24
 cb0:	88 23       	and	r24, r24
 cb2:	bc f4       	brge	.+46     	; 0xce2 <__vector_9+0xc6>
							{
								(*currentPlayerTime)[TEN_HOURS]   = 0;
 cb4:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <currentPlayerTime>
 cb8:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <currentPlayerTime+0x1>
 cbc:	10 82       	st	Z, r1
								(*currentPlayerTime)[HOURS]       = 0;
 cbe:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <currentPlayerTime>
 cc2:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <currentPlayerTime+0x1>
 cc6:	11 82       	std	Z+1, r1	; 0x01
								(*currentPlayerTime)[TEN_MINUTES] = 0;
 cc8:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <currentPlayerTime>
 ccc:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <currentPlayerTime+0x1>
 cd0:	12 82       	std	Z+2, r1	; 0x02
								(*currentPlayerTime)[MINUTES]     = 0;
 cd2:	13 82       	std	Z+3, r1	; 0x03
								(*currentPlayerTime)[TEN_SECONDS] = 0;
 cd4:	14 82       	std	Z+4, r1	; 0x04
								(*currentPlayerTime)[SECONDS]     = 0;	
 cd6:	15 82       	std	Z+5, r1	; 0x05
								
								TIMSK2 = 0x00; // disable further ticks
 cd8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__EEPROM_REGION_LENGTH__+0x7f0070>
								state = GAME_FINISHED;
 cdc:	88 e0       	ldi	r24, 0x08	; 8
 cde:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <state>
				}
			}
		}
	}		
	
}
 ce2:	ff 91       	pop	r31
 ce4:	ef 91       	pop	r30
 ce6:	8f 91       	pop	r24
 ce8:	0f 90       	pop	r0
 cea:	0f be       	out	0x3f, r0	; 63
 cec:	0f 90       	pop	r0
 cee:	1f 90       	pop	r1
 cf0:	18 95       	reti

00000cf2 <init_config>:
	3
};

void init_config()
{
	gameConfig = blitz3plus2Config;
 cf2:	88 e0       	ldi	r24, 0x08	; 8
 cf4:	e8 e2       	ldi	r30, 0x28	; 40
 cf6:	f1 e0       	ldi	r31, 0x01	; 1
 cf8:	a7 e9       	ldi	r26, 0x97	; 151
 cfa:	b1 e0       	ldi	r27, 0x01	; 1
 cfc:	01 90       	ld	r0, Z+
 cfe:	0d 92       	st	X+, r0
 d00:	8a 95       	dec	r24
 d02:	e1 f7       	brne	.-8      	; 0xcfc <init_config+0xa>
	deviceConfiguration dc = {5, 1};
	deviceConfig = dc;
 d04:	ee e7       	ldi	r30, 0x7E	; 126
 d06:	f1 e0       	ldi	r31, 0x01	; 1
 d08:	85 e0       	ldi	r24, 0x05	; 5
 d0a:	80 83       	st	Z, r24
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	81 83       	std	Z+1, r24	; 0x01
	
	cli();
 d10:	f8 94       	cli
	eeprom_update_block((const void *)&gameConfig, (void *)0, sizeof(gameConfiguration));
 d12:	48 e0       	ldi	r20, 0x08	; 8
 d14:	50 e0       	ldi	r21, 0x00	; 0
 d16:	60 e0       	ldi	r22, 0x00	; 0
 d18:	70 e0       	ldi	r23, 0x00	; 0
 d1a:	87 e9       	ldi	r24, 0x97	; 151
 d1c:	91 e0       	ldi	r25, 0x01	; 1
 d1e:	84 d0       	rcall	.+264    	; 0xe28 <eeprom_update_block>
	eeprom_update_block((const void *)&deviceConfig, (void *)256, sizeof(deviceConfiguration));
 d20:	42 e0       	ldi	r20, 0x02	; 2
 d22:	50 e0       	ldi	r21, 0x00	; 0
 d24:	60 e0       	ldi	r22, 0x00	; 0
 d26:	71 e0       	ldi	r23, 0x01	; 1
 d28:	8e e7       	ldi	r24, 0x7E	; 126
 d2a:	91 e0       	ldi	r25, 0x01	; 1
 d2c:	7d d0       	rcall	.+250    	; 0xe28 <eeprom_update_block>
	sei();
 d2e:	78 94       	sei
 d30:	08 95       	ret

00000d32 <store_config>:
}

void store_config()
{
	cli();	
 d32:	f8 94       	cli
	eeprom_update_block((const void *)&gameConfig, (void *)0, sizeof(gameConfiguration));
 d34:	48 e0       	ldi	r20, 0x08	; 8
 d36:	50 e0       	ldi	r21, 0x00	; 0
 d38:	60 e0       	ldi	r22, 0x00	; 0
 d3a:	70 e0       	ldi	r23, 0x00	; 0
 d3c:	87 e9       	ldi	r24, 0x97	; 151
 d3e:	91 e0       	ldi	r25, 0x01	; 1
 d40:	73 d0       	rcall	.+230    	; 0xe28 <eeprom_update_block>
	eeprom_update_block((const void *)&deviceConfig, (void *)256, sizeof(deviceConfiguration));	
 d42:	42 e0       	ldi	r20, 0x02	; 2
 d44:	50 e0       	ldi	r21, 0x00	; 0
 d46:	60 e0       	ldi	r22, 0x00	; 0
 d48:	71 e0       	ldi	r23, 0x01	; 1
 d4a:	8e e7       	ldi	r24, 0x7E	; 126
 d4c:	91 e0       	ldi	r25, 0x01	; 1
 d4e:	6c d0       	rcall	.+216    	; 0xe28 <eeprom_update_block>
	sei();	
 d50:	78 94       	sei
 d52:	08 95       	ret

00000d54 <load_config>:
}

void load_config()
{
	cli();	
 d54:	f8 94       	cli
	eeprom_read_block((void *)&gameConfig, (const void *)0, sizeof(gameConfiguration));	
 d56:	48 e0       	ldi	r20, 0x08	; 8
 d58:	50 e0       	ldi	r21, 0x00	; 0
 d5a:	60 e0       	ldi	r22, 0x00	; 0
 d5c:	70 e0       	ldi	r23, 0x00	; 0
 d5e:	87 e9       	ldi	r24, 0x97	; 151
 d60:	91 e0       	ldi	r25, 0x01	; 1
 d62:	52 d0       	rcall	.+164    	; 0xe08 <eeprom_read_block>
	eeprom_read_block((void *)&deviceConfig, (const void *)256, sizeof(deviceConfiguration));
 d64:	42 e0       	ldi	r20, 0x02	; 2
 d66:	50 e0       	ldi	r21, 0x00	; 0
 d68:	60 e0       	ldi	r22, 0x00	; 0
 d6a:	71 e0       	ldi	r23, 0x01	; 1
 d6c:	8e e7       	ldi	r24, 0x7E	; 126
 d6e:	91 e0       	ldi	r25, 0x01	; 1
 d70:	4b d0       	rcall	.+150    	; 0xe08 <eeprom_read_block>
	sei();
 d72:	78 94       	sei
 d74:	08 95       	ret

00000d76 <init_sound>:
	189,178,168,158,149,141,133,126,118,112,105,99,94,88,83,79
};

void init_sound(void)
{
	DDRB |= 1<<PB1 | 1<<PB2; // OC1A, OC1B
 d76:	84 b1       	in	r24, 0x04	; 4
 d78:	86 60       	ori	r24, 0x06	; 6
 d7a:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = 1<<COM1A1 | 1<<COM1B1 | 1<<COM1B0 | 1<<WGM11; // fast PWM, TOP = ICR1	
 d7c:	82 eb       	ldi	r24, 0xB2	; 178
 d7e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	TCCR1B = 1<<WGM13 | 1<<WGM12 | 1<<CS11;	               // /8 prescaler		
 d82:	8a e1       	ldi	r24, 0x1A	; 26
 d84:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
		
	beepTimer = 0;
 d88:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <beepTimer>
	beepFreq = pgm_read_word(&notes[72]); 
 d8c:	e6 ed       	ldi	r30, 0xD6	; 214
 d8e:	f0 e0       	ldi	r31, 0x00	; 0
 d90:	85 91       	lpm	r24, Z+
 d92:	94 91       	lpm	r25, Z
 d94:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <beepFreq+0x1>
 d98:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <beepFreq>
 d9c:	08 95       	ret

00000d9e <update_beep>:
}

void update_beep(void)
{	
	if (beepTimer > 0) beepTimer--;
 d9e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <beepTimer>
 da2:	88 23       	and	r24, r24
 da4:	21 f0       	breq	.+8      	; 0xdae <update_beep+0x10>
 da6:	81 50       	subi	r24, 0x01	; 1
 da8:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <beepTimer>
 dac:	08 95       	ret
	else               TCCR1B = 0x00;		
 dae:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
 db2:	08 95       	ret

00000db4 <beep>:
}

void beep(uint8_t length)
{
	ICR1 = beepFreq;               // for some reason this can't be set just in the init function
 db4:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <beepFreq>
 db8:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <beepFreq+0x1>
 dbc:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
 dc0:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
	OCR1A = OCR1B = beepFreq >> 2; // 25% duty cycle
 dc4:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <beepFreq>
 dc8:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <beepFreq+0x1>
 dcc:	36 95       	lsr	r19
 dce:	27 95       	ror	r18
 dd0:	36 95       	lsr	r19
 dd2:	27 95       	ror	r18
 dd4:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
 dd8:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
 ddc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 de0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	beepTimer = length;
 de4:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <beepTimer>
	TCCR1B = 1<<WGM13 | 1<<WGM12 | 1<<CS11;
 de8:	8a e1       	ldi	r24, 0x1A	; 26
 dea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
 dee:	08 95       	ret

00000df0 <__udivmodqi4>:
 df0:	99 1b       	sub	r25, r25
 df2:	79 e0       	ldi	r23, 0x09	; 9
 df4:	04 c0       	rjmp	.+8      	; 0xdfe <__udivmodqi4_ep>

00000df6 <__udivmodqi4_loop>:
 df6:	99 1f       	adc	r25, r25
 df8:	96 17       	cp	r25, r22
 dfa:	08 f0       	brcs	.+2      	; 0xdfe <__udivmodqi4_ep>
 dfc:	96 1b       	sub	r25, r22

00000dfe <__udivmodqi4_ep>:
 dfe:	88 1f       	adc	r24, r24
 e00:	7a 95       	dec	r23
 e02:	c9 f7       	brne	.-14     	; 0xdf6 <__udivmodqi4_loop>
 e04:	80 95       	com	r24
 e06:	08 95       	ret

00000e08 <eeprom_read_block>:
 e08:	dc 01       	movw	r26, r24
 e0a:	cb 01       	movw	r24, r22

00000e0c <eeprom_read_blraw>:
 e0c:	fc 01       	movw	r30, r24
 e0e:	f9 99       	sbic	0x1f, 1	; 31
 e10:	fe cf       	rjmp	.-4      	; 0xe0e <eeprom_read_blraw+0x2>
 e12:	06 c0       	rjmp	.+12     	; 0xe20 <eeprom_read_blraw+0x14>
 e14:	f2 bd       	out	0x22, r31	; 34
 e16:	e1 bd       	out	0x21, r30	; 33
 e18:	f8 9a       	sbi	0x1f, 0	; 31
 e1a:	31 96       	adiw	r30, 0x01	; 1
 e1c:	00 b4       	in	r0, 0x20	; 32
 e1e:	0d 92       	st	X+, r0
 e20:	41 50       	subi	r20, 0x01	; 1
 e22:	50 40       	sbci	r21, 0x00	; 0
 e24:	b8 f7       	brcc	.-18     	; 0xe14 <eeprom_read_blraw+0x8>
 e26:	08 95       	ret

00000e28 <eeprom_update_block>:
 e28:	dc 01       	movw	r26, r24
 e2a:	a4 0f       	add	r26, r20
 e2c:	b5 1f       	adc	r27, r21
 e2e:	41 50       	subi	r20, 0x01	; 1
 e30:	50 40       	sbci	r21, 0x00	; 0
 e32:	40 f0       	brcs	.+16     	; 0xe44 <eeprom_update_block+0x1c>
 e34:	cb 01       	movw	r24, r22
 e36:	84 0f       	add	r24, r20
 e38:	95 1f       	adc	r25, r21
 e3a:	2e 91       	ld	r18, -X
 e3c:	05 d0       	rcall	.+10     	; 0xe48 <eeprom_update_r18>
 e3e:	41 50       	subi	r20, 0x01	; 1
 e40:	50 40       	sbci	r21, 0x00	; 0
 e42:	d8 f7       	brcc	.-10     	; 0xe3a <eeprom_update_block+0x12>
 e44:	08 95       	ret

00000e46 <eeprom_update_byte>:
 e46:	26 2f       	mov	r18, r22

00000e48 <eeprom_update_r18>:
 e48:	f9 99       	sbic	0x1f, 1	; 31
 e4a:	fe cf       	rjmp	.-4      	; 0xe48 <eeprom_update_r18>
 e4c:	92 bd       	out	0x22, r25	; 34
 e4e:	81 bd       	out	0x21, r24	; 33
 e50:	f8 9a       	sbi	0x1f, 0	; 31
 e52:	01 97       	sbiw	r24, 0x01	; 1
 e54:	00 b4       	in	r0, 0x20	; 32
 e56:	02 16       	cp	r0, r18
 e58:	39 f0       	breq	.+14     	; 0xe68 <eeprom_update_r18+0x20>
 e5a:	1f ba       	out	0x1f, r1	; 31
 e5c:	20 bd       	out	0x20, r18	; 32
 e5e:	0f b6       	in	r0, 0x3f	; 63
 e60:	f8 94       	cli
 e62:	fa 9a       	sbi	0x1f, 2	; 31
 e64:	f9 9a       	sbi	0x1f, 1	; 31
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	08 95       	ret

00000e6a <_exit>:
 e6a:	f8 94       	cli

00000e6c <__stop_program>:
 e6c:	ff cf       	rjmp	.-2      	; 0xe6c <__stop_program>
