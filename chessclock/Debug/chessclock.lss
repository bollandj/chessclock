
chessclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000898  0000092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800126  00800126  00000952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000009c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001658  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aea  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da8  00000000  00000000  00002c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000039f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000718  00000000  00000000  00003c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a1  00000000  00000000  00004354  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000047f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_1>
   8:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_2>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 91 03 	jmp	0x722	; 0x722 <__vector_9>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	34 02       	muls	r19, r20
  6a:	48 02       	muls	r20, r24
  6c:	b1 02       	muls	r27, r17
  6e:	bf 02       	muls	r27, r31
  70:	cd 02       	muls	r28, r29
  72:	d7 02       	muls	r29, r23
  74:	ea 02       	muls	r30, r26

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e8 e9       	ldi	r30, 0x98	; 152
  8a:	f8 e0       	ldi	r31, 0x08	; 8
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a6 32       	cpi	r26, 0x26	; 38
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a6 e2       	ldi	r26, 0x26	; 38
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 37       	cpi	r26, 0x74	; 116
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  ac:	0c 94 4a 04 	jmp	0x894	; 0x894 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <tx_spi>:
	0b01100101  // ?
};

static void tx_spi(uint8_t data)
{
	SPDR = data;
  b4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <tx_spi+0x2>
}
  bc:	08 95       	ret

000000be <init_display>:

void init_display(void)
{
	SPI_DDR |= 1<<SCK | 1<<MOSI | 1<<CS; 
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	8c 62       	ori	r24, 0x2C	; 44
  c2:	84 b9       	out	0x04, r24	; 4
	SPI_PORT |= 1<<CS;                  
  c4:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = 1<<SPE | 1<<MSTR | 1<<SPR1; // master mode, /64 prescaler
  c6:	82 e5       	ldi	r24, 0x52	; 82
  c8:	8c bd       	out	0x2c, r24	; 44
	
	DDRD |= 1<<PD5; // OC0B	
  ca:	55 9a       	sbi	0x0a, 5	; 10
	
	TCCR0A = 1<<COM0B1 | 1<<WGM01 | 1<<WGM00; // Fast PWM, TOP = OCR0A
  cc:	83 e2       	ldi	r24, 0x23	; 35
  ce:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 1<<WGM02 | 1<<CS02;              // /256 prescaler
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 1<<OCIE0A;                       // compare interrupt
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = 48;					              // ~640Hz at 8MHz
  da:	80 e3       	ldi	r24, 0x30	; 48
  dc:	87 bd       	out	0x27, r24	; 39
	OCR0B = 10;                               // Display brightness PWM
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	88 bd       	out	0x28, r24	; 40
	
	PORTB &= ~(1<<CS); 
  e2:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0C);		// shutdown
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	tx_spi(0x01);		//
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	PORTB |= 1<<CS;
  f0:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); 
  f2:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0B);		// scanmode
  f4:	8b e0       	ldi	r24, 0x0B	; 11
  f6:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	tx_spi(0x07);		//
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	PORTB |= 1<<CS;
 100:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); 
 102:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0A);	    // intensity
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	tx_spi(0x0B);		//
 10a:	8b e0       	ldi	r24, 0x0B	; 11
 10c:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	PORTB |= 1<<CS;
 110:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); 
 112:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x09);		// decode
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	tx_spi(0x00);		// no decode
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	PORTB |= 1<<CS;	
 120:	2a 9a       	sbi	0x05, 2	; 5
	
	PORTB &= ~(1<<CS); 
 122:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(0x0F);		// test mode
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	tx_spi(0x00);		// off
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	PORTB |= 1<<CS;
 130:	2a 9a       	sbi	0x05, 2	; 5
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i = 0; i < 8; i++)
	{
		blinkOsc[i] = 0x00;
 136:	fc 01       	movw	r30, r24
 138:	e0 5d       	subi	r30, 0xD0	; 208
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	10 82       	st	Z, r1
		blinkMask[i] = 0x00;
 13e:	fc 01       	movw	r30, r24
 140:	e8 5d       	subi	r30, 0xD8	; 216
 142:	fe 4f       	sbci	r31, 0xFE	; 254
 144:	10 82       	st	Z, r1
 146:	01 96       	adiw	r24, 0x01	; 1
	PORTB &= ~(1<<CS); 
	tx_spi(0x0F);		// test mode
	tx_spi(0x00);		// off
	PORTB |= 1<<CS;
	
	for (uint8_t i = 0; i < 8; i++)
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	91 05       	cpc	r25, r1
 14c:	a1 f7       	brne	.-24     	; 0x136 <init_display+0x78>
	{
		blinkOsc[i] = 0x00;
		blinkMask[i] = 0x00;
	}
}
 14e:	08 95       	ret

00000150 <do_blink>:

void do_blink(void)
{
	blinkTimer++;
 150:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <blinkTimer>
 154:	8f 5f       	subi	r24, 0xFF	; 255
	if (blinkTimer > blinkThreshold)
 156:	89 31       	cpi	r24, 0x19	; 25
 158:	18 f4       	brcc	.+6      	; 0x160 <do_blink+0x10>
	}
}

void do_blink(void)
{
	blinkTimer++;
 15a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <blinkTimer>
 15e:	08 95       	ret
	if (blinkTimer > blinkThreshold)
	{
		blinkTimer = 0;
 160:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <blinkTimer>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
		for (uint8_t i = 0; i < 8; i++)
		{			
			blinkOsc[i] ^= 0x7F; // exclude DP from blink
 168:	3f e7       	ldi	r19, 0x7F	; 127
 16a:	fc 01       	movw	r30, r24
 16c:	e0 5d       	subi	r30, 0xD0	; 208
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	20 81       	ld	r18, Z
 172:	23 27       	eor	r18, r19
 174:	20 83       	st	Z, r18
 176:	01 96       	adiw	r24, 0x01	; 1
{
	blinkTimer++;
	if (blinkTimer > blinkThreshold)
	{
		blinkTimer = 0;
		for (uint8_t i = 0; i < 8; i++)
 178:	88 30       	cpi	r24, 0x08	; 8
 17a:	91 05       	cpc	r25, r1
 17c:	b1 f7       	brne	.-20     	; 0x16a <do_blink+0x1a>
 17e:	08 95       	ret

00000180 <write_time>:
		}
	}
}

void write_time(void)
{
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	9c 01       	movw	r18, r24
 186:	2e 5f       	subi	r18, 0xFE	; 254
 188:	3f 4f       	sbci	r19, 0xFF	; 255
	for (uint8_t i = 0; i < 4; i++)
	{
		displayBuffer[i] = sevenSeg[playerATime[i+2]];
 18a:	f9 01       	movw	r30, r18
 18c:	ef 5a       	subi	r30, 0xAF	; 175
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	e0 81       	ld	r30, Z
 192:	0e 2e       	mov	r0, r30
 194:	00 0c       	add	r0, r0
 196:	ff 0b       	sbc	r31, r31
 198:	e0 50       	subi	r30, 0x00	; 0
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	40 81       	ld	r20, Z
 19e:	fc 01       	movw	r30, r24
 1a0:	e7 5b       	subi	r30, 0xB7	; 183
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	40 83       	st	Z, r20
		displayBuffer[i+4] = sevenSeg[playerBTime[i+2]];
 1a6:	f9 01       	movw	r30, r18
 1a8:	e5 5c       	subi	r30, 0xC5	; 197
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	e0 81       	ld	r30, Z
 1ae:	0e 2e       	mov	r0, r30
 1b0:	00 0c       	add	r0, r0
 1b2:	ff 0b       	sbc	r31, r31
 1b4:	e0 50       	subi	r30, 0x00	; 0
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	20 81       	ld	r18, Z
 1ba:	fc 01       	movw	r30, r24
 1bc:	e3 5b       	subi	r30, 0xB3	; 179
 1be:	fe 4f       	sbci	r31, 0xFE	; 254
 1c0:	20 83       	st	Z, r18
 1c2:	01 96       	adiw	r24, 0x01	; 1
	}
}

void write_time(void)
{
	for (uint8_t i = 0; i < 4; i++)
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	91 05       	cpc	r25, r1
 1c8:	e9 f6       	brne	.-70     	; 0x184 <write_time+0x4>
	{
		displayBuffer[i] = sevenSeg[playerATime[i+2]];
		displayBuffer[i+4] = sevenSeg[playerBTime[i+2]];
	}
}
 1ca:	08 95       	ret

000001cc <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	cf 93       	push	r28
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	static uint8_t i;
	
	PORTB &= ~(1<<CS);
 1f0:	2a 98       	cbi	0x05, 2	; 5
	tx_spi(i+1);
 1f2:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <__data_end>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	8c 0f       	add	r24, r28
 1fa:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	//tx_spi(displayBuffer[i] & !(blinkMask[i] & blinkOsc[i])); // for SR multiplexed display
	tx_spi(displayBuffer[i] | (blinkMask[i] & blinkOsc[i]));
 1fe:	2c 2f       	mov	r18, r28
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	f9 01       	movw	r30, r18
 204:	e7 5b       	subi	r30, 0xB7	; 183
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	40 81       	ld	r20, Z
 20a:	f9 01       	movw	r30, r18
 20c:	e8 5d       	subi	r30, 0xD8	; 216
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	80 81       	ld	r24, Z
 212:	f9 01       	movw	r30, r18
 214:	e0 5d       	subi	r30, 0xD0	; 208
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	90 81       	ld	r25, Z
 21a:	89 23       	and	r24, r25
 21c:	84 2b       	or	r24, r20
 21e:	0e 94 5a 00 	call	0xb4	; 0xb4 <tx_spi>
	PORTB |= 1<<CS;
 222:	2a 9a       	sbi	0x05, 2	; 5
		
	i++;
	i &= 0x07;	
 224:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	87 70       	andi	r24, 0x07	; 7
 22c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	cf 91       	pop	r28
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <scan_keys>:
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
}

void scan_keys(void)
{
	lastKeyState = keyState;
 254:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <keyState>
 258:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <lastKeyState>
		
	keyState = KEY_PIN;
 25c:	96 b1       	in	r25, 0x06	; 6
 25e:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <keyState>
	uint8_t keyDiff = keyState ^ lastKeyState;
 262:	89 27       	eor	r24, r25
	
	keyPressed = keyDiff & ~keyState;	
 264:	29 2f       	mov	r18, r25
 266:	20 95       	com	r18
 268:	28 23       	and	r18, r24
 26a:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <keyPressed>
	keyReleased = keyDiff & keyState;
 26e:	89 23       	and	r24, r25
 270:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <keyReleased>
	
	if (~keyState & START_KEY)
 274:	92 fd       	sbrc	r25, 2
 276:	08 c0       	rjmp	.+16     	; 0x288 <scan_keys+0x34>
	{
		if (holdTimer < holdTimerThreshold) holdTimer++;		
 278:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <holdTimer>
 27c:	8c 33       	cpi	r24, 0x3C	; 60
 27e:	30 f4       	brcc	.+12     	; 0x28c <scan_keys+0x38>
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <holdTimer>
 286:	08 95       	ret
	}
	else
	{
		holdTimer = 0;
 288:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <holdTimer>
 28c:	08 95       	ret

0000028e <init_keys>:
uint8_t holdTimer;
const uint8_t holdTimerThreshold=60;

void init_keys(void)
{
	EICRA = 1<<ISC11 | 1<<ISC01; // falling edge
 28e:	8a e0       	ldi	r24, 0x0A	; 10
 290:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT1 | 1<<INT0;   // enable INT0, INT1
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	8d bb       	out	0x1d, r24	; 29
	PORTD |= 1<<PD2 | 1<<PD3;    // enable pullups
 298:	8b b1       	in	r24, 0x0b	; 11
 29a:	8c 60       	ori	r24, 0x0C	; 12
 29c:	8b b9       	out	0x0b, r24	; 11
	
	KEY_PORT |= KEY_MASK; // enable pullups
 29e:	88 b1       	in	r24, 0x08	; 8
 2a0:	8f 61       	ori	r24, 0x1F	; 31
 2a2:	88 b9       	out	0x08, r24	; 8
	
	scan_keys(); scan_keys(); // avoid detecting keypresses on startup
 2a4:	0e 94 2a 01 	call	0x254	; 0x254 <scan_keys>
 2a8:	0e 94 2a 01 	call	0x254	; 0x254 <scan_keys>
 2ac:	08 95       	ret

000002ae <init_timer>:

volatile playerData playerAData, playerBData, *currentPlayerData;

void init_timer(void)
{
	ASSR = 1<<AS2; // enable asynchronous mode
 2ae:	80 e2       	ldi	r24, 0x20	; 32
 2b0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	
	TCCR2B |= 1<<CS20;         // /1 prescaler
 2b4:	e1 eb       	ldi	r30, 0xB1	; 177
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
	while (ASSR & 1<<TCR2BUB); // wait for register update
 2be:	e6 eb       	ldi	r30, 0xB6	; 182
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	80 fd       	sbrc	r24, 0
 2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <init_timer+0x14>

	TIFR2  = 1<<TOV2;   // clear interrupt flag	
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	87 bb       	out	0x17, r24	; 23
 2cc:	08 95       	ret

000002ce <add_time>:
	//TIMSK2 = 1<<TOIE2;  // enable Timer2 overflow interrupt
}

/* increments baseTime by incTime (ignoring ticks) */
void add_time(volatile gameTime *baseTime, gameTime incTime)
{
 2ce:	fc 01       	movw	r30, r24
 2d0:	db 01       	movw	r26, r22
	(*baseTime)[SECONDS] += incTime[SECONDS];
 2d2:	95 81       	ldd	r25, Z+5	; 0x05
 2d4:	15 96       	adiw	r26, 0x05	; 5
 2d6:	8c 91       	ld	r24, X
 2d8:	15 97       	sbiw	r26, 0x05	; 5
 2da:	89 0f       	add	r24, r25
 2dc:	85 83       	std	Z+5, r24	; 0x05
	if ((*baseTime)[SECONDS] > 9) 
 2de:	85 81       	ldd	r24, Z+5	; 0x05
 2e0:	8a 30       	cpi	r24, 0x0A	; 10
 2e2:	34 f0       	brlt	.+12     	; 0x2f0 <add_time+0x22>
	{
		(*baseTime)[SECONDS] -= 10;
 2e4:	85 81       	ldd	r24, Z+5	; 0x05
 2e6:	8a 50       	subi	r24, 0x0A	; 10
 2e8:	85 83       	std	Z+5, r24	; 0x05
		(*baseTime)[TEN_SECONDS]++;
 2ea:	84 81       	ldd	r24, Z+4	; 0x04
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	84 83       	std	Z+4, r24	; 0x04
	}
	
	(*baseTime)[TEN_SECONDS] += incTime[TEN_SECONDS];
 2f0:	94 81       	ldd	r25, Z+4	; 0x04
 2f2:	14 96       	adiw	r26, 0x04	; 4
 2f4:	8c 91       	ld	r24, X
 2f6:	14 97       	sbiw	r26, 0x04	; 4
 2f8:	89 0f       	add	r24, r25
 2fa:	84 83       	std	Z+4, r24	; 0x04
	if ((*baseTime)[TEN_SECONDS] > 5)
 2fc:	84 81       	ldd	r24, Z+4	; 0x04
 2fe:	86 30       	cpi	r24, 0x06	; 6
 300:	34 f0       	brlt	.+12     	; 0x30e <add_time+0x40>
	{
		(*baseTime)[TEN_SECONDS] -= 6;
 302:	84 81       	ldd	r24, Z+4	; 0x04
 304:	86 50       	subi	r24, 0x06	; 6
 306:	84 83       	std	Z+4, r24	; 0x04
		(*baseTime)[MINUTES]++;
 308:	83 81       	ldd	r24, Z+3	; 0x03
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	83 83       	std	Z+3, r24	; 0x03
	}
	
	(*baseTime)[MINUTES] += incTime[MINUTES];
 30e:	93 81       	ldd	r25, Z+3	; 0x03
 310:	13 96       	adiw	r26, 0x03	; 3
 312:	8c 91       	ld	r24, X
 314:	13 97       	sbiw	r26, 0x03	; 3
 316:	89 0f       	add	r24, r25
 318:	83 83       	std	Z+3, r24	; 0x03
	if ((*baseTime)[MINUTES] > 9)
 31a:	83 81       	ldd	r24, Z+3	; 0x03
 31c:	8a 30       	cpi	r24, 0x0A	; 10
 31e:	34 f0       	brlt	.+12     	; 0x32c <add_time+0x5e>
	{
		(*baseTime)[MINUTES] -= 10;
 320:	83 81       	ldd	r24, Z+3	; 0x03
 322:	8a 50       	subi	r24, 0x0A	; 10
 324:	83 83       	std	Z+3, r24	; 0x03
		(*baseTime)[TEN_MINUTES]++;
 326:	82 81       	ldd	r24, Z+2	; 0x02
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	82 83       	std	Z+2, r24	; 0x02
	}
	
	(*baseTime)[TEN_MINUTES] += incTime[TEN_MINUTES];
 32c:	92 81       	ldd	r25, Z+2	; 0x02
 32e:	12 96       	adiw	r26, 0x02	; 2
 330:	8c 91       	ld	r24, X
 332:	12 97       	sbiw	r26, 0x02	; 2
 334:	89 0f       	add	r24, r25
 336:	82 83       	std	Z+2, r24	; 0x02
	if ((*baseTime)[TEN_MINUTES] > 5)
 338:	82 81       	ldd	r24, Z+2	; 0x02
 33a:	86 30       	cpi	r24, 0x06	; 6
 33c:	34 f0       	brlt	.+12     	; 0x34a <add_time+0x7c>
	{
		(*baseTime)[TEN_MINUTES] -= 6;
 33e:	82 81       	ldd	r24, Z+2	; 0x02
 340:	86 50       	subi	r24, 0x06	; 6
 342:	82 83       	std	Z+2, r24	; 0x02
		(*baseTime)[HOURS]++;
 344:	81 81       	ldd	r24, Z+1	; 0x01
 346:	8f 5f       	subi	r24, 0xFF	; 255
 348:	81 83       	std	Z+1, r24	; 0x01
	}
	
	(*baseTime)[HOURS] += incTime[HOURS];
 34a:	91 81       	ldd	r25, Z+1	; 0x01
 34c:	11 96       	adiw	r26, 0x01	; 1
 34e:	8c 91       	ld	r24, X
 350:	11 97       	sbiw	r26, 0x01	; 1
 352:	89 0f       	add	r24, r25
 354:	81 83       	std	Z+1, r24	; 0x01
	if ((*baseTime)[HOURS] > 9)
 356:	81 81       	ldd	r24, Z+1	; 0x01
 358:	8a 30       	cpi	r24, 0x0A	; 10
 35a:	34 f0       	brlt	.+12     	; 0x368 <add_time+0x9a>
	{
		(*baseTime)[HOURS] -= 10;
 35c:	81 81       	ldd	r24, Z+1	; 0x01
 35e:	8a 50       	subi	r24, 0x0A	; 10
 360:	81 83       	std	Z+1, r24	; 0x01
		(*baseTime)[TEN_HOURS]++;
 362:	80 81       	ld	r24, Z
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 83       	st	Z, r24
	}
	
	(*baseTime)[TEN_HOURS] += incTime[TEN_HOURS];
 368:	90 81       	ld	r25, Z
 36a:	8c 91       	ld	r24, X
 36c:	89 0f       	add	r24, r25
 36e:	80 83       	st	Z, r24
	if ((*baseTime)[TEN_HOURS] > 9)
 370:	80 81       	ld	r24, Z
 372:	8a 30       	cpi	r24, 0x0A	; 10
 374:	34 f0       	brlt	.+12     	; 0x382 <add_time+0xb4>
	{
		(*baseTime)[TEN_HOURS]   = 0;
 376:	10 82       	st	Z, r1
		(*baseTime)[HOURS]       = 0;
 378:	11 82       	std	Z+1, r1	; 0x01
		(*baseTime)[TEN_MINUTES] = 0;
 37a:	12 82       	std	Z+2, r1	; 0x02
		(*baseTime)[MINUTES]     = 0;
 37c:	13 82       	std	Z+3, r1	; 0x03
		(*baseTime)[TEN_SECONDS] = 0;
 37e:	14 82       	std	Z+4, r1	; 0x04
		(*baseTime)[SECONDS]     = 0;
 380:	15 82       	std	Z+5, r1	; 0x05
 382:	08 95       	ret

00000384 <reset>:

/* returns */
//int8_t cmp_time()

void reset(void)
{
 384:	e9 e5       	ldi	r30, 0x59	; 89
 386:	f1 e0       	ldi	r31, 0x01	; 1
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
	{
		playerATime[i] = gameConfig.initialTime[i];
 38c:	21 91       	ld	r18, Z+
 38e:	dc 01       	movw	r26, r24
 390:	af 5a       	subi	r26, 0xAF	; 175
 392:	be 4f       	sbci	r27, 0xFE	; 254
 394:	2c 93       	st	X, r18
		playerBTime[i] = gameConfig.initialTime[i];
 396:	dc 01       	movw	r26, r24
 398:	a5 5c       	subi	r26, 0xC5	; 197
 39a:	be 4f       	sbci	r27, 0xFE	; 254
 39c:	2c 93       	st	X, r18
 39e:	01 96       	adiw	r24, 0x01	; 1
//int8_t cmp_time()

void reset(void)
{
	/* reset time */
	for (uint8_t i = 0; i < 6; i++)
 3a0:	86 30       	cpi	r24, 0x06	; 6
 3a2:	91 05       	cpc	r25, r1
 3a4:	99 f7       	brne	.-26     	; 0x38c <reset+0x8>
		playerATime[i] = gameConfig.initialTime[i];
		playerBTime[i] = gameConfig.initialTime[i];
	}

	/* reset ticks */
	playerATicks = 0;
 3a6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <playerATicks>
	playerBTicks = 0;
 3aa:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <playerBTicks>
	
	/* reset move counts */
	playerAData.moves = 0;
 3ae:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <playerAData+0x1>
 3b2:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <playerAData>
	playerBData.moves = 0;
 3b6:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <playerBData+0x1>
 3ba:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <playerBData>
 3be:	08 95       	ret

000003c0 <main>:

int main(void)
{		
	/* default to player A as white/starting */
	
	currentPlayerTicks = &playerATicks;
 3c0:	81 e4       	ldi	r24, 0x41	; 65
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <currentPlayerTicks+0x1>
 3c8:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <currentPlayerTicks>
	currentPlayerTime = &playerATime;
 3cc:	81 e5       	ldi	r24, 0x51	; 81
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <currentPlayerTime+0x1>
 3d4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <currentPlayerTime>
	currentPlayerData = &playerAData;
 3d8:	8b e6       	ldi	r24, 0x6B	; 107
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <currentPlayerData+0x1>
 3e0:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <currentPlayerData>
	
	DDRD |= 1<<PD0 | 1<<PD1;
 3e4:	8a b1       	in	r24, 0x0a	; 10
 3e6:	83 60       	ori	r24, 0x03	; 3
 3e8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PD1);
 3ea:	59 98       	cbi	0x0b, 1	; 11
	PORTD |= 1<<PD0;
 3ec:	58 9a       	sbi	0x0b, 0	; 11
	
	load_config();
 3ee:	0e 94 07 04 	call	0x80e	; 0x80e <load_config>
	//gameConfig = blitz3plus2Config;
	
	reset();
 3f2:	0e 94 c2 01 	call	0x384	; 0x384 <reset>
	
	init_display();
 3f6:	0e 94 5f 00 	call	0xbe	; 0xbe <init_display>
	init_keys();
 3fa:	0e 94 47 01 	call	0x28e	; 0x28e <init_keys>
	init_timer();
 3fe:	0e 94 57 01 	call	0x2ae	; 0x2ae <init_timer>
	
	sei();
 402:	78 94       	sei
			break;
			
			/* Game paused */
			/* Clock countdown for both players is paused */
			case GAME_PAUSED:
			if (holdTimer >= holdTimerThreshold)
 404:	d0 90 25 01 	lds	r13, 0x0125	; 0x800125 <holdTimerThreshold>
				reset();
				state = IDLE;	
			}
			else if (keyPressed & START_KEY)
			{
				TIMSK2 = 1<<TOIE2;
 408:	c0 e7       	ldi	r28, 0x70	; 112
 40a:	d0 e0       	ldi	r29, 0x00	; 0
 40c:	ee 24       	eor	r14, r14
 40e:	e3 94       	inc	r14
				state = GAME_ACTIVE;
 410:	68 94       	set
 412:	cc 24       	eor	r12, r12
 414:	c2 f8       	bld	r12, 2
			/* Clock is currently counting down */
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
			{
				TIMSK2 = 0x00;
				state = GAME_PAUSED;	
 416:	0f 2e       	mov	r0, r31
 418:	f5 e0       	ldi	r31, 0x05	; 5
 41a:	bf 2e       	mov	r11, r31
 41c:	f0 2d       	mov	r31, r0
				state = IDLE;
			}
			else if (keyPressed & MODE_KEY)
			{
				
				state = EDIT_MODE;
 41e:	68 94       	set
 420:	99 24       	eor	r9, r9
 422:	91 f8       	bld	r9, 1
				state = IDLE;
			}
			else if (keyPressed & MODE_KEY)
			{
				
				state = EDIT_DELAY;
 424:	0f 2e       	mov	r0, r31
 426:	f3 e0       	ldi	r31, 0x03	; 3
 428:	af 2e       	mov	r10, r31
 42a:	f0 2d       	mov	r31, r0
			else if (keyPressed & (UP_KEY | DOWN_KEY))
			{
				int8_t timeComponent;
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
 42c:	0f 2e       	mov	r0, r31
 42e:	f9 e0       	ldi	r31, 0x09	; 9
 430:	8f 2e       	mov	r8, r31
 432:	f0 2d       	mov	r31, r0
				blinkMask[timeEditCursor+4] = 0x00;
				
				timeEditCursor++;
				timeEditCursor &= 0x03;
				
				blinkMask[timeEditCursor] = 0xFF;
 434:	ff 24       	eor	r15, r15
 436:	fa 94       	dec	r15
				state = GAME_ACTIVE;
			}
			else if (keyPressed & TIME_KEY)
			{
				timeEditCursor = 0;
				blinkMask[0] = 0xFF;
 438:	08 e2       	ldi	r16, 0x28	; 40
 43a:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43c:	8f e2       	ldi	r24, 0x2F	; 47
 43e:	95 e7       	ldi	r25, 0x75	; 117
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 446:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(15);
		
		scan_keys();
 448:	0e 94 2a 01 	call	0x254	; 0x254 <scan_keys>
		do_blink();
 44c:	0e 94 a8 00 	call	0x150	; 0x150 <do_blink>
		
		switch (state)
 450:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <state>
 454:	8e 2f       	mov	r24, r30
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	87 30       	cpi	r24, 0x07	; 7
 45a:	91 05       	cpc	r25, r1
 45c:	78 f7       	brcc	.-34     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 45e:	fc 01       	movw	r30, r24
 460:	ec 5c       	subi	r30, 0xCC	; 204
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	0c 94 12 04 	jmp	0x824	; 0x824 <__tablejump2__>
		{
			/* Idle */
			/* Ready to start a game */
			case IDLE:
			if (keyPressed & START_KEY)
 468:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <keyPressed>
 46c:	82 ff       	sbrs	r24, 2
 46e:	04 c0       	rjmp	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			{
				TIMSK2 = 1<<TOIE2;
 470:	e8 82       	st	Y, r14
				
				state = GAME_ACTIVE;
 472:	c0 92 73 01 	sts	0x0173, r12	; 0x800173 <state>
 476:	09 c0       	rjmp	.+18     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
			}
			else if (keyPressed & TIME_KEY)
 478:	81 ff       	sbrs	r24, 1
 47a:	07 c0       	rjmp	.+14     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
			{
				timeEditCursor = 0;
 47c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <timeEditCursor>
				blinkMask[0] = 0xFF;
 480:	f8 01       	movw	r30, r16
 482:	f0 82       	st	Z, r15
				blinkMask[4] = 0xFF;
 484:	f4 82       	std	Z+4, r15	; 0x04
								
				state = EDIT_TIME;
 486:	e0 92 73 01 	sts	0x0173, r14	; 0x800173 <state>
			}
			
			write_time();
 48a:	0e 94 c0 00 	call	0x180	; 0x180 <write_time>
			break;
 48e:	d6 cf       	rjmp	.-84     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			
			/* Time edit mode */
			/* Edit initial time for one or both players */
			case EDIT_TIME:
			if (keyPressed & START_KEY)
 490:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <keyPressed>
 494:	82 ff       	sbrs	r24, 2
 496:	10 c0       	rjmp	.+32     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
			{
				/* stop blinking */
				blinkMask[timeEditCursor] = 0x00;
 498:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <timeEditCursor>
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	fc 01       	movw	r30, r24
 4a0:	e8 5d       	subi	r30, 0xD8	; 216
 4a2:	fe 4f       	sbci	r31, 0xFE	; 254
 4a4:	10 82       	st	Z, r1
				blinkMask[timeEditCursor+4] = 0x00;
 4a6:	fc 01       	movw	r30, r24
 4a8:	e4 5d       	subi	r30, 0xD4	; 212
 4aa:	fe 4f       	sbci	r31, 0xFE	; 254
 4ac:	10 82       	st	Z, r1
				
				/* save settings */
				store_config();
 4ae:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <store_config>
				
				state = IDLE;	
 4b2:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
 4b6:	52 c0       	rjmp	.+164    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
			}
			else if (keyPressed & TIME_KEY)
 4b8:	81 ff       	sbrs	r24, 1
 4ba:	1a c0       	rjmp	.+52     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			{
				blinkMask[timeEditCursor] = 0x00;
 4bc:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <timeEditCursor>
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	f9 01       	movw	r30, r18
 4c6:	e8 5d       	subi	r30, 0xD8	; 216
 4c8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ca:	10 82       	st	Z, r1
				blinkMask[timeEditCursor+4] = 0x00;
 4cc:	f9 01       	movw	r30, r18
 4ce:	e4 5d       	subi	r30, 0xD4	; 212
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	10 82       	st	Z, r1
				
				timeEditCursor++;
				timeEditCursor &= 0x03;
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	83 70       	andi	r24, 0x03	; 3
 4d8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <timeEditCursor>
				
				blinkMask[timeEditCursor] = 0xFF;
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	fc 01       	movw	r30, r24
 4e0:	e8 5d       	subi	r30, 0xD8	; 216
 4e2:	fe 4f       	sbci	r31, 0xFE	; 254
 4e4:	f0 82       	st	Z, r15
				blinkMask[timeEditCursor+4] = 0xFF;
 4e6:	fc 01       	movw	r30, r24
 4e8:	e4 5d       	subi	r30, 0xD4	; 212
 4ea:	fe 4f       	sbci	r31, 0xFE	; 254
 4ec:	f0 82       	st	Z, r15
 4ee:	36 c0       	rjmp	.+108    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
			}
			else if (keyPressed & (UP_KEY | DOWN_KEY))
 4f0:	98 2f       	mov	r25, r24
 4f2:	98 71       	andi	r25, 0x18	; 24
 4f4:	99 f1       	breq	.+102    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
			{
				int8_t timeComponent;
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
 4f6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <timeEditCursor>
 4fa:	90 ff       	sbrs	r25, 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4fe:	28 2d       	mov	r18, r8
 500:	01 c0       	rjmp	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			}
			else if (keyPressed & (UP_KEY | DOWN_KEY))
			{
				int8_t timeComponent;
				
				uint8_t limit = 5;                    // 9 for units, 5 for seconds
 502:	2b 2d       	mov	r18, r11
				if (timeEditCursor & 0x01) limit = 9; // even = units, odd = tens
				
				if (keyPressed & UP_KEY)
 504:	84 ff       	sbrs	r24, 4
 506:	11 c0       	rjmp	.+34     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
				{
					timeComponent = ++playerATime[timeEditCursor+2];
 508:	e9 2f       	mov	r30, r25
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	ed 5a       	subi	r30, 0xAD	; 173
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	60 81       	ld	r22, Z
 512:	6f 5f       	subi	r22, 0xFF	; 255
 514:	60 83       	st	Z, r22
					if (timeComponent > limit) timeComponent = 0;
 516:	46 2f       	mov	r20, r22
 518:	06 2e       	mov	r0, r22
 51a:	00 0c       	add	r0, r0
 51c:	55 0b       	sbc	r21, r21
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	24 17       	cp	r18, r20
 522:	35 07       	cpc	r19, r21
 524:	64 f4       	brge	.+24     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	0a c0       	rjmp	.+20     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				}
				else
				{
					timeComponent = --playerATime[timeEditCursor+2];
 52a:	e9 2f       	mov	r30, r25
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ed 5a       	subi	r30, 0xAD	; 173
 530:	fe 4f       	sbci	r31, 0xFE	; 254
 532:	60 81       	ld	r22, Z
 534:	61 50       	subi	r22, 0x01	; 1
 536:	60 83       	st	Z, r22
					if (timeComponent < 0) timeComponent = limit;
 538:	66 23       	and	r22, r22
 53a:	0c f4       	brge	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53c:	62 2f       	mov	r22, r18
				}
				
				gameConfig.initialTime[timeEditCursor+2] = timeComponent;
 53e:	89 2f       	mov	r24, r25
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 96       	adiw	r24, 0x02	; 2
 544:	fc 01       	movw	r30, r24
 546:	e7 5a       	subi	r30, 0xA7	; 167
 548:	fe 4f       	sbci	r31, 0xFE	; 254
 54a:	60 83       	st	Z, r22
				
				playerATime[timeEditCursor+2] = timeComponent;
 54c:	fc 01       	movw	r30, r24
 54e:	ef 5a       	subi	r30, 0xAF	; 175
 550:	fe 4f       	sbci	r31, 0xFE	; 254
 552:	60 83       	st	Z, r22
				playerBTime[timeEditCursor+2] = timeComponent;
 554:	fc 01       	movw	r30, r24
 556:	e5 5c       	subi	r30, 0xC5	; 197
 558:	fe 4f       	sbci	r31, 0xFE	; 254
 55a:	60 83       	st	Z, r22
								
				//displayBuffer[timeEditCursor] = timeComponent;
				//displayBuffer[timeEditCursor+4] = timeComponent;	
			}
			
			write_time();
 55c:	0e 94 c0 00 	call	0x180	; 0x180 <write_time>
			break;
 560:	6d cf       	rjmp	.-294    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			
			/* Edit game mode */
			/* Select between different clock modes */
			case EDIT_MODE:			
			if (keyPressed & START_KEY)
 562:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <keyPressed>
 566:	82 ff       	sbrs	r24, 2
 568:	05 c0       	rjmp	.+10     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
			{
				/* save settings */
				store_config();
 56a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <store_config>
				
				state = IDLE;
 56e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
 572:	64 cf       	rjmp	.-312    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			}
			else if (keyPressed & MODE_KEY)
 574:	80 ff       	sbrs	r24, 0
 576:	62 cf       	rjmp	.-316    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			{
				
				state = EDIT_DELAY;
 578:	a0 92 73 01 	sts	0x0173, r10	; 0x800173 <state>
 57c:	5f cf       	rjmp	.-322    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			break;
			
			/* Edit time increment/delay */
			/* Change increment or delay (simple/Bronstein modes) time */
			case EDIT_DELAY:
			if (keyPressed & START_KEY)
 57e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <keyPressed>
 582:	82 ff       	sbrs	r24, 2
 584:	05 c0       	rjmp	.+10     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
			{
				/* save settings */
				store_config();
 586:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <store_config>
				
				state = IDLE;
 58a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
 58e:	56 cf       	rjmp	.-340    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			}
			else if (keyPressed & MODE_KEY)
 590:	80 ff       	sbrs	r24, 0
 592:	54 cf       	rjmp	.-344    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			{
				
				state = EDIT_MODE;
 594:	90 92 73 01 	sts	0x0173, r9	; 0x800173 <state>
 598:	51 cf       	rjmp	.-350    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			break;
			
			/* Game active */
			/* Clock is currently counting down */
			case GAME_ACTIVE:
			if (keyPressed & START_KEY)
 59a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <keyPressed>
 59e:	82 ff       	sbrs	r24, 2
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			{
				TIMSK2 = 0x00;
 5a2:	18 82       	st	Y, r1
				state = GAME_PAUSED;	
 5a4:	b0 92 73 01 	sts	0x0173, r11	; 0x800173 <state>
			}
			
			write_time();
 5a8:	0e 94 c0 00 	call	0x180	; 0x180 <write_time>
			break;
 5ac:	47 cf       	rjmp	.-370    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			
			/* Game paused */
			/* Clock countdown for both players is paused */
			case GAME_PAUSED:
			if (holdTimer >= holdTimerThreshold)
 5ae:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <holdTimer>
 5b2:	8d 15       	cp	r24, r13
 5b4:	28 f0       	brcs	.+10     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
			{				
				reset();
 5b6:	0e 94 c2 01 	call	0x384	; 0x384 <reset>
				state = IDLE;	
 5ba:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
 5be:	07 c0       	rjmp	.+14     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
			}
			else if (keyPressed & START_KEY)
 5c0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <keyPressed>
 5c4:	82 ff       	sbrs	r24, 2
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
			{
				TIMSK2 = 1<<TOIE2;
 5c8:	e8 82       	st	Y, r14
				state = GAME_ACTIVE;
 5ca:	c0 92 73 01 	sts	0x0173, r12	; 0x800173 <state>
			}
			
			write_time();
 5ce:	0e 94 c0 00 	call	0x180	; 0x180 <write_time>
			break;
 5d2:	34 cf       	rjmp	.-408    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			
			/* Game finished */
			/* One player's time has run out */
			case GAME_FINISHED:
			if (keyPressed & START_KEY)
 5d4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <keyPressed>
 5d8:	82 ff       	sbrs	r24, 2
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
			{
				reset();
 5dc:	0e 94 c2 01 	call	0x384	; 0x384 <reset>
				state = IDLE;
 5e0:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
			}
			
			write_time();
 5e4:	0e 94 c0 00 	call	0x180	; 0x180 <write_time>
			break;
 5e8:	29 cf       	rjmp	.-430    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>

000005ea <__vector_1>:
    }
}

/* Player A's button */
ISR(INT0_vect) 
{	
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	2f 93       	push	r18
 5f6:	3f 93       	push	r19
 5f8:	4f 93       	push	r20
 5fa:	5f 93       	push	r21
 5fc:	6f 93       	push	r22
 5fe:	7f 93       	push	r23
 600:	8f 93       	push	r24
 602:	9f 93       	push	r25
 604:	af 93       	push	r26
 606:	bf 93       	push	r27
 608:	ef 93       	push	r30
 60a:	ff 93       	push	r31
	switch (state)
 60c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <state>
 610:	84 30       	cpi	r24, 0x04	; 4
 612:	19 f5       	brne	.+70     	; 0x65a <__vector_1+0x70>
	{
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerATime)
 614:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <currentPlayerTime>
 618:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <currentPlayerTime+0x1>
 61c:	81 55       	subi	r24, 0x51	; 81
 61e:	91 40       	sbci	r25, 0x01	; 1
 620:	e1 f4       	brne	.+56     	; 0x65a <__vector_1+0x70>
		{
			switch (gameConfig.gameMode)
 622:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <gameConfig+0x6>
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	19 f0       	breq	.+6      	; 0x630 <__vector_1+0x46>
 62a:	83 30       	cpi	r24, 0x03	; 3
 62c:	41 f0       	breq	.+16     	; 0x63e <__vector_1+0x54>
 62e:	15 c0       	rjmp	.+42     	; 0x65a <__vector_1+0x70>
				case SIMPLE:
				
				break;
				
				case INCREMENT:
				add_time(currentPlayerTime, gameConfig.delay);
 630:	60 e6       	ldi	r22, 0x60	; 96
 632:	71 e0       	ldi	r23, 0x01	; 1
 634:	81 e5       	ldi	r24, 0x51	; 81
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 67 01 	call	0x2ce	; 0x2ce <add_time>
				break;
 63c:	0e c0       	rjmp	.+28     	; 0x65a <__vector_1+0x70>
	switch (state)
	{
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerATime)
		{
			switch (gameConfig.gameMode)
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	90 e0       	ldi	r25, 0x00	; 0
				break;
				
				case BRONSTEIN_DELAY:
				for (uint8_t i = 0; i < 6; i++)
				{
					delayTime[i] = playerBTime[i];
 642:	fc 01       	movw	r30, r24
 644:	e5 5c       	subi	r30, 0xC5	; 197
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	20 81       	ld	r18, Z
 64a:	fc 01       	movw	r30, r24
 64c:	ed 5b       	subi	r30, 0xBD	; 189
 64e:	fe 4f       	sbci	r31, 0xFE	; 254
 650:	20 83       	st	Z, r18
 652:	01 96       	adiw	r24, 0x01	; 1
				case SIMPLE_DELAY:
				
				break;
				
				case BRONSTEIN_DELAY:
				for (uint8_t i = 0; i < 6; i++)
 654:	86 30       	cpi	r24, 0x06	; 6
 656:	91 05       	cpc	r25, r1
 658:	a1 f7       	brne	.-24     	; 0x642 <__vector_1+0x58>
		
		default:			
		break;
	}
	
	currentPlayerTime  = &playerBTime; // start decrementing other player's time instead
 65a:	8b e3       	ldi	r24, 0x3B	; 59
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <currentPlayerTime+0x1>
 662:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <currentPlayerTime>
	currentPlayerTicks = &playerBTicks;
 666:	8a e3       	ldi	r24, 0x3A	; 58
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <currentPlayerTicks+0x1>
 66e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <currentPlayerTicks>
		
	PORTD |= 1<<PD1;
 672:	59 9a       	sbi	0x0b, 1	; 11
	PORTD &= ~(1<<PD0);	
 674:	58 98       	cbi	0x0b, 0	; 11
}
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <__vector_2>:

/* Player B's button */
ISR(INT1_vect)
{
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	2f 93       	push	r18
 6a4:	3f 93       	push	r19
 6a6:	4f 93       	push	r20
 6a8:	5f 93       	push	r21
 6aa:	6f 93       	push	r22
 6ac:	7f 93       	push	r23
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
 6b6:	ef 93       	push	r30
 6b8:	ff 93       	push	r31
	switch (state)
 6ba:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <state>
 6be:	84 30       	cpi	r24, 0x04	; 4
 6c0:	89 f4       	brne	.+34     	; 0x6e4 <__vector_2+0x4c>
	{		
		case GAME_ACTIVE:
		if (currentPlayerTime == &playerBTime)
 6c2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <currentPlayerTime>
 6c6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <currentPlayerTime+0x1>
 6ca:	8b 53       	subi	r24, 0x3B	; 59
 6cc:	91 40       	sbci	r25, 0x01	; 1
 6ce:	51 f4       	brne	.+20     	; 0x6e4 <__vector_2+0x4c>
		{			
			switch (gameConfig.gameMode)
 6d0:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <gameConfig+0x6>
 6d4:	81 30       	cpi	r24, 0x01	; 1
 6d6:	31 f4       	brne	.+12     	; 0x6e4 <__vector_2+0x4c>
				case SIMPLE:
				
				break;
			
				case INCREMENT:
				add_time(currentPlayerTime, gameConfig.delay);
 6d8:	60 e6       	ldi	r22, 0x60	; 96
 6da:	71 e0       	ldi	r23, 0x01	; 1
 6dc:	8b e3       	ldi	r24, 0x3B	; 59
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 67 01 	call	0x2ce	; 0x2ce <add_time>
		
		default:
		break;
	}
	
	currentPlayerTime  = &playerATime; // start decrementing other player's time instead	
 6e4:	81 e5       	ldi	r24, 0x51	; 81
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <currentPlayerTime+0x1>
 6ec:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <currentPlayerTime>
	currentPlayerTicks = &playerATicks;
 6f0:	81 e4       	ldi	r24, 0x41	; 65
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <currentPlayerTicks+0x1>
 6f8:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <currentPlayerTicks>
		
	PORTD |= 1<<PD0;
 6fc:	58 9a       	sbi	0x0b, 0	; 11
	PORTD &= ~(1<<PD1);
 6fe:	59 98       	cbi	0x0b, 1	; 11
}
 700:	ff 91       	pop	r31
 702:	ef 91       	pop	r30
 704:	bf 91       	pop	r27
 706:	af 91       	pop	r26
 708:	9f 91       	pop	r25
 70a:	8f 91       	pop	r24
 70c:	7f 91       	pop	r23
 70e:	6f 91       	pop	r22
 710:	5f 91       	pop	r21
 712:	4f 91       	pop	r20
 714:	3f 91       	pop	r19
 716:	2f 91       	pop	r18
 718:	0f 90       	pop	r0
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	0f 90       	pop	r0
 71e:	1f 90       	pop	r1
 720:	18 95       	reti

00000722 <__vector_9>:

/* TODO: implement simple/Bronstein delay by decrementing delay time in addition to/as well as current player time */
ISR(TIMER2_OVF_vect)
{	
 722:	1f 92       	push	r1
 724:	0f 92       	push	r0
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	0f 92       	push	r0
 72a:	11 24       	eor	r1, r1
 72c:	8f 93       	push	r24
 72e:	ef 93       	push	r30
 730:	ff 93       	push	r31
	if (++(*currentPlayerTicks) > 127)
 732:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <currentPlayerTicks>
 736:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <currentPlayerTicks+0x1>
 73a:	80 81       	ld	r24, Z
 73c:	8f 5f       	subi	r24, 0xFF	; 255
 73e:	80 83       	st	Z, r24
 740:	88 23       	and	r24, r24
 742:	0c f0       	brlt	.+2      	; 0x746 <__vector_9+0x24>
 744:	51 c0       	rjmp	.+162    	; 0x7e8 <__vector_9+0xc6>
	{
		*currentPlayerTicks = 0;
 746:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <currentPlayerTicks>
 74a:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <currentPlayerTicks+0x1>
 74e:	10 82       	st	Z, r1
		
		if (--(*currentPlayerTime)[SECONDS] < 0)
 750:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <currentPlayerTime>
 754:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <currentPlayerTime+0x1>
 758:	85 81       	ldd	r24, Z+5	; 0x05
 75a:	81 50       	subi	r24, 0x01	; 1
 75c:	85 83       	std	Z+5, r24	; 0x05
 75e:	88 23       	and	r24, r24
 760:	0c f0       	brlt	.+2      	; 0x764 <__vector_9+0x42>
 762:	42 c0       	rjmp	.+132    	; 0x7e8 <__vector_9+0xc6>
		{
			(*currentPlayerTime)[SECONDS] = 9;
 764:	89 e0       	ldi	r24, 0x09	; 9
 766:	85 83       	std	Z+5, r24	; 0x05
		
			if (--(*currentPlayerTime)[TEN_SECONDS] < 0)
 768:	84 81       	ldd	r24, Z+4	; 0x04
 76a:	81 50       	subi	r24, 0x01	; 1
 76c:	84 83       	std	Z+4, r24	; 0x04
 76e:	88 23       	and	r24, r24
 770:	dc f5       	brge	.+118    	; 0x7e8 <__vector_9+0xc6>
			{
				(*currentPlayerTime)[TEN_SECONDS] = 5;
 772:	85 e0       	ldi	r24, 0x05	; 5
 774:	84 83       	std	Z+4, r24	; 0x04
			
				if (--(*currentPlayerTime)[MINUTES] < 0)
 776:	83 81       	ldd	r24, Z+3	; 0x03
 778:	81 50       	subi	r24, 0x01	; 1
 77a:	83 83       	std	Z+3, r24	; 0x03
 77c:	88 23       	and	r24, r24
 77e:	a4 f5       	brge	.+104    	; 0x7e8 <__vector_9+0xc6>
				{
					(*currentPlayerTime)[MINUTES] = 9;
 780:	89 e0       	ldi	r24, 0x09	; 9
 782:	83 83       	std	Z+3, r24	; 0x03
				
					if (--(*currentPlayerTime)[TEN_MINUTES] < 0)
 784:	82 81       	ldd	r24, Z+2	; 0x02
 786:	81 50       	subi	r24, 0x01	; 1
 788:	82 83       	std	Z+2, r24	; 0x02
 78a:	88 23       	and	r24, r24
 78c:	6c f5       	brge	.+90     	; 0x7e8 <__vector_9+0xc6>
					{					
						(*currentPlayerTime)[TEN_MINUTES] = 5;
 78e:	85 e0       	ldi	r24, 0x05	; 5
 790:	82 83       	std	Z+2, r24	; 0x02
					
						if (--(*currentPlayerTime)[HOURS] < 0)
 792:	81 81       	ldd	r24, Z+1	; 0x01
 794:	81 50       	subi	r24, 0x01	; 1
 796:	81 83       	std	Z+1, r24	; 0x01
 798:	88 23       	and	r24, r24
 79a:	34 f5       	brge	.+76     	; 0x7e8 <__vector_9+0xc6>
						{
							(*currentPlayerTime)[HOURS] = 9;
 79c:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <currentPlayerTime>
 7a0:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <currentPlayerTime+0x1>
 7a4:	89 e0       	ldi	r24, 0x09	; 9
 7a6:	81 83       	std	Z+1, r24	; 0x01
						
							if(--(*currentPlayerTime)[TEN_HOURS] < 0)
 7a8:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <currentPlayerTime>
 7ac:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <currentPlayerTime+0x1>
 7b0:	80 81       	ld	r24, Z
 7b2:	81 50       	subi	r24, 0x01	; 1
 7b4:	80 83       	st	Z, r24
 7b6:	88 23       	and	r24, r24
 7b8:	bc f4       	brge	.+46     	; 0x7e8 <__vector_9+0xc6>
							{
								(*currentPlayerTime)[TEN_HOURS]   = 0;
 7ba:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <currentPlayerTime>
 7be:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <currentPlayerTime+0x1>
 7c2:	10 82       	st	Z, r1
								(*currentPlayerTime)[HOURS]       = 0;
 7c4:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <currentPlayerTime>
 7c8:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <currentPlayerTime+0x1>
 7cc:	11 82       	std	Z+1, r1	; 0x01
								(*currentPlayerTime)[TEN_MINUTES] = 0;
 7ce:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <currentPlayerTime>
 7d2:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <currentPlayerTime+0x1>
 7d6:	12 82       	std	Z+2, r1	; 0x02
								(*currentPlayerTime)[MINUTES]     = 0;
 7d8:	13 82       	std	Z+3, r1	; 0x03
								(*currentPlayerTime)[TEN_SECONDS] = 0;
 7da:	14 82       	std	Z+4, r1	; 0x04
								(*currentPlayerTime)[SECONDS]     = 0;	
 7dc:	15 82       	std	Z+5, r1	; 0x05
								
								TIMSK2 = 0x00; // disable further ticks
 7de:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
								state = GAME_FINISHED;
 7e2:	86 e0       	ldi	r24, 0x06	; 6
 7e4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
				}
			}
		}
	}		
	
}
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	8f 91       	pop	r24
 7ee:	0f 90       	pop	r0
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	0f 90       	pop	r0
 7f4:	1f 90       	pop	r1
 7f6:	18 95       	reti

000007f8 <store_config>:
};


void store_config()
{
	cli();	
 7f8:	f8 94       	cli
	eeprom_update_block((const void *)&gameConfig, (void *)0, sizeof(gameConfiguration));	
 7fa:	4d e0       	ldi	r20, 0x0D	; 13
 7fc:	50 e0       	ldi	r21, 0x00	; 0
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	89 e5       	ldi	r24, 0x59	; 89
 804:	91 e0       	ldi	r25, 0x01	; 1
 806:	0e 94 28 04 	call	0x850	; 0x850 <eeprom_update_block>
	sei();	
 80a:	78 94       	sei
 80c:	08 95       	ret

0000080e <load_config>:
}

void load_config()
{
	cli();	
 80e:	f8 94       	cli
	eeprom_read_block((void *)&gameConfig, (const void *)0, sizeof(gameConfiguration));	
 810:	4d e0       	ldi	r20, 0x0D	; 13
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	89 e5       	ldi	r24, 0x59	; 89
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 18 04 	call	0x830	; 0x830 <eeprom_read_block>
	sei();
 820:	78 94       	sei
 822:	08 95       	ret

00000824 <__tablejump2__>:
 824:	ee 0f       	add	r30, r30
 826:	ff 1f       	adc	r31, r31
 828:	05 90       	lpm	r0, Z+
 82a:	f4 91       	lpm	r31, Z
 82c:	e0 2d       	mov	r30, r0
 82e:	09 94       	ijmp

00000830 <eeprom_read_block>:
 830:	dc 01       	movw	r26, r24
 832:	cb 01       	movw	r24, r22

00000834 <eeprom_read_blraw>:
 834:	fc 01       	movw	r30, r24
 836:	f9 99       	sbic	0x1f, 1	; 31
 838:	fe cf       	rjmp	.-4      	; 0x836 <eeprom_read_blraw+0x2>
 83a:	06 c0       	rjmp	.+12     	; 0x848 <eeprom_read_blraw+0x14>
 83c:	f2 bd       	out	0x22, r31	; 34
 83e:	e1 bd       	out	0x21, r30	; 33
 840:	f8 9a       	sbi	0x1f, 0	; 31
 842:	31 96       	adiw	r30, 0x01	; 1
 844:	00 b4       	in	r0, 0x20	; 32
 846:	0d 92       	st	X+, r0
 848:	41 50       	subi	r20, 0x01	; 1
 84a:	50 40       	sbci	r21, 0x00	; 0
 84c:	b8 f7       	brcc	.-18     	; 0x83c <eeprom_read_blraw+0x8>
 84e:	08 95       	ret

00000850 <eeprom_update_block>:
 850:	dc 01       	movw	r26, r24
 852:	a4 0f       	add	r26, r20
 854:	b5 1f       	adc	r27, r21
 856:	41 50       	subi	r20, 0x01	; 1
 858:	50 40       	sbci	r21, 0x00	; 0
 85a:	48 f0       	brcs	.+18     	; 0x86e <eeprom_update_block+0x1e>
 85c:	cb 01       	movw	r24, r22
 85e:	84 0f       	add	r24, r20
 860:	95 1f       	adc	r25, r21
 862:	2e 91       	ld	r18, -X
 864:	0e 94 39 04 	call	0x872	; 0x872 <eeprom_update_r18>
 868:	41 50       	subi	r20, 0x01	; 1
 86a:	50 40       	sbci	r21, 0x00	; 0
 86c:	d0 f7       	brcc	.-12     	; 0x862 <eeprom_update_block+0x12>
 86e:	08 95       	ret

00000870 <eeprom_update_byte>:
 870:	26 2f       	mov	r18, r22

00000872 <eeprom_update_r18>:
 872:	f9 99       	sbic	0x1f, 1	; 31
 874:	fe cf       	rjmp	.-4      	; 0x872 <eeprom_update_r18>
 876:	92 bd       	out	0x22, r25	; 34
 878:	81 bd       	out	0x21, r24	; 33
 87a:	f8 9a       	sbi	0x1f, 0	; 31
 87c:	01 97       	sbiw	r24, 0x01	; 1
 87e:	00 b4       	in	r0, 0x20	; 32
 880:	02 16       	cp	r0, r18
 882:	39 f0       	breq	.+14     	; 0x892 <eeprom_update_r18+0x20>
 884:	1f ba       	out	0x1f, r1	; 31
 886:	20 bd       	out	0x20, r18	; 32
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	f8 94       	cli
 88c:	fa 9a       	sbi	0x1f, 2	; 31
 88e:	f9 9a       	sbi	0x1f, 1	; 31
 890:	0f be       	out	0x3f, r0	; 63
 892:	08 95       	ret

00000894 <_exit>:
 894:	f8 94       	cli

00000896 <__stop_program>:
 896:	ff cf       	rjmp	.-2      	; 0x896 <__stop_program>
